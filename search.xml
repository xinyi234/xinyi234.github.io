<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Reverse刷题笔记</title>
      <link href="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="HUBUCTF-2022-新生赛-simple-RE"><a href="#HUBUCTF-2022-新生赛-simple-RE" class="headerlink" title="[HUBUCTF 2022 新生赛]simple_RE"></a>[HUBUCTF 2022 新生赛]simple_RE</h2><p>附件是.exe文件</p><p>用ida打开F5反汇编得到：</p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/1.png" alt="反汇编C代码"></p><p>sub_401570函数对输入的flag进行变换，memcmp函数用于判断两个字符串的前n个字符是否相等</p><p>进入sub_401570：</p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/2.png" alt="函数代码"></p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/3.png" alt="函数代码"></p><p>(经过chatgpt分析) 分析出这个函数的功能：</p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/4.png" alt="函数功能"></p><p>到这里我认为只要把已知字符串进行base64解码就行，发现是乱码</p><p>经过wp提示，原来是base64换表</p><p>aQvejafhmuyjbac&#x3D;”qvEJAfHmUYjBac+u8Ph5n9Od17FrICL&#x2F;X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD”是映射表</p><p>写脚本复原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;qvEJAfHmUYjBac+u8Ph5n9Od17FrICL/X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD+/&quot;</span></span><br><span class="line">table2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        <span class="keyword">if</span> i == table[j]:</span><br><span class="line">            flag += table2[j]</span><br><span class="line"></span><br><span class="line">flag = base64.b64decode(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到flag啦</p><p>base64原理：<a href="https://www.cnblogs.com/xiaxveliang/p/15097947.html">https://www.cnblogs.com/xiaxveliang/p/15097947.html</a></p><p>反汇编代码中0LL的含义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在编程中，0ll表示一个整数常量，通常用来表示十进制的长长整数（long long int）。其中0表示数字零，ll表示long long int类型的后缀，用于确保整数常量被解释为长长整数类型。</span><br><span class="line"></span><br><span class="line">长长整数类型是一种可以存储更大范围整数的数据类型。通常情况下，整数类型的范围是有限的，例如int类型的范围是-2147483648到2147483647。当需要处理超出这个范围的整数时，就可以使用长长整数类型来表示。</span><br><span class="line"></span><br><span class="line">使用0ll作为整数常量的后缀，可以明确告诉编译器将其解释为长长整数类型。例如，下面的代码将一个长长整数常量赋值给变量x：</span><br><span class="line"></span><br><span class="line">long long int x = 1234567890123456789ll;</span><br><span class="line"></span><br><span class="line">在这个例子中，1234567890123456789ll是一个长长整数常量，通过0ll后缀告诉编译器将其解释为长长整数类型。然后将其赋值给变量x，x将会存储这个超出普通整数范围的整数。</span><br><span class="line"></span><br><span class="line">需要注意的是，不同编程语言中表示长长整数类型的方式可能不同。在C++中，通常使用ll后缀表示长长整数类型，而在其他语言中可能有其他的表示方式。因此，要根据具体的编程语言和语法规则来确定长长整数类型的表示方法。</span><br></pre></td></tr></table></figure><p>1LL的含义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 是 int 类型。1L 是 long int 类型。1LL 是 long long int 类型（一种在 C 标准中于 1999 年引入，在 C++ 标准中于 2011 年引入，但在此之前通常作为扩展提供的类型）。这些类型的大小因编译器而异，但是long long至少需要64位（尽管我见过一个不符合规范的C编译器有32位的long long类型）。由于移位操作在无符号类型上可能更好，因此我可能使用了1ULL而不是1LL。 - Keith Thompson</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> C </tag>
            
            <tag> Base64 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
