<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python逆向</title>
      <link href="/2025/02/06/python%E9%80%86%E5%90%91/"/>
      <url>/2025/02/06/python%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p>[Litctf 2024] ezPython!!!</p><p>今天见到一道python打包成exe文件的逆向题，虽然很简单，但是安装工具遇到了一些麻烦</p><h2 id="将-exe文件反编译为pyc文件"><a href="#将-exe文件反编译为pyc文件" class="headerlink" title="将.exe文件反编译为pyc文件"></a>将.exe文件反编译为pyc文件</h2><p>.pyinstxtractor.py工具安装地址：<a href="https://sourceforge.net/projects/pyinstallerextractor/">https://sourceforge.net/projects/pyinstallerextractor/</a>  </p><p>先将<code>pyinstxtractor.py</code>工具与我们要反编译的<code>.exe</code>文件放入同一个工作目录下,在终端输入python pyinstxtractor.py 文件名.py</p><p>😕因为python版本问题，imp模块无法安装，需要替换为importlibc,(pip install importlib)但是又提示importlibc没有get_magic方法，需要替换为importlib.util.MAGIC_NUMBER，又又提示module ‘importlib’ has no attribute ‘util’，于是写上from importlib.util import find_spec 成功</p><p>发现工作目录下多了一个名为<code>文件名.exe_extracted</code>的文件夹，进入该文件夹，里面有许许多多后缀为<code>.dll</code>和<code>.pyd</code>的文件，还有一个名为<code>PYZ-00.pyz_extracted</code>的文件夹，这个文件夹里放的是程序引入的<strong>依赖库</strong></p><p>找到与exe文件同名的文件和struct文件，手动添加.pyc,用010editor打开，文件是没有Magic Number的，需要手动添加</p><p><img src="/2025/02/06/python%E9%80%86%E5%90%91/1.png" alt="结果"></p><p>根据上面可以看出程序的py版本，根据版本填充magic number</p><p>Python3.3 以下版本： 只有Magic Number和四位时间戳<br>Python3.3(包含) - Python3.7(不包含)版本： 4个字节的magic num + 8个字节的时间戳，这个时间戳可以全是0。<br>Python3.7(包含)版本： 4个字节的magic num + 4个字节的空白数据 + 4个字节的时间戳 + 4个字节的文件长度，除了magic num，其它数据可以全是0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">enum PycMagic &#123;</span><br><span class="line">    <span class="comment"># 小端序，要倒过来写</span></span><br><span class="line">    MAGIC_1_0 = <span class="number">0x00999902</span>,</span><br><span class="line">    MAGIC_1_1 = <span class="number">0x00999903</span>, /* Also covers <span class="number">1.2</span> */</span><br><span class="line">    MAGIC_1_3 = <span class="number">0x0A0D2E89</span>,</span><br><span class="line">    MAGIC_1_4 = <span class="number">0x0A0D1704</span>,</span><br><span class="line">    MAGIC_1_5 = <span class="number">0x0A0D4E99</span>,</span><br><span class="line">    MAGIC_1_6 = <span class="number">0x0A0DC4FC</span>,</span><br><span class="line"> </span><br><span class="line">    MAGIC_2_0 = <span class="number">0x0A0DC687</span>,</span><br><span class="line">    MAGIC_2_1 = <span class="number">0x0A0DEB2A</span>,</span><br><span class="line">    MAGIC_2_2 = <span class="number">0x0A0DED2D</span>,</span><br><span class="line">    MAGIC_2_3 = <span class="number">0x0A0DF23B</span>,</span><br><span class="line">    MAGIC_2_4 = <span class="number">0x0A0DF26D</span>,</span><br><span class="line">    MAGIC_2_5 = <span class="number">0x0A0DF2B3</span>,</span><br><span class="line">    MAGIC_2_6 = <span class="number">0x0A0DF2D1</span>,</span><br><span class="line">    MAGIC_2_7 = <span class="number">0x0A0DF303</span>,</span><br><span class="line"> </span><br><span class="line">    MAGIC_3_0 = <span class="number">0x0A0D0C3A</span>,</span><br><span class="line">    MAGIC_3_1 = <span class="number">0x0A0D0C4E</span>,</span><br><span class="line">    MAGIC_3_2 = <span class="number">0x0A0D0C6C</span>,</span><br><span class="line">    MAGIC_3_3 = <span class="number">0x0A0D0C9E</span>,</span><br><span class="line">    MAGIC_3_4 = <span class="number">0x0A0D0CEE</span>,</span><br><span class="line">    MAGIC_3_5 = <span class="number">0x0A0D0D16</span>,</span><br><span class="line">    MAGIC_3_5_3 = <span class="number">0x0A0D0D17</span>,</span><br><span class="line">    MAGIC_3_6 = <span class="number">0x0A0D0D33</span>,</span><br><span class="line">    MAGIC_3_7 = <span class="number">0x0A0D0D42</span>,</span><br><span class="line">    MAGIC_3_8 = <span class="number">0x0A0D0D55</span>,</span><br><span class="line">    MAGIC_3_9 = <span class="number">0x0A0D0D61</span>,</span><br><span class="line">    MAGIC_3_10 = <span class="number">0x0A0D0D6F</span>,</span><br><span class="line">    MAGIC_3_11 = <span class="number">0x0A0D0DA7</span>,</span><br><span class="line">    MAGIC_3_12 = <span class="number">0x0A0D0DCB</span>,</span><br><span class="line"> </span><br><span class="line">    INVALID = <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="pyc文件转py源码"><a href="#pyc文件转py源码" class="headerlink" title="pyc文件转py源码"></a>pyc文件转py源码</h2><p>uncompyle6 现仅适用于 Python 2.4 到 3.8 版本</p><p>安装：pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> uncompyle6&#x3D;&#x3D;3.9.0</p><p>uncompyle6 -o 文件名.py 文件名.pyc</p><p>😕但是这道题要用到的是pycdc,安装包：git clone <a href="https://github.com/zrax/pycdc.git">https://github.com/zrax/pycdc.git</a> ，不过下载的是源码，需要用cmake编译，在生成的build文件夹中找到pycdc.exe</p><p>将pyc文件与pacdc.exe放在同一目录，终端.\pycdc.exe 文件名.pyc</p><p>得到源码：</p><p><img src="/2025/02/06/python%E9%80%86%E5%90%91/2.png" alt="jieguo"></p><p>好像是base64编码,但是引用的是自己编写的模块，应该是换表了</p><p>🤔上面我们说<code>PYZ-00.pyz_extracted</code>的文件夹里放的是程序引入的<strong>依赖库</strong>，果然找到了Litctfbase64.pyc,尝试用pycdc还原，但是提示CreateObject: Got unsupported type 0x0<br>Error loading file Litctfbase64.pyc: bad cast</p><p>😖没找到解决办法</p><p>用010editor查看16进制：</p><p><img src="/2025/02/06/python%E9%80%86%E5%90%91/3.png" alt="jieguo"></p><p>😮突然发现这个文件是带magic number的，直接复制就行了</p><p>有一串可疑的字符串，可能是映射表，不过不知道从哪里开始</p><p>然后打开一个pyc在线反编译的网站，得到了字符串：</p><p><img src="/2025/02/06/python%E9%80%86%E5%90%91/4.png" alt="jieguo"></p><p>直接base64解码就好了</p><h2 id="py是如何转换成exe的呢"><a href="#py是如何转换成exe的呢" class="headerlink" title="py是如何转换成exe的呢"></a>py是如何转换成exe的呢</h2><p>pyinstaller打包</p><p>首先安装加密打包程序所使用的库<code>tinyaes</code>，这里用了<code>清华源</code>并且指定使用了<code>1.0.3</code>版本库</p><p>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> tinyaes&#x3D;&#x3D;1.0.3</p><p>移动到脚本文件夹下：pyinstaller -F 测试脚本.py –key 123456</p><p>加密后结果只有入口脚本反编译成功，被依赖的脚本均被加密，无法直接被反编译</p>]]></content>
      
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reverse刷题笔记</title>
      <link href="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="HUBUCTF-2022-新生赛-simple-RE"><a href="#HUBUCTF-2022-新生赛-simple-RE" class="headerlink" title="[HUBUCTF 2022 新生赛]simple_RE"></a>[HUBUCTF 2022 新生赛]simple_RE</h2><p>附件是.exe文件</p><p>用ida打开F5反汇编得到：</p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/1.png" alt="反汇编C代码"></p><p>sub_401570函数对输入的flag进行变换，memcmp函数用于判断两个字符串的前n个字符是否相等</p><p>进入sub_401570：</p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/2.png" alt="函数代码"></p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/3.png" alt="函数代码"></p><p>(经过chatgpt分析) 分析出这个函数的功能：</p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/4.png" alt="函数功能"></p><p>到这里我认为只要把已知字符串进行base64解码就行，发现是乱码</p><p>经过wp提示，原来是base64换表</p><p>aQvejafhmuyjbac&#x3D;”qvEJAfHmUYjBac+u8Ph5n9Od17FrICL&#x2F;X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD”是映射表</p><p>写脚本复原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;qvEJAfHmUYjBac+u8Ph5n9Od17FrICL/X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD+/&quot;</span></span><br><span class="line">table2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        <span class="keyword">if</span> i == table[j]:</span><br><span class="line">            flag += table2[j]</span><br><span class="line"></span><br><span class="line">flag = base64.b64decode(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到flag啦</p><p>base64原理：<a href="https://www.cnblogs.com/xiaxveliang/p/15097947.html">https://www.cnblogs.com/xiaxveliang/p/15097947.html</a></p><p>反汇编代码中0LL的含义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在编程中，0ll表示一个整数常量，通常用来表示十进制的长长整数（long long int）。其中0表示数字零，ll表示long long int类型的后缀，用于确保整数常量被解释为长长整数类型。</span><br><span class="line"></span><br><span class="line">长长整数类型是一种可以存储更大范围整数的数据类型。通常情况下，整数类型的范围是有限的，例如int类型的范围是-2147483648到2147483647。当需要处理超出这个范围的整数时，就可以使用长长整数类型来表示。</span><br><span class="line"></span><br><span class="line">使用0ll作为整数常量的后缀，可以明确告诉编译器将其解释为长长整数类型。例如，下面的代码将一个长长整数常量赋值给变量x：</span><br><span class="line"></span><br><span class="line">long long int x = 1234567890123456789ll;</span><br><span class="line"></span><br><span class="line">在这个例子中，1234567890123456789ll是一个长长整数常量，通过0ll后缀告诉编译器将其解释为长长整数类型。然后将其赋值给变量x，x将会存储这个超出普通整数范围的整数。</span><br><span class="line"></span><br><span class="line">需要注意的是，不同编程语言中表示长长整数类型的方式可能不同。在C++中，通常使用ll后缀表示长长整数类型，而在其他语言中可能有其他的表示方式。因此，要根据具体的编程语言和语法规则来确定长长整数类型的表示方法。</span><br></pre></td></tr></table></figure><p>1LL的含义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 是 int 类型。1L 是 long int 类型。1LL 是 long long int 类型（一种在 C 标准中于 1999 年引入，在 C++ 标准中于 2011 年引入，但在此之前通常作为扩展提供的类型）。这些类型的大小因编译器而异，但是long long至少需要64位（尽管我见过一个不符合规范的C编译器有32位的long long类型）。由于移位操作在无符号类型上可能更好，因此我可能使用了1ULL而不是1LL。 - Keith Thompson</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> C </tag>
            
            <tag> Base64 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
