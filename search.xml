<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>强壮逆向人!</title>
      <link href="/2025/05/09/%E5%BC%BA%E5%A3%AE%E9%80%86%E5%90%91%E4%BA%BA/"/>
      <url>/2025/05/09/%E5%BC%BA%E5%A3%AE%E9%80%86%E5%90%91%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cf987a6ddbe61002275f74934400a3530ff90c53260bd9d570c239bf4d5b4a7f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web签个到</title>
      <link href="/2025/03/27/web%E7%AD%BE%E4%B8%AA%E5%88%B0/"/>
      <url>/2025/03/27/web%E7%AD%BE%E4%B8%AA%E5%88%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="buuctf-ACTF2020-新生赛-Include"><a href="#buuctf-ACTF2020-新生赛-Include" class="headerlink" title="buuctf[ACTF2020 新生赛]Include"></a>buuctf[ACTF2020 新生赛]Include</h2><p>打开靶机看到页面只有一个tips</p><p><img src="/2025/03/27/web%E7%AD%BE%E4%B8%AA%E5%88%B0/1.png" alt="1"></p><p>点击一下</p><p><img src="/2025/03/27/web%E7%AD%BE%E4%B8%AA%E5%88%B0/2.png" alt="2"></p><p>看源码什么也没有，结合题目include猜测是文件包含</p><p>来个链接学一下 <a href="https://blog.csdn.net/m0_46467017/article/details/126380415">https://blog.csdn.net/m0_46467017/article/details/126380415</a></p><p>我们可以用php伪协议，再来个链接 <a href="https://blog.csdn.net/cosmoslin/article/details/120695429">https://blog.csdn.net/cosmoslin/article/details/120695429</a></p><p>我们可以用php:&#x2F;&#x2F;filiter读取源码</p><p>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p><img src="/2025/03/27/web%E7%AD%BE%E4%B8%AA%E5%88%B0/3.png" alt="3"></p><p>base64解密以下得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">好久没学新东西了，突然发现web的入门题还是很好玩的。脑子有点混乱了，还有很多东西要学啊，没关系，</span><br><span class="line">今天又进步了一点😊</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hgame2025</title>
      <link href="/2025/02/19/hgame2025/"/>
      <url>/2025/02/19/hgame2025/</url>
      
        <content type="html"><![CDATA[<p>hgame比赛有两周，可惜到最后没坚持下来☹️，能够自己解出来很简单的题，也是小小的收获</p><h3 id="Hakuya-Want-A-Girl-Friend"><a href="#Hakuya-Want-A-Girl-Friend" class="headerlink" title="Hakuya Want A Girl Friend"></a>Hakuya Want A Girl Friend</h3><p>16进制文件正序是zip,倒序是png，png宽高爆破后得到zip的密码，解压得到flag</p><h3 id="Computer-Cleaner"><a href="#Computer-Cleaner" class="headerlink" title="Computer Cleaner"></a>Computer Cleaner</h3><p>找到一句话木马文件，得到第一部分flag,查看日志，攻击者试图读flag3文件，找到flag3,访问日志中的攻击者ip得到flag2</p><h3 id="Compress-dot-new"><a href="#Compress-dot-new" class="headerlink" title="Compress dot new"></a>Compress dot new</h3><p>当时直接用AI生成脚本😣，现在没看懂，以后再学吧</p><h3 id="Turtle"><a href="#Turtle" class="headerlink" title="Turtle"></a>Turtle</h3><p>upx壳，用工具脱不下来，于是用x64dbg手脱。打开ida理清逻辑，key用RC4加密，密文是用魔改RC4加密，用脚本解密成功</p><p>😔虽然很简单的过程，这道题做了好久，还需要学好多</p><p>剩下的题还没有学会啊</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VNCTF-re</title>
      <link href="/2025/02/16/VNCTF-re/"/>
      <url>/2025/02/16/VNCTF-re/</url>
      
        <content type="html"><![CDATA[<p>😫今天终于想起来复现了，这次比赛没做出来一道题，好惨</p><h2 id="hook-fish"><a href="#hook-fish" class="headerlink" title="hook_fish"></a>hook_fish</h2><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><p><img src="/2025/02/16/VNCTF-re/1.png" alt="timu"></p><p>总之就是输入flag验证是否正确</p><p>先找到主函数</p><p><img src="/2025/02/16/VNCTF-re/2.png" alt="main"></p><p>check验证函数应该在hook_fish.dex中，根据fish函数的参数hookfish找到下载链接</p><p><img src="/2025/02/16/VNCTF-re/3.png" alt="down"></p><p>输入的flag先经过本地encrypt函数加密，再经过hook_fish.dex中的check方法进行混淆</p><h3 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h3><p><img src="/2025/02/16/VNCTF-re/4.png" alt="jiemi"></p><p>check方法用哈希映射加密，在mainactivity中保留了decode方法，可以用hook方法解密</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">MainActivity</span> = </span><br><span class="line">   <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.hihitt.MainActivity&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;找到类: com.example.hihitt.MainActivity&quot;</span>);</span><br><span class="line">    <span class="comment">//hook 掉删除的方法，并直接在此方法中进行解密</span></span><br><span class="line">    <span class="title class_">MainActivity</span>.<span class="property">fish_fade</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;阻止删除了文件&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> result = </span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">decode</span>(<span class="string">&quot;jjjliijijjjjjijiiiiijijiijjiijijjjiiiiijjjjliiijijjjjljjiilijijiiiiiljiijjiiliiiiiiiiiiiljiijijiliiiijjijijjijijijijiilijiijiiiiiijiljijiilijijiiiijjljjjljiliiijjjijiiiljijjijiiiiiiijjliiiljjijiiiliiiiiiljjiijiijiijijijjiijjiijjjijjjljiliiijijiiiijjliijiijiiliiliiiiiiljiijjiiliiijjjliiijjljjiijiiiijiijjiijijjjiiliiliiijiijijijiijijiiijjjiijjijiiiljiijiijilji&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;解密结果: &quot;</span> + result);</span><br><span class="line">    &#125;;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>得到解密结果: 0qksrtuw0x74r2n3s2x3ooi4ps54r173k2os12r32pmqnu73r1h432n301twnq43prruo2h5</p><p>然后逆向解密</p><p><img src="/2025/02/16/VNCTF-re/5.png" alt="jiemi"></p><p>code函数的作用就是每两个字节之间交换顺序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> encode[<span class="number">73</span>] = </span><br><span class="line"><span class="string">&quot;0qksrtuw0x74r2n3s2x3ooi4ps54r173k2os12r32pmqnu73r1h432n301twnq43prruo2h5&quot;</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;<span class="number">72</span>;i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(encode[i] &gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; encode[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"> encode[i]= (encode[i]-(i%<span class="number">4</span>))+<span class="number">49</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> encode[i]= (encode[i]-(i%<span class="number">10</span>))- <span class="number">55</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">72</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line"> <span class="type">char</span> tmp = encode[i];</span><br><span class="line"> encode[i]=encode[i+<span class="number">1</span>];</span><br><span class="line"> encode[i+<span class="number">1</span>]=tmp;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">72</span>;i++)&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,encode[i]);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//结果为9a9287988abfb9a3b6a978b075bda3afb274bba38c7493afa3b1bda3aa7597ac6575b0c1</span></span><br></pre></td></tr></table></figure><p><img src="/2025/02/16/VNCTF-re/6.png" alt="flag"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TEA</title>
      <link href="/2025/02/10/TEA/"/>
      <url>/2025/02/10/TEA/</url>
      
        <content type="html"><![CDATA[<h2 id="TEA原理"><a href="#TEA原理" class="headerlink" title="TEA原理"></a>TEA原理</h2><p>TEA是一种分组加密算法，使用64位的密文分组和128位的密钥，它使用Feistel分组加密框架，需要进行 <strong>64</strong> 轮迭代，尽管作者认为 <strong>32</strong> 轮已经足够了。该算法使用delta作为倍数，以保证每一轮加密都不相同，TEA中定义为0x9e3779b9</p><p><img src="/2025/02/10/TEA/1.png" alt="tea"></p><p>加密函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Encrypt</span><span class="params">(<span class="type">long</span>* EntryData, <span class="type">long</span>* Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> x = EntryData[<span class="number">0</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> y = EntryData[<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="comment">//总共加密32轮</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        x += ((y &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (y + sum) ^ ((y &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>]);</span><br><span class="line">        y += ((x &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (x + sum) ^ ((x &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后加密的结果重新写入到数组中</span></span><br><span class="line">    EntryData[<span class="number">0</span>] = x;</span><br><span class="line">    EntryData[<span class="number">1</span>] = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Decrypt</span><span class="params">(<span class="type">long</span>* EntryData, <span class="type">long</span>* Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> x = EntryData[<span class="number">0</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> y = EntryData[<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    sum = delta &lt;&lt; <span class="number">5</span>;   <span class="comment">//注意这里,sum = 32轮之后的黄金分割值. 因为我们要反序解密.</span></span><br><span class="line">    <span class="comment">//总共加密32轮 那么反序也解密32轮</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 先将y解开 然后参与运算在解x</span></span><br><span class="line">        y -= ((x &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (x + sum) ^ ((x &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>]);</span><br><span class="line">        x -= ((y &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (y + sum) ^ ((y &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后加密的结果重新写入到数组中</span></span><br><span class="line">    EntryData[<span class="number">0</span>] = x;</span><br><span class="line">    EntryData[<span class="number">1</span>] = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TEA逆向"><a href="#TEA逆向" class="headerlink" title="TEA逆向"></a>TEA逆向</h2><p>tea的特征为delta和16字节的密钥，有些魔改的tea会改变delta的值</p><h2 id="XTEA原理"><a href="#XTEA原理" class="headerlink" title="XTEA原理"></a>XTEA原理</h2><p>TEA 算法被发现存在缺陷，作为回应，设计者提出了一个 TEA 的升级版本——XTEA（有时也被称为”tean”）。XTEA 跟 TEA 使用了相同的简单运算，但它采用了截然不同的顺序，为了阻止密钥表攻击，四个子密钥（在加密过程中，原 128 位的密钥被拆分为 4 个 32 位的子密钥）采用了一种不太正规的方式进行混合，但速度更慢了。</p><h2 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h2><p>XXTEA是一个非平衡Feistel网络分组密码，在可变长度块上运行，这些块是32位大小的任意倍数（最小64位），使用128位密钥, 是目前TEA系列中最安全的算法，但性能较上两种有所降低。</p>]]></content>
      
      
      
        <tags>
            
            <tag> TEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的z3</title>
      <link href="/2025/02/10/%E7%AE%80%E5%8D%95%E7%9A%84z3/"/>
      <url>/2025/02/10/%E7%AE%80%E5%8D%95%E7%9A%84z3/</url>
      
        <content type="html"><![CDATA[<h2 id="z3-solver求解器"><a href="#z3-solver求解器" class="headerlink" title="z3-solver求解器"></a>z3-solver求解器</h2><p>z3-solver是由Microsoft Research(微软)开发的SMT求解器，它用于检查逻辑表达式的可满足性，可以找到一组约束中的其中一个可行解，缺点是无法找出所有的可行解</p><p>pip安装：<code>pip install z3-solver</code></p><p>基本用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> z3</span><br><span class="line">x.Int(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">y.Int(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">s=z3.Solver()</span><br><span class="line">s.add(x+y=<span class="number">4</span>)</span><br><span class="line"><span class="keyword">if</span> s.check() == z3.sat:</span><br><span class="line">    <span class="built_in">print</span>(s.model())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;NO SOLUTION!&quot;</span>)</span><br></pre></td></tr></table></figure><p>实数：<code>y = z3.Real(name = &#39;y&#39;)</code></p><p>位向量：<code>z = z3.BitVec(name = &#39;z&#39;, bv = 32)</code></p><p>布尔：<code>p = z3.Bool(name = &#39;p&#39;)</code></p><p>对于布尔类型的式子而言，我们可以使用 <code>z3</code> 内置的 <code>And()</code>、<code>Or()</code>、<code>Not()</code>、<code>Implies()</code> 等方法进行布尔逻辑运算</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>[NSSRound#X Basic]ez_z3</p><p>第一步查壳，是64位，UPX的魔改壳，把XYU改成UPX后直接脱壳</p><p>第二步放入ida找到关键代码</p><p><img src="/2025/02/10/%E7%AE%80%E5%8D%95%E7%9A%84z3/1.png" alt="daima"></p><p>sub_14001124E函数是快速幂的变体，</p><p>sub_14001103C里面一堆方程，用z3求解，但是ida代码中方程直接的逻辑关系是||，但是只有全部满足才能做出来，有点奇怪</p><p>sub_1400112F8是异或，最后判断是否相等</p><p>exp:</p><p>求z3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">s=Solver()</span><br><span class="line">a0,a1,a2,a3,a4,a5,a6,a7,a8,a9 = BitVecs(<span class="string">&quot;a0 a1 a2 a3 a4 a5 a6 a7 a8 a9&quot;</span>,<span class="number">12</span>)</span><br><span class="line">a10,a11,a12,a13,a14,a15,a16,a17,a18,a19 = BitVecs(<span class="string">&quot;a10 a11 a12 a13 a14 a15 a16 a17 a18 a19&quot;</span>,<span class="number">12</span>)</span><br><span class="line">s.add(<span class="number">2582239</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> - a2*<span class="number">3</span> - a3*<span class="number">4</span> + a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> + a9*<span class="number">10</span></span><br><span class="line">* a10*<span class="number">11</span> - a11*<span class="number">12</span> + a12*<span class="number">13</span> + a13*<span class="number">14</span> - a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span> * a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">2602741</span> == a0*<span class="number">1</span> * a1*<span class="number">2</span> + a2*<span class="number">3</span> - a3*<span class="number">4</span> + a4*<span class="number">5</span> + (a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span>) + a9*<span class="number">10</span></span><br><span class="line">* a10*<span class="number">11</span> - a11*<span class="number">12</span> + a12*<span class="number">13</span> + a13*<span class="number">14</span> - a14*<span class="number">15</span> * a15*<span class="number">16</span> - (a16*<span class="number">17</span> + a17*<span class="number">18</span>) + a18*<span class="number">19</span> *</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">2668123</span> == a0*<span class="number">1</span> - a1*<span class="number">2</span> - a2*<span class="number">3</span> * a3*<span class="number">4</span> - a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> * a6*<span class="number">7</span> + a7*<span class="number">8</span> + a8*<span class="number">9</span> - a9*<span class="number">10</span></span><br><span class="line">+ a10*<span class="number">11</span> * a11*<span class="number">12</span> + a12*<span class="number">13</span> * a13*<span class="number">14</span> - a14*<span class="number">15</span> - a15*<span class="number">16</span> * a16*<span class="number">17</span> + a17*<span class="number">18</span> + a18*<span class="number">19</span> -</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">2520193</span> == (a0*<span class="number">1</span> + a1*<span class="number">2</span> - a2*<span class="number">3</span> - a3*<span class="number">4</span> + a4*<span class="number">5</span>) + a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> + a9*<span class="number">10</span></span><br><span class="line">* (a10*<span class="number">11</span> - a11*<span class="number">12</span> + a12*<span class="number">13</span>) + a13*<span class="number">14</span> - a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span> *</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">8904587</span> == a0*<span class="number">1</span> * a1*<span class="number">2</span> * a2*<span class="number">3</span> - a3*<span class="number">4</span> - a4*<span class="number">5</span> - a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> * a8*<span class="number">9</span> + a9*<span class="number">10</span> -</span><br><span class="line">a10*<span class="number">11</span> + a11*<span class="number">12</span> * a12*<span class="number">13</span> - a13*<span class="number">14</span> + a14*<span class="number">15</span> - a15*<span class="number">16</span> + a16*<span class="number">17</span> + a17*<span class="number">18</span> - a18*<span class="number">19</span> - a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">1227620874</span> == a0*<span class="number">1</span> - a1*<span class="number">2</span> - a2*<span class="number">3</span> + (a3*<span class="number">4</span> + a4*<span class="number">5</span> * a5*<span class="number">6</span>*<span class="number">5</span> * a6*<span class="number">7</span> + a7*<span class="number">8</span>) - a8*<span class="number">9</span> -</span><br><span class="line">a9*<span class="number">10</span> * a10*<span class="number">11</span> - (a11*<span class="number">12</span> + a12*<span class="number">13</span> - a13*<span class="number">14</span> - a14*<span class="number">15</span>) * a15*<span class="number">16</span> - a16*<span class="number">17</span> + a17*<span class="number">18</span> - a18*<span class="number">19</span></span><br><span class="line">- a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">1836606059</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> + a2*<span class="number">3</span> + a3*<span class="number">4</span> + a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> * a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> +</span><br><span class="line">a9*<span class="number">10</span> * a10*<span class="number">11</span> * a11*<span class="number">12</span> + a12*<span class="number">13</span> + a13*<span class="number">14</span> - a14*<span class="number">15</span> * a15*<span class="number">16</span> + a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span></span><br><span class="line">* a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">8720560</span> == a0*<span class="number">1</span> * a1*<span class="number">2</span> - a2*<span class="number">3</span> + a3*<span class="number">4</span> + a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> * a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> - a9*<span class="number">10</span></span><br><span class="line">- a10*<span class="number">11</span> + a11*<span class="number">12</span> + a12*<span class="number">13</span> + a13*<span class="number">14</span> + a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span> *</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">11387045</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> - a2*<span class="number">3</span> + (a3*<span class="number">4</span> + a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> +</span><br><span class="line">a9*<span class="number">10</span>) * a10*<span class="number">11</span> - a11*<span class="number">12</span> + a12*<span class="number">13</span> + a13*<span class="number">14</span> - a14*<span class="number">15</span> * (a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span>) + a18*<span class="number">19</span></span><br><span class="line">* a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">7660269</span> == a0*<span class="number">1</span> - a1*<span class="number">2</span> + a2*<span class="number">3</span> + a3*<span class="number">4</span> - a4*<span class="number">5</span> - a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> + a8*<span class="number">9</span> + a9*<span class="number">10</span></span><br><span class="line">* a10*<span class="number">11</span> - a11*<span class="number">12</span> - a12*<span class="number">13</span> + a13*<span class="number">14</span> + a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span> * a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">2461883</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> - (a2*<span class="number">3</span> * a3*<span class="number">4</span> - a4*<span class="number">5</span> - a5*<span class="number">6</span>*<span class="number">5</span>) - a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> + (a9*<span class="number">10</span></span><br><span class="line">* a10*<span class="number">11</span> - a11*<span class="number">12</span>) + a12*<span class="number">13</span> + a13*<span class="number">14</span> - a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span> *</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line">s.add(-<span class="number">966296</span> == a0 * <span class="number">1</span> * a1 * <span class="number">2</span> - a2 * <span class="number">3</span> * a3 * <span class="number">4</span> - a4 * <span class="number">5</span> - a5 * <span class="number">6</span> * <span class="number">5</span> + a6 * <span class="number">7</span> + a7 * <span class="number">8</span> * a8</span><br><span class="line">* <span class="number">9</span> + a9 * <span class="number">10</span> * a10 * <span class="number">11</span> - a11 * <span class="number">12</span> - a12 * <span class="number">13</span> + a13 * <span class="number">14</span> - a14 * <span class="number">15</span> - a15 * <span class="number">16</span> * a16 * <span class="number">17</span> -</span><br><span class="line">a17 * <span class="number">18</span> - a18 * <span class="number">19</span> - a19 * <span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">254500223</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> * (a2*<span class="number">3</span> + a3*<span class="number">4</span> + a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> +</span><br><span class="line">a9*<span class="number">10</span> * a10*<span class="number">11</span>) - a11*<span class="number">12</span> + a12*<span class="number">13</span> + a13*<span class="number">14</span> - a14*<span class="number">15</span> - a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> - a18*<span class="number">19</span></span><br><span class="line">* a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">6022286</span> == a0*<span class="number">1</span> - a1*<span class="number">2</span> - a2*<span class="number">3</span> - a3*<span class="number">4</span> * a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> * a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> + a9*<span class="number">10</span> *</span><br><span class="line">a10*<span class="number">11</span> - a11*<span class="number">12</span> - a12*<span class="number">13</span> + a13*<span class="number">14</span> + a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> - a18*<span class="number">19</span> - a19*<span class="number">20</span>)</span><br><span class="line">s.add(-<span class="number">636956022</span> == a0 * <span class="number">1</span> * a1 * <span class="number">2</span> + (a2 * <span class="number">3</span> * a3 * <span class="number">4</span> + a4 * <span class="number">5</span> + a5 * <span class="number">6</span> * <span class="number">5</span>) - a6 * <span class="number">7</span> * a7 * <span class="number">8</span></span><br><span class="line">* a8 * <span class="number">9</span> + a9 * <span class="number">10</span> * a10 * <span class="number">11</span> + a11 * <span class="number">12</span> - a12 * <span class="number">13</span> + a13 * <span class="number">14</span> - a14 * <span class="number">15</span> + (a15 * <span class="number">16</span> - a16 *</span><br><span class="line"><span class="number">17</span> + a17 * <span class="number">18</span>) - a18 * <span class="number">19</span> - a19 * <span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">10631829</span> == a0*<span class="number">1</span> * a1*<span class="number">2</span> * a2*<span class="number">3</span> - a3*<span class="number">4</span> + a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> + a6*<span class="number">7</span> - a7*<span class="number">8</span> * a8*<span class="number">9</span> + a9*<span class="number">10</span></span><br><span class="line">* a10*<span class="number">11</span> + a11*<span class="number">12</span> + a12*<span class="number">13</span> - a13*<span class="number">14</span> - a14*<span class="number">15</span> - a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span> *</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">6191333</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> + a2*<span class="number">3</span> * (a3*<span class="number">4</span> - a4*<span class="number">5</span> - a5*<span class="number">6</span>*<span class="number">5</span>) + a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> + (a9*<span class="number">10</span></span><br><span class="line">* a10*<span class="number">11</span> - a11*<span class="number">12</span> + a12*<span class="number">13</span>) + a13*<span class="number">14</span> * a14*<span class="number">15</span> + (a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span>) + a18*<span class="number">19</span> *</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">890415359</span> == a0*<span class="number">1</span> * a1*<span class="number">2</span> + a2*<span class="number">3</span> * a3*<span class="number">4</span> + a4*<span class="number">5</span> - a5*<span class="number">6</span>*<span class="number">5</span> * a6*<span class="number">7</span> + a7*<span class="number">8</span> * a8*<span class="number">9</span> * a9*<span class="number">10</span></span><br><span class="line">- a10*<span class="number">11</span> - a11*<span class="number">12</span> * a12*<span class="number">13</span> + a13*<span class="number">14</span> - a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> * a17*<span class="number">18</span> - a18*<span class="number">19</span> * a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">23493664</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> * a2*<span class="number">3</span> * a3*<span class="number">4</span> - a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> + (a8*<span class="number">9</span> + a9*<span class="number">10</span></span><br><span class="line">+ a10*<span class="number">11</span>) + a11*<span class="number">12</span> - a12*<span class="number">13</span> - a13*<span class="number">14</span> - a14*<span class="number">15</span> + (a15*<span class="number">16</span> - a16*<span class="number">17</span> + a17*<span class="number">18</span> + a18*<span class="number">19</span> +</span><br><span class="line">a19*<span class="number">20</span>))</span><br><span class="line">s.add(<span class="number">1967260144</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> * a2*<span class="number">3</span> - a3*<span class="number">4</span> - a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> * a6*<span class="number">7</span> * a7*<span class="number">8</span> - a8*<span class="number">9</span> + a9*<span class="number">10</span></span><br><span class="line">- a10*<span class="number">11</span> + a11*<span class="number">12</span> + a12*<span class="number">13</span> - a13*<span class="number">14</span> - a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span> *</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    ans = s.model()</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><p>爆破flag:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">a1 = [<span class="number">104</span>, <span class="number">97</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">116</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">102</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">107</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>]</span><br><span class="line">key = [<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">7</span>]</span><br><span class="line">ans = [<span class="number">4615</span>, <span class="number">19616</span>, <span class="number">20257</span>, <span class="number">57</span>, <span class="number">107811</span>, <span class="number">570</span>, <span class="number">2342</span>, <span class="number">19623</span>, <span class="number">25952</span>, <span class="number">54</span>, <span class="number">108955</span>, <span class="number">19624</span>, <span class="number">113632</span>, <span class="number">14085</span>, <span class="number">2342</span>, <span class="number">30675</span>, <span class="number">39576</span>,<span class="number">25979</span>, <span class="number">24</span>, <span class="number">2833</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = [<span class="number">0</span>] * <span class="number">20</span></span><br><span class="line">d = [<span class="number">0</span>] * <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">x, y</span>):</span><br><span class="line">    v4 = <span class="number">1</span></span><br><span class="line">    v6 = y</span><br><span class="line">    <span class="keyword">while</span> v6:</span><br><span class="line">        <span class="keyword">if</span> (v6 &amp; <span class="number">1</span>) != <span class="number">0</span>:</span><br><span class="line">            v4 *= x</span><br><span class="line">        x = x * x % <span class="number">1000</span></span><br><span class="line">        v6 &gt;&gt;= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> v4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_power</span>(<span class="params">v4, y</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):  <span class="comment"># 枚举可能的 x</span></span><br><span class="line">        <span class="keyword">if</span> power(x, y) == v4:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    d[i] = a1[<span class="number">20</span> - i - <span class="number">1</span>] ^ ans[i]</span><br><span class="line">    <span class="built_in">str</span>[i] = inverse_power(d[i], key[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">str</span>[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> z3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RC4</title>
      <link href="/2025/02/07/RC4/"/>
      <url>/2025/02/07/RC4/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>RC4是一种流加密算法，密钥长度可变，可变范围是1-256字节，属于对称加密算法</p><p><img src="/2025/02/07/RC4/1.png" alt="yuanli"></p><h3 id="生成S-box"><a href="#生成S-box" class="headerlink" title="生成S-box"></a>生成S-box</h3><p>KSA算法初始化长度为256的S盒，用种子密钥(就是我们的秘钥)循环填充另一个256字节的K表，用K表对S表进行初始置换</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">KSA</span>(<span class="params">key</span>):</span><br><span class="line">    key_length = <span class="built_in">len</span>(key)</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % key_length]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]  <span class="comment"># 交换S[i]和S[j]</span></span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="生成密钥流"><a href="#生成密钥流" class="headerlink" title="生成密钥流"></a>生成密钥流</h3><p>PGRA算法根据S盒生成与明文长度相同的密钥流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">PRGA</span>(<span class="params">S</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]  <span class="comment"># 交换S[i]和S[j]</span></span><br><span class="line">        K = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">        <span class="keyword">yield</span> K</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异或加密"><a href="#异或加密" class="headerlink" title="异或加密"></a>异或加密</h3><p>明文字节与密钥流异或</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RC4</span>(<span class="params">key, data</span>):</span><br><span class="line">    S = KSA(key)</span><br><span class="line">    keystream = PRGA(S)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([c ^ <span class="built_in">next</span>(keystream) <span class="keyword">for</span> c <span class="keyword">in</span> data])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>[Litctf 2024]ezrc4</p><p>这道题主要是用TLS回调函数修改了key,导致一直没做出来</p><p>对key按X可以发现它在另一个函数也有调用，进入X_X</p><p><img src="/2025/02/07/RC4/2.png" alt="hanshu"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key=<span class="string">&#x27;fenkey?&#x27;</span></span><br><span class="line">key1=[<span class="number">0xA</span>,<span class="number">0xC</span>,<span class="number">0x1A</span>,<span class="number">0x8</span>,<span class="number">0x11</span>,<span class="number">0x1F</span>,<span class="number">0x1E</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(key[i])^key1[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到真的key</p><p>在写密文的时候要注意大小端序</p><p>还有一些题是RC4的变形</p>]]></content>
      
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> RC4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python逆向</title>
      <link href="/2025/02/06/python%E9%80%86%E5%90%91/"/>
      <url>/2025/02/06/python%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p>[Litctf 2024] ezPython!!!</p><p>今天见到一道python打包成exe文件的逆向题，虽然很简单，但是安装工具遇到了一些麻烦</p><h2 id="将-exe文件反编译为pyc文件"><a href="#将-exe文件反编译为pyc文件" class="headerlink" title="将.exe文件反编译为pyc文件"></a>将.exe文件反编译为pyc文件</h2><p>.pyinstxtractor.py工具安装地址：<a href="https://sourceforge.net/projects/pyinstallerextractor/">https://sourceforge.net/projects/pyinstallerextractor/</a>  </p><p>先将<code>pyinstxtractor.py</code>工具与我们要反编译的<code>.exe</code>文件放入同一个工作目录下,在终端输入python pyinstxtractor.py 文件名.py</p><p>😕因为python版本问题，imp模块无法安装，需要替换为importlibc,(pip install importlib)但是又提示importlibc没有get_magic方法，需要替换为importlib.util.MAGIC_NUMBER，又又提示module ‘importlib’ has no attribute ‘util’，于是写上from importlib.util import find_spec 成功</p><p>发现工作目录下多了一个名为<code>文件名.exe_extracted</code>的文件夹，进入该文件夹，里面有许许多多后缀为<code>.dll</code>和<code>.pyd</code>的文件，还有一个名为<code>PYZ-00.pyz_extracted</code>的文件夹，这个文件夹里放的是程序引入的<strong>依赖库</strong></p><p>找到与exe文件同名的文件和struct文件，手动添加.pyc,用010editor打开，文件是没有Magic Number的，需要手动添加</p><p><img src="/2025/02/06/python%E9%80%86%E5%90%91/1.png" alt="结果"></p><p>根据上面可以看出程序的py版本，根据版本填充magic number</p><p>Python3.3 以下版本： 只有Magic Number和四位时间戳<br>Python3.3(包含) - Python3.7(不包含)版本： 4个字节的magic num + 8个字节的时间戳，这个时间戳可以全是0。<br>Python3.7(包含)版本： 4个字节的magic num + 4个字节的空白数据 + 4个字节的时间戳 + 4个字节的文件长度，除了magic num，其它数据可以全是0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">enum PycMagic &#123;</span><br><span class="line">    <span class="comment"># 小端序，要倒过来写</span></span><br><span class="line">    MAGIC_1_0 = <span class="number">0x00999902</span>,</span><br><span class="line">    MAGIC_1_1 = <span class="number">0x00999903</span>, /* Also covers <span class="number">1.2</span> */</span><br><span class="line">    MAGIC_1_3 = <span class="number">0x0A0D2E89</span>,</span><br><span class="line">    MAGIC_1_4 = <span class="number">0x0A0D1704</span>,</span><br><span class="line">    MAGIC_1_5 = <span class="number">0x0A0D4E99</span>,</span><br><span class="line">    MAGIC_1_6 = <span class="number">0x0A0DC4FC</span>,</span><br><span class="line"> </span><br><span class="line">    MAGIC_2_0 = <span class="number">0x0A0DC687</span>,</span><br><span class="line">    MAGIC_2_1 = <span class="number">0x0A0DEB2A</span>,</span><br><span class="line">    MAGIC_2_2 = <span class="number">0x0A0DED2D</span>,</span><br><span class="line">    MAGIC_2_3 = <span class="number">0x0A0DF23B</span>,</span><br><span class="line">    MAGIC_2_4 = <span class="number">0x0A0DF26D</span>,</span><br><span class="line">    MAGIC_2_5 = <span class="number">0x0A0DF2B3</span>,</span><br><span class="line">    MAGIC_2_6 = <span class="number">0x0A0DF2D1</span>,</span><br><span class="line">    MAGIC_2_7 = <span class="number">0x0A0DF303</span>,</span><br><span class="line"> </span><br><span class="line">    MAGIC_3_0 = <span class="number">0x0A0D0C3A</span>,</span><br><span class="line">    MAGIC_3_1 = <span class="number">0x0A0D0C4E</span>,</span><br><span class="line">    MAGIC_3_2 = <span class="number">0x0A0D0C6C</span>,</span><br><span class="line">    MAGIC_3_3 = <span class="number">0x0A0D0C9E</span>,</span><br><span class="line">    MAGIC_3_4 = <span class="number">0x0A0D0CEE</span>,</span><br><span class="line">    MAGIC_3_5 = <span class="number">0x0A0D0D16</span>,</span><br><span class="line">    MAGIC_3_5_3 = <span class="number">0x0A0D0D17</span>,</span><br><span class="line">    MAGIC_3_6 = <span class="number">0x0A0D0D33</span>,</span><br><span class="line">    MAGIC_3_7 = <span class="number">0x0A0D0D42</span>,</span><br><span class="line">    MAGIC_3_8 = <span class="number">0x0A0D0D55</span>,</span><br><span class="line">    MAGIC_3_9 = <span class="number">0x0A0D0D61</span>,</span><br><span class="line">    MAGIC_3_10 = <span class="number">0x0A0D0D6F</span>,</span><br><span class="line">    MAGIC_3_11 = <span class="number">0x0A0D0DA7</span>,</span><br><span class="line">    MAGIC_3_12 = <span class="number">0x0A0D0DCB</span>,</span><br><span class="line"> </span><br><span class="line">    INVALID = <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="pyc文件转py源码"><a href="#pyc文件转py源码" class="headerlink" title="pyc文件转py源码"></a>pyc文件转py源码</h2><p>uncompyle6 现仅适用于 Python 2.4 到 3.8 版本</p><p>安装：pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> uncompyle6&#x3D;&#x3D;3.9.0</p><p>uncompyle6 -o 文件名.py 文件名.pyc</p><p>😕但是这道题要用到的是pycdc,安装包：git clone <a href="https://github.com/zrax/pycdc.git">https://github.com/zrax/pycdc.git</a> ，不过下载的是源码，需要用cmake编译，在生成的build文件夹中找到pycdc.exe</p><p>将pyc文件与pacdc.exe放在同一目录，终端.\pycdc.exe 文件名.pyc</p><p>得到源码：</p><p><img src="/2025/02/06/python%E9%80%86%E5%90%91/2.png" alt="jieguo"></p><p>好像是base64编码,但是引用的是自己编写的模块，应该是换表了</p><p>🤔上面我们说<code>PYZ-00.pyz_extracted</code>的文件夹里放的是程序引入的<strong>依赖库</strong>，果然找到了Litctfbase64.pyc,尝试用pycdc还原，但是提示CreateObject: Got unsupported type 0x0<br>Error loading file Litctfbase64.pyc: bad cast</p><p>😖没找到解决办法</p><p>用010editor查看16进制：</p><p><img src="/2025/02/06/python%E9%80%86%E5%90%91/3.png" alt="jieguo"></p><p>😮突然发现这个文件是带magic number的，直接复制就行了</p><p>有一串可疑的字符串，可能是映射表，不过不知道从哪里开始</p><p>然后打开一个pyc在线反编译的网站，得到了字符串：</p><p><img src="/2025/02/06/python%E9%80%86%E5%90%91/4.png" alt="jieguo"></p><p>直接base64解码就好了</p><h2 id="py是如何转换成exe的呢"><a href="#py是如何转换成exe的呢" class="headerlink" title="py是如何转换成exe的呢"></a>py是如何转换成exe的呢</h2><p>pyinstaller打包</p><p>首先安装加密打包程序所使用的库<code>tinyaes</code>，这里用了<code>清华源</code>并且指定使用了<code>1.0.3</code>版本库</p><p>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> tinyaes&#x3D;&#x3D;1.0.3</p><p>移动到脚本文件夹下：pyinstaller -F 测试脚本.py –key 123456</p><p>加密后结果只有入口脚本反编译成功，被依赖的脚本均被加密，无法直接被反编译</p>]]></content>
      
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reverse刷题笔记</title>
      <link href="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="HUBUCTF-2022-新生赛-simple-RE"><a href="#HUBUCTF-2022-新生赛-simple-RE" class="headerlink" title="[HUBUCTF 2022 新生赛]simple_RE"></a>[HUBUCTF 2022 新生赛]simple_RE</h2><p>附件是.exe文件</p><p>用ida打开F5反汇编得到：</p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/1.png" alt="反汇编C代码"></p><p>sub_401570函数对输入的flag进行变换，memcmp函数用于判断两个字符串的前n个字符是否相等</p><p>进入sub_401570：</p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/2.png" alt="函数代码"></p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/3.png" alt="函数代码"></p><p>(经过chatgpt分析) 分析出这个函数的功能：</p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/4.png" alt="函数功能"></p><p>到这里我认为只要把已知字符串进行base64解码就行，发现是乱码</p><p>经过wp提示，原来是base64换表</p><p>aQvejafhmuyjbac&#x3D;”qvEJAfHmUYjBac+u8Ph5n9Od17FrICL&#x2F;X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD”是映射表</p><p>写脚本复原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;qvEJAfHmUYjBac+u8Ph5n9Od17FrICL/X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD+/&quot;</span></span><br><span class="line">table2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        <span class="keyword">if</span> i == table[j]:</span><br><span class="line">            flag += table2[j]</span><br><span class="line"></span><br><span class="line">flag = base64.b64decode(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>base64原理：<a href="https://www.cnblogs.com/xiaxveliang/p/15097947.html">https://www.cnblogs.com/xiaxveliang/p/15097947.html</a></p><p>base64代码识别：</p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/5.png" alt="daima"></p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> C </tag>
            
            <tag> Base64 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
